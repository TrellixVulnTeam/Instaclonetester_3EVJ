{"ast":null,"code":"import axios from 'axios';\n/**\n * Fetches the profile information of a specific user\n * @function getUserProfile\n * @param {string} username Username of profile to fetch\n */\n\nexport const getUserProfile = async (username, authToken) => {\n  try {\n    const response = await axios.get(`/api/user/${username}`, authToken && {\n      headers: {\n        authorization: authToken\n      }\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n/**\n * Follows or unfollows a user with a given id depending on\n * whether they are already followed\n * @function followUser\n * @param {string} userId The id of the user to follow/unfollow\n * @param {string} authToken A user's auth token\n */\n\nexport const followUser = async (userId, authToken) => {\n  try {\n    const response = await axios.post(`/api/user/${userId}/follow`, null, {\n      headers: {\n        authorization: authToken\n      }\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n/**\n * Retrieves who the user is following\n * @function retrieveUserFollowing\n * @param {string} userId The id of the user to retrieve following users from\n * @param {number} offset The offset of how many users to skip for the next fetch\n * @param {string} authToken A user's auth token\n */\n\nexport const retrieveUserFollowing = async (userId, offset, authToken) => {\n  try {\n    const response = await axios.get(`/api/user/${userId}/${offset}/following`, {\n      headers: {\n        authorization: authToken\n      }\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n/**\n * Retrieves who is following the user\n * @function retrieveUserFollowing\n * @param {string} userId The id of the user to retrieve followers from\n * @param {number} offset The offset of how many users to skip for the next fetch\n * @param {string} authToken A user's auth token\n */\n\nexport const retrieveUserFollowers = async (userId, offset, authToken) => {\n  try {\n    const response = await axios.get(`/api/user/${userId}/${offset}/followers`, {\n      headers: {\n        authorization: authToken\n      }\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/services/profileService.js"],"names":["axios","getUserProfile","username","authToken","response","get","headers","authorization","data","err","Error","followUser","userId","post","retrieveUserFollowing","offset","retrieveUserFollowers"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;;;;;;AAKA,OAAO,MAAMC,cAAc,GAAG,OAAOC,QAAP,EAAiBC,SAAjB,KAA+B;AAC3D,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAN,CACpB,aAAYH,QAAS,EADD,EAErBC,SAAS,IAAI;AAAEG,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAEJ;AAAjB;AAAX,KAFQ,CAAvB;AAIA,WAAOC,QAAQ,CAACI,IAAhB;AACD,GAND,CAME,OAAOC,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACD;AACF,CAVM;AAYP;;;;;;;;AAOA,OAAO,MAAME,UAAU,GAAG,OAAOC,MAAP,EAAeT,SAAf,KAA6B;AACrD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACa,IAAN,CAAY,aAAYD,MAAO,SAA/B,EAAyC,IAAzC,EAA+C;AACpEN,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAEJ;AAAjB;AAD2D,KAA/C,CAAvB;AAGA,WAAOC,QAAQ,CAACI,IAAhB;AACD,GALD,CAKE,OAAOC,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACD;AACF,CATM;AAWP;;;;;;;;AAOA,OAAO,MAAMK,qBAAqB,GAAG,OAAOF,MAAP,EAAeG,MAAf,EAAuBZ,SAAvB,KAAqC;AACxE,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAN,CACpB,aAAYO,MAAO,IAAGG,MAAO,YADT,EAErB;AACET,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAEJ;AAAjB;AADX,KAFqB,CAAvB;AAMA,WAAOC,QAAQ,CAACI,IAAhB;AACD,GARD,CAQE,OAAOC,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACD;AACF,CAZM;AAcP;;;;;;;;AAOA,OAAO,MAAMO,qBAAqB,GAAG,OAAOJ,MAAP,EAAeG,MAAf,EAAuBZ,SAAvB,KAAqC;AACxE,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAN,CACpB,aAAYO,MAAO,IAAGG,MAAO,YADT,EAErB;AACET,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAEJ;AAAjB;AADX,KAFqB,CAAvB;AAMA,WAAOC,QAAQ,CAACI,IAAhB;AACD,GARD,CAQE,OAAOC,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACD;AACF,CAZM","sourcesContent":["import axios from 'axios';\n\n/**\n * Fetches the profile information of a specific user\n * @function getUserProfile\n * @param {string} username Username of profile to fetch\n */\nexport const getUserProfile = async (username, authToken) => {\n  try {\n    const response = await axios.get(\n      `/api/user/${username}`,\n      authToken && { headers: { authorization: authToken } }\n    );\n    return response.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n\n/**\n * Follows or unfollows a user with a given id depending on\n * whether they are already followed\n * @function followUser\n * @param {string} userId The id of the user to follow/unfollow\n * @param {string} authToken A user's auth token\n */\nexport const followUser = async (userId, authToken) => {\n  try {\n    const response = await axios.post(`/api/user/${userId}/follow`, null, {\n      headers: { authorization: authToken },\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n\n/**\n * Retrieves who the user is following\n * @function retrieveUserFollowing\n * @param {string} userId The id of the user to retrieve following users from\n * @param {number} offset The offset of how many users to skip for the next fetch\n * @param {string} authToken A user's auth token\n */\nexport const retrieveUserFollowing = async (userId, offset, authToken) => {\n  try {\n    const response = await axios.get(\n      `/api/user/${userId}/${offset}/following`,\n      {\n        headers: { authorization: authToken },\n      }\n    );\n    return response.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n\n/**\n * Retrieves who is following the user\n * @function retrieveUserFollowing\n * @param {string} userId The id of the user to retrieve followers from\n * @param {number} offset The offset of how many users to skip for the next fetch\n * @param {string} authToken A user's auth token\n */\nexport const retrieveUserFollowers = async (userId, offset, authToken) => {\n  try {\n    const response = await axios.get(\n      `/api/user/${userId}/${offset}/followers`,\n      {\n        headers: { authorization: authToken },\n      }\n    );\n    return response.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}