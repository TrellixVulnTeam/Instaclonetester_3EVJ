{"ast":null,"code":"var _jsxFileName = \"/Users/jidesh/Documents/instaclone/client/src/components/Comment/Comment.js\";\nimport React, { Fragment, useRef, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { formatDateDistance } from '../../utils/timeUtils';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport Linkify from 'linkifyjs/react';\nimport * as linkify from 'linkifyjs';\nimport mention from 'linkifyjs/plugins/mention';\nimport hashtag from 'linkifyjs/plugins/hashtag';\nimport { linkifyOptions } from '../../utils/linkifyUtils';\nimport Icon from '../Icon/Icon';\nimport { showModal, hideModal } from '../../redux/modal/modalActions';\nimport { showAlert } from '../../redux/alert/alertActions';\nimport { voteComment, getCommentReplies, deleteComment } from '../../services/commentService';\nimport Avatar from '../Avatar/Avatar';\nimport PulsatingIcon from '../Icon/PulsatingIcon/PulsatingIcon';\nimport CommentReply from './CommentReply/CommentReply';\nmention(linkify);\nhashtag(linkify);\n\nconst Comment = ({\n  comment,\n  caption,\n  simple,\n  post,\n  token,\n  currentUser,\n  dialogDispatch,\n  profileDispatch,\n  showModal,\n  hideModal,\n  showAlert\n}) => {\n  const commentRef = useRef();\n  const [commentPostTime, setCommentPostTime] = useState(() => formatDateDistance(caption ? post.date : comment.date));\n  const [toggleCommentReplies, setToggleCommentReplies] = useState(false);\n  const author = caption ? comment : comment.author;\n  const commentReplies = post.commentReplies.filter(commentReply => commentReply.parentComment === comment._id).sort((a, b) => {\n    return new Date(a) - new Date(b);\n  }) || [];\n  useEffect(() => {\n    const commentPostTimeInterval = setInterval(() => {\n      setCommentPostTime(formatDateDistance(caption ? post.date : comment.date));\n    }, 60000);\n    return () => clearInterval(commentPostTimeInterval);\n  }, [setCommentPostTime, caption, comment, post]);\n\n  const handleVote = async () => {\n    try {\n      dialogDispatch && dialogDispatch({\n        type: 'VOTE_COMMENT',\n        payload: {\n          commentId: comment._id,\n          currentUser\n        }\n      });\n      await voteComment(comment._id, token);\n    } catch (err) {\n      showAlert('Could not vote on the comment.', () => handleVote());\n    }\n  };\n\n  const handleGetCommentReplies = async () => {\n    if (commentReplies.length === comment.commentReplies) {\n      setToggleCommentReplies(previous => !previous);\n    } else {\n      try {\n        const replies = await getCommentReplies(comment._id, commentReplies.length > 0 ? commentReplies.length : 0);\n        dialogDispatch({\n          type: 'ADD_COMMENT_REPLY',\n          payload: {\n            comment: replies,\n            parentCommentId: comment._id\n          }\n        });\n        !toggleCommentReplies && setToggleCommentReplies(true);\n      } catch (err) {\n        showAlert(\"Could not get the comment's replies.\", () => handleGetCommentReplies());\n      }\n    }\n  };\n\n  const handleDeleteComment = async () => {\n    try {\n      dialogDispatch({\n        type: 'REMOVE_COMMENT',\n        payload: comment._id\n      });\n      profileDispatch && profileDispatch({\n        type: 'DECREMENT_POST_COMMENTS_COUNT',\n        payload: {\n          decrementCount: comment.commentReplies ? 1 + comment.commentReplies : 1,\n          postId: post._id\n        }\n      });\n      await deleteComment(comment._id, token);\n    } catch (err) {\n      showAlert('Could not delete comment.', () => handleDeleteComment());\n    }\n  };\n\n  const renderToggleRepliesButtonText = () => {\n    if (commentReplies.length === comment.commentReplies) {\n      if (toggleCommentReplies) {\n        return 'Hide replies';\n      }\n\n      return `View replies (${comment.commentReplies})`;\n    } else if (commentReplies.length < comment.commentReplies) {\n      return `View replies (${comment.commentReplies - commentReplies.length})`;\n    }\n  };\n\n  const commentClassNames = classNames({\n    comment: true,\n    'comment--simple': simple\n  });\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: commentClassNames,\n    ref: commentRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    onClick: () => hideModal('PostDialog'),\n    to: `/${author.username}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    size: \"4rem\",\n    imageSrc: author.avatar,\n    className: \"avatar--small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comment__content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"heading-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    onClick: () => hideModal('PostDialog'),\n    style: {\n      textDecoration: 'none',\n      color: 'currentColor',\n      marginRight: '5px'\n    },\n    to: `/${author.username}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 15\n    }\n  }, author.username)), /*#__PURE__*/React.createElement(Linkify, {\n    options: linkifyOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, comment.message)), !caption && currentUser && author.username === currentUser.username ? /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => showModal({\n      options: [{\n        warning: true,\n        text: 'Delete',\n        onClick: () => handleDeleteComment()\n      }]\n    }, 'OptionsDialog/OptionsDialog'),\n    className: \"comment__menu-dots\",\n    style: {\n      marginRight: '0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    className: \"icon--small icon--button color-grey\",\n    icon: \"ellipsis-horizontal\",\n    style: {\n      height: '3rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 15\n    }\n  })) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comment__stats\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"heading-5 color-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }\n  }, commentPostTime), !caption && /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 15\n    }\n  }, comment.commentVotes.length > 0 && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"heading-5 color-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 19\n    }\n  }, comment.commentVotes.length, ' ', comment.commentVotes.length === 1 ? 'like' : 'likes'), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => // Telling the PostDialogCommentForm that we want to reply to this comment\n    dialogDispatch({\n      type: 'SET_REPLYING',\n      payload: {\n        username: comment.author.username,\n        commentId: comment._id\n      }\n    }),\n    className: \"heading-5 heading--button color-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 17\n    }\n  }, \"reply\"))), caption && post.commentData ? /*#__PURE__*/React.createElement(Link, {\n    className: \"heading-4 color-grey font-medium\",\n    style: {\n      textDecoration: 'none'\n    },\n    to: `/post/${post._id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }\n  }, \"View all \", post.commentData.commentCount, \" comments\") : null, dialogDispatch && !caption && comment.commentReplies > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    onClick: () => handleGetCommentReplies(),\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      marginTop: '1rem'\n    },\n    className: \"heading-5 heading--button color-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"dash mr-lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 15\n    }\n  }), renderToggleRepliesButtonText()) : null), !caption && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"comment__like\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 11\n    }\n  }, currentUser ? /*#__PURE__*/React.createElement(PulsatingIcon, {\n    toggle: !!comment.commentVotes.find(vote => vote.author === currentUser._id),\n    constantProps: {\n      onClick: () => handleVote()\n    },\n    toggledProps: [{\n      icon: 'heart',\n      className: 'icon--tiny color-red'\n    }, {\n      icon: 'heart-outline',\n      className: 'icon--tiny'\n    }],\n    elementRef: commentRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(Icon, {\n    icon: \"heart-outline\",\n    className: \"icon--tiny\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 15\n    }\n  }))), toggleCommentReplies ? commentReplies.map((commentReply, idx) => /*#__PURE__*/React.createElement(CommentReply, {\n    comment: commentReply,\n    parentComment: comment,\n    post: post,\n    token: token,\n    currentUser: currentUser,\n    dialogDispatch: dialogDispatch,\n    profileDispatch: profileDispatch,\n    showModal: showModal,\n    hideModal: hideModal,\n    showAlert: showAlert,\n    key: idx,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }\n  })) : null);\n};\n\nconst mapDispatchToProps = dispatch => ({\n  hideModal: component => dispatch(hideModal(component)),\n  showModal: (props, component) => dispatch(showModal(props, component)),\n  showAlert: (text, onClick) => dispatch(showAlert(text, onClick))\n});\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    message: PropTypes.string.isRequired,\n    avatar: PropTypes.string,\n    username: PropTypes.isRequired,\n    commentVotes: PropTypes.array,\n    _id: PropTypes.string,\n    date: PropTypes.string\n  }).isRequired,\n  caption: PropTypes.bool,\n  post: PropTypes.object.isRequired,\n  token: PropTypes.string,\n  currentUser: PropTypes.object,\n  showModal: PropTypes.func.isRequired\n};\nexport default connect(null, mapDispatchToProps)(Comment);","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/components/Comment/Comment.js"],"names":["React","Fragment","useRef","useState","useEffect","connect","PropTypes","formatDateDistance","Link","classNames","Linkify","linkify","mention","hashtag","linkifyOptions","Icon","showModal","hideModal","showAlert","voteComment","getCommentReplies","deleteComment","Avatar","PulsatingIcon","CommentReply","Comment","comment","caption","simple","post","token","currentUser","dialogDispatch","profileDispatch","commentRef","commentPostTime","setCommentPostTime","date","toggleCommentReplies","setToggleCommentReplies","author","commentReplies","filter","commentReply","parentComment","_id","sort","a","b","Date","commentPostTimeInterval","setInterval","clearInterval","handleVote","type","payload","commentId","err","handleGetCommentReplies","length","previous","replies","parentCommentId","handleDeleteComment","decrementCount","postId","renderToggleRepliesButtonText","commentClassNames","username","avatar","textDecoration","color","marginRight","message","options","warning","text","onClick","height","commentVotes","commentData","commentCount","display","alignItems","marginTop","find","vote","icon","className","map","idx","mapDispatchToProps","dispatch","component","props","propTypes","shape","string","isRequired","array","bool","object","func"],"mappings":"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","sourcesContent":["import React, { Fragment, useRef, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { formatDateDistance } from '../../utils/timeUtils';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport Linkify from 'linkifyjs/react';\nimport * as linkify from 'linkifyjs';\nimport mention from 'linkifyjs/plugins/mention';\nimport hashtag from 'linkifyjs/plugins/hashtag';\n\nimport { linkifyOptions } from '../../utils/linkifyUtils';\n\nimport Icon from '../Icon/Icon';\n\nimport { showModal, hideModal } from '../../redux/modal/modalActions';\nimport { showAlert } from '../../redux/alert/alertActions';\n\nimport {\n  voteComment,\n  getCommentReplies,\n  deleteComment,\n} from '../../services/commentService';\n\nimport Avatar from '../Avatar/Avatar';\nimport PulsatingIcon from '../Icon/PulsatingIcon/PulsatingIcon';\nimport CommentReply from './CommentReply/CommentReply';\n\nmention(linkify);\nhashtag(linkify);\n\nconst Comment = ({\n  comment,\n  caption,\n  simple,\n  post,\n  token,\n  currentUser,\n  dialogDispatch,\n  profileDispatch,\n  showModal,\n  hideModal,\n  showAlert,\n}) => {\n  const commentRef = useRef();\n  const [commentPostTime, setCommentPostTime] = useState(() =>\n    formatDateDistance(caption ? post.date : comment.date)\n  );\n  const [toggleCommentReplies, setToggleCommentReplies] = useState(false);\n  const author = caption ? comment : comment.author;\n\n  const commentReplies =\n    post.commentReplies\n      .filter((commentReply) => commentReply.parentComment === comment._id)\n      .sort((a, b) => {\n        return new Date(a) - new Date(b);\n      }) || [];\n\n  useEffect(() => {\n    const commentPostTimeInterval = setInterval(() => {\n      setCommentPostTime(\n        formatDateDistance(caption ? post.date : comment.date)\n      );\n    }, 60000);\n    return () => clearInterval(commentPostTimeInterval);\n  }, [setCommentPostTime, caption, comment, post]);\n\n  const handleVote = async () => {\n    try {\n      dialogDispatch &&\n        dialogDispatch({\n          type: 'VOTE_COMMENT',\n          payload: { commentId: comment._id, currentUser },\n        });\n      await voteComment(comment._id, token);\n    } catch (err) {\n      showAlert('Could not vote on the comment.', () => handleVote());\n    }\n  };\n\n  const handleGetCommentReplies = async () => {\n    if (commentReplies.length === comment.commentReplies) {\n      setToggleCommentReplies((previous) => !previous);\n    } else {\n      try {\n        const replies = await getCommentReplies(\n          comment._id,\n          commentReplies.length > 0 ? commentReplies.length : 0\n        );\n        dialogDispatch({\n          type: 'ADD_COMMENT_REPLY',\n          payload: { comment: replies, parentCommentId: comment._id },\n        });\n        !toggleCommentReplies && setToggleCommentReplies(true);\n      } catch (err) {\n        showAlert(\"Could not get the comment's replies.\", () =>\n          handleGetCommentReplies()\n        );\n      }\n    }\n  };\n\n  const handleDeleteComment = async () => {\n    try {\n      dialogDispatch({ type: 'REMOVE_COMMENT', payload: comment._id });\n      profileDispatch &&\n        profileDispatch({\n          type: 'DECREMENT_POST_COMMENTS_COUNT',\n          payload: {\n            decrementCount: comment.commentReplies\n              ? 1 + comment.commentReplies\n              : 1,\n            postId: post._id,\n          },\n        });\n      await deleteComment(comment._id, token);\n    } catch (err) {\n      showAlert('Could not delete comment.', () => handleDeleteComment());\n    }\n  };\n\n  const renderToggleRepliesButtonText = () => {\n    if (commentReplies.length === comment.commentReplies) {\n      if (toggleCommentReplies) {\n        return 'Hide replies';\n      }\n      return `View replies (${comment.commentReplies})`;\n    } else if (commentReplies.length < comment.commentReplies) {\n      return `View replies (${comment.commentReplies - commentReplies.length})`;\n    }\n  };\n\n  const commentClassNames = classNames({\n    comment: true,\n    'comment--simple': simple,\n  });\n\n  return (\n    <Fragment>\n      <div className={commentClassNames} ref={commentRef}>\n        <Link\n          onClick={() => hideModal('PostDialog')}\n          to={`/${author.username}`}\n        >\n          <Avatar\n            size=\"4rem\"\n            imageSrc={author.avatar}\n            className=\"avatar--small\"\n          />\n        </Link>\n        <div className=\"comment__content\">\n          <p className=\"heading-4\">\n            <Link\n              onClick={() => hideModal('PostDialog')}\n              style={{\n                textDecoration: 'none',\n                color: 'currentColor',\n                marginRight: '5px',\n              }}\n              to={`/${author.username}`}\n            >\n              <b>{author.username}</b>\n            </Link>\n            <Linkify options={linkifyOptions}>{comment.message}</Linkify>\n          </p>\n          {!caption &&\n          currentUser &&\n          author.username === currentUser.username ? (\n            <div\n              onClick={() =>\n                showModal(\n                  {\n                    options: [\n                      {\n                        warning: true,\n                        text: 'Delete',\n                        onClick: () => handleDeleteComment(),\n                      },\n                    ],\n                  },\n                  'OptionsDialog/OptionsDialog'\n                )\n              }\n              className=\"comment__menu-dots\"\n              style={{ marginRight: '0' }}\n            >\n              <Icon\n                className=\"icon--small icon--button color-grey\"\n                icon=\"ellipsis-horizontal\"\n                style={{ height: '3rem' }}\n              />\n            </div>\n          ) : null}\n          <div className=\"comment__stats\">\n            <p className=\"heading-5 color-light\">{commentPostTime}</p>\n            {!caption && (\n              <Fragment>\n                {comment.commentVotes.length > 0 && (\n                  <p className=\"heading-5 color-light\">\n                    {comment.commentVotes.length}{' '}\n                    {comment.commentVotes.length === 1 ? 'like' : 'likes'}\n                  </p>\n                )}\n                <button\n                  onClick={() =>\n                    // Telling the PostDialogCommentForm that we want to reply to this comment\n                    dialogDispatch({\n                      type: 'SET_REPLYING',\n                      payload: {\n                        username: comment.author.username,\n                        commentId: comment._id,\n                      },\n                    })\n                  }\n                  className=\"heading-5 heading--button color-light\"\n                >\n                  reply\n                </button>\n              </Fragment>\n            )}\n          </div>\n          {caption && post.commentData ? (\n            <Link\n              className=\"heading-4 color-grey font-medium\"\n              style={{ textDecoration: 'none' }}\n              to={`/post/${post._id}`}\n            >\n              View all {post.commentData.commentCount} comments\n            </Link>\n          ) : null}\n          {dialogDispatch && !caption && comment.commentReplies > 0 ? (\n            <p\n              onClick={() => handleGetCommentReplies()}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                marginTop: '1rem',\n              }}\n              className=\"heading-5 heading--button color-light\"\n            >\n              <span className=\"dash mr-lg\" />\n              {/* Check if all the comments available are fetched */}\n              {renderToggleRepliesButtonText()}\n            </p>\n          ) : null}\n        </div>\n        {!caption && (\n          <div className=\"comment__like\">\n            {currentUser ? (\n              <PulsatingIcon\n                toggle={\n                  !!comment.commentVotes.find(\n                    (vote) => vote.author === currentUser._id\n                  )\n                }\n                constantProps={{\n                  onClick: () => handleVote(),\n                }}\n                toggledProps={[\n                  { icon: 'heart', className: 'icon--tiny color-red' },\n                  { icon: 'heart-outline', className: 'icon--tiny' },\n                ]}\n                elementRef={commentRef}\n              />\n            ) : (\n              <Icon icon=\"heart-outline\" className=\"icon--tiny\" />\n            )}\n          </div>\n        )}\n      </div>\n      {/* Render any comment replies */}\n      {toggleCommentReplies\n        ? commentReplies.map((commentReply, idx) => (\n            <CommentReply\n              comment={commentReply}\n              parentComment={comment}\n              post={post}\n              token={token}\n              currentUser={currentUser}\n              dialogDispatch={dialogDispatch}\n              profileDispatch={profileDispatch}\n              showModal={showModal}\n              hideModal={hideModal}\n              showAlert={showAlert}\n              key={idx}\n            />\n          ))\n        : null}\n    </Fragment>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  hideModal: (component) => dispatch(hideModal(component)),\n  showModal: (props, component) => dispatch(showModal(props, component)),\n  showAlert: (text, onClick) => dispatch(showAlert(text, onClick)),\n});\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    message: PropTypes.string.isRequired,\n    avatar: PropTypes.string,\n    username: PropTypes.isRequired,\n    commentVotes: PropTypes.array,\n    _id: PropTypes.string,\n    date: PropTypes.string,\n  }).isRequired,\n  caption: PropTypes.bool,\n  post: PropTypes.object.isRequired,\n  token: PropTypes.string,\n  currentUser: PropTypes.object,\n  showModal: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Comment);\n"]},"metadata":{},"sourceType":"module"}