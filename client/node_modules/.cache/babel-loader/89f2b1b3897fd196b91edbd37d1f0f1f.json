{"ast":null,"code":"var _jsxFileName = \"/Users/jidesh/Documents/instaclone/client/src/components/ChangeAvatarButton/ChangeAvatarButton.js\";\nimport React, { Fragment, useRef, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { changeAvatarStart, removeAvatarStart } from '../../redux/user/userActions';\nimport { selectCurrentUser, selectToken, selectFetchingAvatar, selectError } from '../../redux/user/userSelectors';\nimport { showModal } from '../../redux/modal/modalActions';\nimport { showAlert } from '../../redux/alert/alertActions';\n\nconst ChangeAvatarButton = ({\n  children,\n  changeAvatarStart,\n  removeAvatarStart,\n  currentUser: {\n    avatar\n  },\n  showModal,\n  showAlert,\n  token,\n  error\n}) => {\n  const inputRef = useRef();\n  useEffect(() => {\n    if (error) {\n      showAlert(error);\n    }\n  }, [error, showAlert]);\n\n  const handleClick = event => {\n    if (avatar) {\n      event.preventDefault();\n      return showModal({\n        options: [{\n          text: 'Upload Photo',\n          className: 'color-blue font-bold',\n          onClick: () => {\n            inputRef.current.click();\n          }\n        }, {\n          warning: true,\n          text: 'Remove Current Photo',\n          onClick: () => {\n            changeAvatar(null, true);\n          }\n        }]\n      }, 'OptionsDialog/OptionsDialog');\n    }\n\n    inputRef.current.click();\n  };\n\n  const changeAvatar = async (event, remove) => {\n    remove ? await removeAvatarStart(token) : await changeAvatarStart(event.target.files[0], token);\n    if (!error) showAlert('Profile picture updated.');\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"color-blue font-bold heading-4\",\n    style: {\n      cursor: 'pointer',\n      position: 'relative'\n    },\n    onClick: event => handleClick(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, children ? children : 'Change Profile Photo')), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"avatar-upload\",\n    type: \"file\",\n    accept: \"image/*\",\n    style: {\n      display: 'none'\n    },\n    ref: inputRef,\n    onChange: event => changeAvatar(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  changeAvatarStart: (image, authToken) => dispatch(changeAvatarStart(image, authToken)),\n  removeAvatarStart: authToken => dispatch(removeAvatarStart(authToken)),\n  showModal: (props, component) => dispatch(showModal(props, component)),\n  showAlert: (text, onClick) => dispatch(showAlert(text, onClick))\n});\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n  token: selectToken,\n  fetchingAvatar: selectFetchingAvatar,\n  error: selectError\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangeAvatarButton);","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/components/ChangeAvatarButton/ChangeAvatarButton.js"],"names":["React","Fragment","useRef","useEffect","connect","createStructuredSelector","changeAvatarStart","removeAvatarStart","selectCurrentUser","selectToken","selectFetchingAvatar","selectError","showModal","showAlert","ChangeAvatarButton","children","currentUser","avatar","token","error","inputRef","handleClick","event","preventDefault","options","text","className","onClick","current","click","warning","changeAvatar","remove","target","files","cursor","position","display","mapDispatchToProps","dispatch","image","authToken","props","component","mapStateToProps","fetchingAvatar"],"mappings":"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","sourcesContent":["import React, { Fragment, useRef, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport {\n  changeAvatarStart,\n  removeAvatarStart,\n} from '../../redux/user/userActions';\nimport {\n  selectCurrentUser,\n  selectToken,\n  selectFetchingAvatar,\n  selectError,\n} from '../../redux/user/userSelectors';\nimport { showModal } from '../../redux/modal/modalActions';\nimport { showAlert } from '../../redux/alert/alertActions';\n\nconst ChangeAvatarButton = ({\n  children,\n  changeAvatarStart,\n  removeAvatarStart,\n  currentUser: { avatar },\n  showModal,\n  showAlert,\n  token,\n  error,\n}) => {\n  const inputRef = useRef();\n\n  useEffect(() => {\n    if (error) {\n      showAlert(error);\n    }\n  }, [error, showAlert]);\n\n  const handleClick = (event) => {\n    if (avatar) {\n      event.preventDefault();\n      return showModal(\n        {\n          options: [\n            {\n              text: 'Upload Photo',\n              className: 'color-blue font-bold',\n              onClick: () => {\n                inputRef.current.click();\n              },\n            },\n            {\n              warning: true,\n              text: 'Remove Current Photo',\n              onClick: () => {\n                changeAvatar(null, true);\n              },\n            },\n          ],\n        },\n        'OptionsDialog/OptionsDialog'\n      );\n    }\n    inputRef.current.click();\n  };\n\n  const changeAvatar = async (event, remove) => {\n    remove\n      ? await removeAvatarStart(token)\n      : await changeAvatarStart(event.target.files[0], token);\n    if (!error) showAlert('Profile picture updated.');\n  };\n\n  return (\n    <Fragment>\n      <label\n        className=\"color-blue font-bold heading-4\"\n        style={{ cursor: 'pointer', position: 'relative' }}\n        onClick={(event) => handleClick(event)}\n      >\n        <Fragment>{children ? children : 'Change Profile Photo'}</Fragment>\n      </label>\n      <input\n        id=\"avatar-upload\"\n        type=\"file\"\n        accept=\"image/*\"\n        style={{ display: 'none' }}\n        ref={inputRef}\n        onChange={(event) => changeAvatar(event)}\n      />\n    </Fragment>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  changeAvatarStart: (image, authToken) =>\n    dispatch(changeAvatarStart(image, authToken)),\n  removeAvatarStart: (authToken) => dispatch(removeAvatarStart(authToken)),\n  showModal: (props, component) => dispatch(showModal(props, component)),\n  showAlert: (text, onClick) => dispatch(showAlert(text, onClick)),\n});\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n  token: selectToken,\n  fetchingAvatar: selectFetchingAvatar,\n  error: selectError,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangeAvatarButton);\n"]},"metadata":{},"sourceType":"module"}