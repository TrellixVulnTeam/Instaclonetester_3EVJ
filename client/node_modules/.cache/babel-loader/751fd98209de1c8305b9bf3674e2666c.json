{"ast":null,"code":"var _jsxFileName = \"/Users/jidesh/Documents/instaclone/client/src/components/PostDialog/PostDialog.js\";\nimport React, { useEffect, useReducer, Fragment, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport classNames from 'classnames';\nimport { Link, useHistory } from 'react-router-dom';\nimport { selectToken, selectCurrentUser } from '../../redux/user/userSelectors';\nimport { showModal, hideModal } from '../../redux/modal/modalActions';\nimport { showAlert } from '../../redux/alert/alertActions';\nimport { getPost, deletePost } from '../../services/postService';\nimport { getComments } from '../../services/commentService';\nimport Avatar from '../Avatar/Avatar';\nimport Icon from '../Icon/Icon';\nimport SkeletonLoader from '../SkeletonLoader/SkeletonLoader';\nimport Comment from '../Comment/Comment';\nimport PostDialogCommentForm from './PostDialogCommentForm/PostDialogCommentForm';\nimport PostDialogStats from './PostDialogStats/PostDialogStats';\nimport { INITIAL_STATE, postDialogReducer } from './postDialogReducer';\n\nconst PostDialog = ({\n  postId,\n  token,\n  currentUser,\n  profileDispatch,\n  showModal,\n  hideModal,\n  showAlert,\n  style,\n  className,\n  postData,\n  loading,\n  simple\n}) => {\n  const commentsRef = useRef();\n  const [state, dispatch] = useReducer(postDialogReducer, INITIAL_STATE);\n  const history = useHistory();\n  const fetching = loading !== undefined ? loading : state.fetching;\n  useEffect(() => {\n    if (!loading) {\n      // Check if the post data is already provided by another component\n      if (postData) {\n        dispatch({\n          type: 'FETCH_POST_SUCCESS',\n          payload: postData\n        });\n      } else {\n        window.history.pushState({\n          prevUrl: window.location.href\n        }, null, `/post/${postId}`);\n\n        (async function () {\n          try {\n            const response = await getPost(postId);\n            dispatch({\n              type: 'FETCH_POST_SUCCESS',\n              payload: response\n            });\n          } catch (err) {\n            history.push('/');\n            dispatch({\n              type: 'FETCH_POST_FAILURE',\n              payload: err\n            });\n          }\n        })();\n      }\n    }\n\n    return () => {\n      if (window.history.state && window.history.state.prevUrl) {\n        window.history.pushState('profile', 'Profile', window.history.state.prevUrl);\n      }\n    };\n  }, [postId, history, loading, postData]);\n\n  const fetchAdditionalComments = async () => {\n    try {\n      const commentData = await getComments(postId, state.data.comments.length, state.localStateComments.size);\n      dispatch({\n        type: 'ADD_COMMENT',\n        payload: commentData.comments\n      });\n    } catch (err) {\n      showAlert('Unable to fetch additional comments.', () => fetchAdditionalComments());\n    }\n  };\n\n  const handleDeletePost = async () => {\n    try {\n      await deletePost(postId, token);\n      profileDispatch && profileDispatch({\n        type: 'DELETE_POST',\n        payload: postId\n      });\n      hideModal('PostDialog/PostDialog');\n    } catch (err) {\n      showAlert('Unable to delete post.', () => handleDeletePost());\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames({\n      'post-dialog': true,\n      'post-dialog--simple': simple,\n      [className]: className\n    }),\n    \"data-test\": \"component-post-dialog\",\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames({\n      'post-dialog__image': true,\n      'post-dialog__image--simple': simple\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, fetching ? /*#__PURE__*/React.createElement(SkeletonLoader, {\n    animated: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(\"img\", {\n    src: state.data.image,\n    alt: \"Post\",\n    style: {\n      filter: state.data.filter\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"header\", {\n    className: classNames({\n      'post-dialog__header': true,\n      'post-dialog__header--simple': simple\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, fetching ? /*#__PURE__*/React.createElement(SkeletonLoader, {\n    style: {\n      height: '4rem',\n      width: '4rem',\n      borderRadius: '100px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(Link, {\n    to: `/${state.data.author.username}`,\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    className: \"avatar--small\",\n    imageSrc: state.data.author.avatar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 15\n    }\n  })), fetching ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SkeletonLoader, {\n    style: {\n      height: '1rem',\n      width: '10rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(SkeletonLoader, {\n    style: {\n      height: '1rem',\n      width: '15rem',\n      marginTop: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  })) : /*#__PURE__*/React.createElement(Link, {\n    style: {\n      textDecoration: 'none'\n    },\n    to: `/${state.data.author.username}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"heading-4 heading-4--bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }\n  }, state.data.author.username))), !fetching && /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => {\n      const options = [{\n        text: 'Go to post',\n        onClick: () => {\n          hideModal('PostDialog/PostDialog');\n          history.push(`/post/${postId}`);\n        }\n      }, {\n        text: 'Copy link',\n        onClick: () => {\n          navigator.clipboard.writeText(document.URL).then(() => showAlert('Link copied to clipboard.')).catch(() => showAlert('Could not copy link to clipboard.'));\n        }\n      }];\n      showModal({\n        options: currentUser && currentUser.username === state.data.author.username ? [...options, {\n          text: 'Delete post',\n          warning: true,\n          onClick: () => {\n            handleDeletePost();\n            history.push('/' + currentUser.username);\n          }\n        }] : options\n      }, 'OptionsDialog/OptionsDialog');\n    },\n    style: {\n      cursor: 'pointer'\n    },\n    className: \"post-dialog__more\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    className: \"icon--small\",\n    icon: \"ellipsis-horizontal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    \"data-test\": \"component-post-dialog-content\",\n    className: classNames({\n      'post-dialog__content': true,\n      'post-dialog__content--simple': simple\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: commentsRef,\n    className: classNames({\n      comments: true,\n      'comments--simple': simple\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  }, state.data.caption && !fetching ? /*#__PURE__*/React.createElement(Comment, {\n    comment: {\n      message: state.data.caption,\n      avatar: state.data.author.avatar,\n      username: state.data.author.username\n    },\n    currentUser: currentUser,\n    token: token,\n    post: state.data,\n    caption: true,\n    simple: simple,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 15\n    }\n  }) : null, !fetching && state.data.comments.map((comment, idx) => /*#__PURE__*/React.createElement(Comment, {\n    comment: comment,\n    currentUser: currentUser,\n    token: token,\n    post: state.data,\n    key: idx,\n    dialogDispatch: dispatch,\n    profileDispatch: profileDispatch,\n    simple: simple,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 17\n    }\n  })), !postData && state.data.comments.length - state.localStateComments.size < state.data.commentCount - state.localStateComments.size && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '2rem',\n      cursor: 'pointer'\n    },\n    onClick: () => fetchAdditionalComments(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    style: {\n      margin: '0 auto'\n    },\n    icon: \"add-circle-outline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 19\n    }\n  }))), fetching ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      padding: '2rem 2rem 6rem 2rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SkeletonLoader, {\n    style: {\n      height: '1.5rem',\n      width: '15rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(SkeletonLoader, {\n    style: {\n      height: '1.5rem',\n      width: '20rem',\n      marginTop: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(SkeletonLoader, {\n    style: {\n      height: '1.5rem',\n      width: '10rem',\n      marginTop: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 15\n    }\n  })) : /*#__PURE__*/React.createElement(PostDialogStats, {\n    currentUser: currentUser,\n    token: token,\n    post: state.data,\n    dispatch: dispatch,\n    profileDispatch: profileDispatch,\n    simple: simple,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 13\n    }\n  }), !fetching && /*#__PURE__*/React.createElement(PostDialogCommentForm, {\n    postId: postId,\n    token: token,\n    currentUser: currentUser,\n    commentsRef: commentsRef,\n    dialogDispatch: dispatch,\n    profileDispatch: profileDispatch,\n    replying: state.replying,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }\n  }))));\n};\n\nPostDialog.propTypes = {\n  postId: PropTypes.string,\n  token: PropTypes.string,\n  currentUser: PropTypes.object,\n  profileDispatch: PropTypes.func\n};\nconst mapStateToProps = createStructuredSelector({\n  token: selectToken,\n  currentUser: selectCurrentUser\n});\n\nconst mapDispatchToProps = dispatch => ({\n  showModal: (props, component) => dispatch(showModal(props, component)),\n  hideModal: component => dispatch(hideModal(component)),\n  showAlert: (text, onClick) => dispatch(showAlert(text, onClick))\n});\n\nPostDialog.whyDidYouRender = true;\nexport default connect(mapStateToProps, mapDispatchToProps)(PostDialog);","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/components/PostDialog/PostDialog.js"],"names":["React","useEffect","useReducer","Fragment","useRef","PropTypes","connect","createStructuredSelector","classNames","Link","useHistory","selectToken","selectCurrentUser","showModal","hideModal","showAlert","getPost","deletePost","getComments","Avatar","Icon","SkeletonLoader","Comment","PostDialogCommentForm","PostDialogStats","INITIAL_STATE","postDialogReducer","PostDialog","postId","token","currentUser","profileDispatch","style","className","postData","loading","simple","commentsRef","state","dispatch","history","fetching","undefined","type","payload","window","pushState","prevUrl","location","href","response","err","push","fetchAdditionalComments","commentData","data","comments","length","localStateComments","size","handleDeletePost","image","filter","height","width","borderRadius","author","username","display","avatar","flexDirection","marginTop","textDecoration","options","text","onClick","navigator","clipboard","writeText","document","URL","then","catch","warning","cursor","caption","message","map","comment","idx","commentCount","padding","margin","replying","propTypes","string","object","func","mapStateToProps","mapDispatchToProps","props","component","whyDidYouRender"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer, Fragment, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport classNames from 'classnames';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { selectToken, selectCurrentUser } from '../../redux/user/userSelectors';\n\nimport { showModal, hideModal } from '../../redux/modal/modalActions';\nimport { showAlert } from '../../redux/alert/alertActions';\n\nimport { getPost, deletePost } from '../../services/postService';\nimport { getComments } from '../../services/commentService';\n\nimport Avatar from '../Avatar/Avatar';\nimport Icon from '../Icon/Icon';\nimport SkeletonLoader from '../SkeletonLoader/SkeletonLoader';\nimport Comment from '../Comment/Comment';\nimport PostDialogCommentForm from './PostDialogCommentForm/PostDialogCommentForm';\nimport PostDialogStats from './PostDialogStats/PostDialogStats';\n\nimport { INITIAL_STATE, postDialogReducer } from './postDialogReducer';\n\nconst PostDialog = ({\n  postId,\n  token,\n  currentUser,\n  profileDispatch,\n  showModal,\n  hideModal,\n  showAlert,\n  style,\n  className,\n  postData,\n  loading,\n  simple,\n}) => {\n  const commentsRef = useRef();\n  const [state, dispatch] = useReducer(postDialogReducer, INITIAL_STATE);\n  const history = useHistory();\n\n  const fetching = loading !== undefined ? loading : state.fetching;\n\n  useEffect(() => {\n    if (!loading) {\n      // Check if the post data is already provided by another component\n      if (postData) {\n        dispatch({ type: 'FETCH_POST_SUCCESS', payload: postData });\n      } else {\n        window.history.pushState(\n          { prevUrl: window.location.href },\n          null,\n          `/post/${postId}`\n        );\n        (async function () {\n          try {\n            const response = await getPost(postId);\n            dispatch({ type: 'FETCH_POST_SUCCESS', payload: response });\n          } catch (err) {\n            history.push('/');\n            dispatch({ type: 'FETCH_POST_FAILURE', payload: err });\n          }\n        })();\n      }\n    }\n\n    return () => {\n      if (window.history.state && window.history.state.prevUrl) {\n        window.history.pushState(\n          'profile',\n          'Profile',\n          window.history.state.prevUrl\n        );\n      }\n    };\n  }, [postId, history, loading, postData]);\n\n  const fetchAdditionalComments = async () => {\n    try {\n      const commentData = await getComments(\n        postId,\n        state.data.comments.length,\n        state.localStateComments.size\n      );\n      dispatch({ type: 'ADD_COMMENT', payload: commentData.comments });\n    } catch (err) {\n      showAlert('Unable to fetch additional comments.', () =>\n        fetchAdditionalComments()\n      );\n    }\n  };\n\n  const handleDeletePost = async () => {\n    try {\n      await deletePost(postId, token);\n      profileDispatch &&\n        profileDispatch({\n          type: 'DELETE_POST',\n          payload: postId,\n        });\n      hideModal('PostDialog/PostDialog');\n    } catch (err) {\n      showAlert('Unable to delete post.', () => handleDeletePost());\n    }\n  };\n\n  return (\n    <div\n      className={classNames({\n        'post-dialog': true,\n        'post-dialog--simple': simple,\n        [className]: className,\n      })}\n      data-test=\"component-post-dialog\"\n      style={style}\n    >\n      <Fragment>\n        <div\n          className={classNames({\n            'post-dialog__image': true,\n            'post-dialog__image--simple': simple,\n          })}\n        >\n          {fetching ? (\n            <SkeletonLoader animated />\n          ) : (\n            <img\n              src={state.data.image}\n              alt=\"Post\"\n              style={{ filter: state.data.filter }}\n            />\n          )}\n        </div>\n        <header\n          className={classNames({\n            'post-dialog__header': true,\n            'post-dialog__header--simple': simple,\n          })}\n        >\n          {fetching ? (\n            <SkeletonLoader\n              style={{ height: '4rem', width: '4rem', borderRadius: '100px' }}\n            />\n          ) : (\n            <Link\n              to={`/${state.data.author.username}`}\n              style={{ display: 'flex' }}\n            >\n              <Avatar\n                className=\"avatar--small\"\n                imageSrc={state.data.author.avatar}\n              />\n            </Link>\n          )}\n          {fetching ? (\n            <div style={{ display: 'flex', flexDirection: 'column' }}>\n              <SkeletonLoader style={{ height: '1rem', width: '10rem' }} />\n              <SkeletonLoader\n                style={{ height: '1rem', width: '15rem', marginTop: '5px' }}\n              />\n            </div>\n          ) : (\n            <Link\n              style={{ textDecoration: 'none' }}\n              to={`/${state.data.author.username}`}\n            >\n              <p className=\"heading-4 heading-4--bold\">\n                <b>{state.data.author.username}</b>\n              </p>\n            </Link>\n          )}\n          {!fetching && (\n            <div\n              onClick={() => {\n                const options = [\n                  {\n                    text: 'Go to post',\n                    onClick: () => {\n                      hideModal('PostDialog/PostDialog');\n                      history.push(`/post/${postId}`);\n                    },\n                  },\n                  {\n                    text: 'Copy link',\n                    onClick: () => {\n                      navigator.clipboard\n                        .writeText(document.URL)\n                        .then(() => showAlert('Link copied to clipboard.'))\n                        .catch(() =>\n                          showAlert('Could not copy link to clipboard.')\n                        );\n                    },\n                  },\n                ];\n                showModal(\n                  {\n                    options:\n                      currentUser &&\n                      currentUser.username === state.data.author.username\n                        ? [\n                            ...options,\n                            {\n                              text: 'Delete post',\n                              warning: true,\n                              onClick: () => {\n                                handleDeletePost();\n                                history.push('/' + currentUser.username);\n                              },\n                            },\n                          ]\n                        : options,\n                  },\n                  'OptionsDialog/OptionsDialog'\n                );\n              }}\n              style={{ cursor: 'pointer' }}\n              className=\"post-dialog__more\"\n            >\n              <Icon className=\"icon--small\" icon=\"ellipsis-horizontal\" />\n            </div>\n          )}\n        </header>\n        <div\n          data-test=\"component-post-dialog-content\"\n          className={classNames({\n            'post-dialog__content': true,\n            'post-dialog__content--simple': simple,\n          })}\n        >\n          <div\n            ref={commentsRef}\n            className={classNames({\n              comments: true,\n              'comments--simple': simple,\n            })}\n          >\n            {/* Render a caption if there is one as a Comment component with the caption prop */}\n            {state.data.caption && !fetching ? (\n              <Comment\n                comment={{\n                  message: state.data.caption,\n                  avatar: state.data.author.avatar,\n                  username: state.data.author.username,\n                }}\n                currentUser={currentUser}\n                token={token}\n                post={state.data}\n                caption\n                simple={simple}\n              />\n            ) : null}\n            {!fetching &&\n              state.data.comments.map((comment, idx) => (\n                <Comment\n                  comment={comment}\n                  currentUser={currentUser}\n                  token={token}\n                  post={state.data}\n                  key={idx}\n                  dialogDispatch={dispatch}\n                  profileDispatch={profileDispatch}\n                  simple={simple}\n                />\n              ))}\n            {!postData &&\n              state.data.comments.length - state.localStateComments.size <\n                state.data.commentCount - state.localStateComments.size && (\n                <div\n                  style={{ padding: '2rem', cursor: 'pointer' }}\n                  onClick={() => fetchAdditionalComments()}\n                >\n                  <Icon\n                    style={{\n                      margin: '0 auto',\n                    }}\n                    icon=\"add-circle-outline\"\n                  />\n                </div>\n              )}\n          </div>\n          {fetching ? (\n            <div\n              style={{\n                display: 'flex',\n                flexDirection: 'column',\n                padding: '2rem 2rem 6rem 2rem',\n              }}\n            >\n              <SkeletonLoader style={{ height: '1.5rem', width: '15rem' }} />\n              <SkeletonLoader\n                style={{ height: '1.5rem', width: '20rem', marginTop: '1rem' }}\n              />\n              <SkeletonLoader\n                style={{ height: '1.5rem', width: '10rem', marginTop: '1rem' }}\n              />\n            </div>\n          ) : (\n            <PostDialogStats\n              currentUser={currentUser}\n              token={token}\n              post={state.data}\n              dispatch={dispatch}\n              profileDispatch={profileDispatch}\n              simple={simple}\n            />\n          )}\n          {!fetching && (\n            <PostDialogCommentForm\n              postId={postId}\n              token={token}\n              currentUser={currentUser}\n              commentsRef={commentsRef}\n              dialogDispatch={dispatch}\n              profileDispatch={profileDispatch}\n              replying={state.replying}\n            />\n          )}\n        </div>\n      </Fragment>\n    </div>\n  );\n};\n\nPostDialog.propTypes = {\n  postId: PropTypes.string,\n  token: PropTypes.string,\n  currentUser: PropTypes.object,\n  profileDispatch: PropTypes.func,\n};\n\nconst mapStateToProps = createStructuredSelector({\n  token: selectToken,\n  currentUser: selectCurrentUser,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  showModal: (props, component) => dispatch(showModal(props, component)),\n  hideModal: (component) => dispatch(hideModal(component)),\n  showAlert: (text, onClick) => dispatch(showAlert(text, onClick)),\n});\n\nPostDialog.whyDidYouRender = true;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostDialog);\n"]},"metadata":{},"sourceType":"module"}