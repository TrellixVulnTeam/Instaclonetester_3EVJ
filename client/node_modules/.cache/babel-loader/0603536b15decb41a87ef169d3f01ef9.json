{"ast":null,"code":"var _jsxFileName = \"/Users/jidesh/Documents/instaclone/client/src/components/NewPost/NewPostEdit/NewPostEdit.js\";\nimport React, { useState, Fragment, useRef } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport Icon from '../../Icon/Icon';\n\nconst NewPostEdit = ({\n  previewImage,\n  setPreviewImage,\n  file\n}) => {\n  const [imageState, setImageState] = useState({\n    crop: {\n      unit: '%',\n      aspect: 16 / 9\n    },\n    isCropping: false\n  });\n  const imageRef = useRef();\n\n  const getCroppedImg = (image, crop) => {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n\n        blob.name = 'cropped.jpeg';\n        const fileUrl = window.URL.createObjectURL(blob);\n        resolve(fileUrl);\n      }, 'image/jpeg');\n    });\n  };\n\n  const makeClientCrop = async crop => {\n    window.URL.revokeObjectURL(previewImage.src);\n\n    if (imageState.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await getCroppedImg(imageState.imageRef, crop, 'newFile.jpeg');\n      setPreviewImage({\n        src: croppedImageUrl,\n        crop\n      });\n      setImageState(previous => ({ ...previous,\n        isCropping: false\n      }));\n    }\n  };\n\n  const onCropChange = (crop, percentCrop) => {\n    setImageState(previous => ({ ...previous,\n      crop\n    }));\n  };\n\n  const onImageLoaded = image => {\n    setImageState(previous => ({ ...previous,\n      imageRef: image\n    }));\n  };\n\n  const onDragStart = () => {\n    setImageState(previous => ({ ...previous,\n      isCropping: true\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"new-post__preview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"new-post__preview-image-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ReactCrop, {\n    src: previewImage.src,\n    crop: imageState.crop,\n    onChange: onCropChange,\n    onImageLoaded: onImageLoaded,\n    onDragStart: onDragStart,\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    ref: imageRef,\n    imageStyle: {\n      width: '100%',\n      height: '100%',\n      objectFit: 'contain',\n      filter: previewImage.filter\n    },\n    ruleOfThirds: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Icon, {\n    icon: \"checkmark-outline\",\n    className: \"new-post__crop-button\",\n    style: imageState.isCropping ? {\n      display: 'inline-block'\n    } : {},\n    onClick: () => makeClientCrop(imageState.crop),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default NewPostEdit;","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/components/NewPost/NewPostEdit/NewPostEdit.js"],"names":["React","useState","Fragment","useRef","ReactCrop","Icon","NewPostEdit","previewImage","setPreviewImage","file","imageState","setImageState","crop","unit","aspect","isCropping","imageRef","getCroppedImg","image","canvas","document","createElement","scaleX","naturalWidth","width","scaleY","naturalHeight","height","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","console","error","name","fileUrl","window","URL","createObjectURL","makeClientCrop","revokeObjectURL","src","croppedImageUrl","previous","onCropChange","percentCrop","onImageLoaded","onDragStart","objectFit","filter","display"],"mappings":"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","sourcesContent":["import React, { useState, Fragment, useRef } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nimport Icon from '../../Icon/Icon';\n\nconst NewPostEdit = ({ previewImage, setPreviewImage, file }) => {\n  const [imageState, setImageState] = useState({\n    crop: { unit: '%', aspect: 16 / 9 },\n    isCropping: false,\n  });\n  const imageRef = useRef();\n\n  const getCroppedImg = (image, crop) => {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob((blob) => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n        blob.name = 'cropped.jpeg';\n        const fileUrl = window.URL.createObjectURL(blob);\n        resolve(fileUrl);\n      }, 'image/jpeg');\n    });\n  };\n\n  const makeClientCrop = async (crop) => {\n    window.URL.revokeObjectURL(previewImage.src);\n    if (imageState.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await getCroppedImg(\n        imageState.imageRef,\n        crop,\n        'newFile.jpeg'\n      );\n      setPreviewImage({ src: croppedImageUrl, crop });\n      setImageState((previous) => ({ ...previous, isCropping: false }));\n    }\n  };\n\n  const onCropChange = (crop, percentCrop) => {\n    setImageState((previous) => ({\n      ...previous,\n      crop,\n    }));\n  };\n\n  const onImageLoaded = (image) => {\n    setImageState((previous) => ({ ...previous, imageRef: image }));\n  };\n\n  const onDragStart = () => {\n    setImageState((previous) => ({ ...previous, isCropping: true }));\n  };\n\n  return (\n    <Fragment>\n      <div className=\"new-post__preview\">\n        <div className=\"new-post__preview-image-container\">\n          <ReactCrop\n            src={previewImage.src}\n            crop={imageState.crop}\n            onChange={onCropChange}\n            onImageLoaded={onImageLoaded}\n            onDragStart={onDragStart}\n            style={{ width: '100%', height: '100%' }}\n            ref={imageRef}\n            imageStyle={{\n              width: '100%',\n              height: '100%',\n              objectFit: 'contain',\n              filter: previewImage.filter,\n            }}\n            ruleOfThirds\n          />\n          <Icon\n            icon=\"checkmark-outline\"\n            className=\"new-post__crop-button\"\n            style={imageState.isCropping ? { display: 'inline-block' } : {}}\n            onClick={() => makeClientCrop(imageState.crop)}\n          />\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default NewPostEdit;\n"]},"metadata":{},"sourceType":"module"}