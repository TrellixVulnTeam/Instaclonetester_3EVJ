{"ast":null,"code":"import { useState, useRef } from 'react';\nimport debounce from 'lodash/debounce';\nimport { searchUsers } from '../services/userService';\n/**\n * A memoized debounced hook to search for users with a given offset\n * @function useSearchUsersDebounced\n * @returns {object} Search function and search result\n */\n\nconst useSearchUsersDebounced = () => {\n  const [result, setResult] = useState([]);\n  const [fetching, setFetching] = useState(false);\n\n  const handleSearch = async (string, offset) => {\n    if (!string) {\n      setFetching(false);\n      return setResult([]);\n    }\n\n    try {\n      const response = await searchUsers(string, offset);\n      setResult(response ? response : []);\n      setFetching(false);\n    } catch (err) {\n      setFetching(false);\n      throw new Error(err);\n    }\n  };\n\n  const handleSearchDebounced = debounce(handleSearch, 500);\n  const handleSearchDebouncedRef = useRef((string, offset) => handleSearchDebounced(string, offset)).current;\n  return {\n    handleSearchDebouncedRef,\n    result,\n    setResult,\n    fetching,\n    setFetching\n  };\n};\n\nexport default useSearchUsersDebounced;","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/hooks/useSearchUsersDebounced.js"],"names":["useState","useRef","debounce","searchUsers","useSearchUsersDebounced","result","setResult","fetching","setFetching","handleSearch","string","offset","response","err","Error","handleSearchDebounced","handleSearchDebouncedRef","current"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,SAASC,WAAT,QAA4B,yBAA5B;AAEA;;;;;;AAKA,MAAMC,uBAAuB,GAAG,MAAM;AACpC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;;AAEA,QAAMS,YAAY,GAAG,OAAOC,MAAP,EAAeC,MAAf,KAA0B;AAC7C,QAAI,CAACD,MAAL,EAAa;AACXF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACA,aAAOF,SAAS,CAAC,EAAD,CAAhB;AACD;;AAED,QAAI;AACF,YAAMM,QAAQ,GAAG,MAAMT,WAAW,CAACO,MAAD,EAASC,MAAT,CAAlC;AACAL,MAAAA,SAAS,CAACM,QAAQ,GAAGA,QAAH,GAAc,EAAvB,CAAT;AACAJ,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD,KAJD,CAIE,OAAOK,GAAP,EAAY;AACZL,MAAAA,WAAW,CAAC,KAAD,CAAX;AACA,YAAM,IAAIM,KAAJ,CAAUD,GAAV,CAAN;AACD;AACF,GAdD;;AAeA,QAAME,qBAAqB,GAAGb,QAAQ,CAACO,YAAD,EAAe,GAAf,CAAtC;AACA,QAAMO,wBAAwB,GAAGf,MAAM,CAAC,CAACS,MAAD,EAASC,MAAT,KACtCI,qBAAqB,CAACL,MAAD,EAASC,MAAT,CADgB,CAAN,CAE/BM,OAFF;AAGA,SAAO;AACLD,IAAAA,wBADK;AAELX,IAAAA,MAFK;AAGLC,IAAAA,SAHK;AAILC,IAAAA,QAJK;AAKLC,IAAAA;AALK,GAAP;AAOD,CA9BD;;AAgCA,eAAeJ,uBAAf","sourcesContent":["import { useState, useRef } from 'react';\nimport debounce from 'lodash/debounce';\n\nimport { searchUsers } from '../services/userService';\n\n/**\n * A memoized debounced hook to search for users with a given offset\n * @function useSearchUsersDebounced\n * @returns {object} Search function and search result\n */\nconst useSearchUsersDebounced = () => {\n  const [result, setResult] = useState([]);\n  const [fetching, setFetching] = useState(false);\n\n  const handleSearch = async (string, offset) => {\n    if (!string) {\n      setFetching(false);\n      return setResult([]);\n    }\n\n    try {\n      const response = await searchUsers(string, offset);\n      setResult(response ? response : []);\n      setFetching(false);\n    } catch (err) {\n      setFetching(false);\n      throw new Error(err);\n    }\n  };\n  const handleSearchDebounced = debounce(handleSearch, 500);\n  const handleSearchDebouncedRef = useRef((string, offset) =>\n    handleSearchDebounced(string, offset)\n  ).current;\n  return {\n    handleSearchDebouncedRef,\n    result,\n    setResult,\n    fetching,\n    setFetching,\n  };\n};\n\nexport default useSearchUsersDebounced;\n"]},"metadata":{},"sourceType":"module"}