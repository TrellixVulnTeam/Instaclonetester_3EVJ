{"ast":null,"code":"var _jsxFileName = \"/Users/jidesh/Documents/instaclone/client/src/components/NewPost/NewPostForm/NewPostForm.js\";\nimport React, { useState, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { useHistory } from 'react-router-dom';\nimport { selectToken, selectCurrentUser } from '../../../redux/user/userSelectors';\nimport { showAlert } from '../../../redux/alert/alertActions';\nimport { addPost } from '../../../redux/feed/feedActions';\nimport { createPost } from '../../../services/postService';\nimport Avatar from '../../Avatar/Avatar';\nimport MobileHeader from '../../Header/MobileHeader/MobileHeader';\nimport Icon from '../../Icon/Icon';\nimport TextButton from '../../Button/TextButton/TextButton';\nimport Loader from '../../Loader/Loader';\n\nconst NewPostForm = ({\n  token,\n  file,\n  previewImage,\n  currentUser,\n  hide,\n  back,\n  showAlert,\n  addPost\n}) => {\n  const [caption, setCaption] = useState('');\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  const handleClick = async event => {\n    event.preventDefault();\n    const formData = new FormData();\n    formData.append('image', file);\n    formData.set('caption', caption);\n    formData.set('crop', JSON.stringify(previewImage.crop));\n    previewImage.filterName && formData.set('filter', previewImage.filterName);\n\n    try {\n      setLoading(true);\n      const post = await createPost(formData, token);\n      setLoading(false);\n      hide();\n\n      if (history.location.pathname === '/') {\n        addPost(post);\n      } else {\n        history.push('/');\n      }\n    } catch (err) {\n      setLoading(false);\n      showAlert(err.message || 'Could not share post.', () => handleClick(event));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, loading && /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(MobileHeader, {\n    show: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: \"chevron-back\",\n    onClick: () => back(),\n    style: {\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"heading-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, \"New Post\"), /*#__PURE__*/React.createElement(TextButton, {\n    bold: true,\n    blue: true,\n    style: {\n      fontSize: '1.5rem'\n    },\n    onClick: event => handleClick(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, \"Share\")), /*#__PURE__*/React.createElement(\"form\", {\n    style: file && {\n      display: 'block'\n    },\n    className: \"new-post__form post-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-form__input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-form__avatar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    size: \"3rem\",\n    className: \"avatar--small\",\n    imageSrc: currentUser.avatar ? currentUser.avatar : require('../../../assets/img/default-avatar.png'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"textarea\", {\n    className: \"post-form__textarea\",\n    placeholder: \"Write a caption...\",\n    onChange: event => setCaption(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-form__preview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: previewImage.src,\n    alt: \"Preview\",\n    style: {\n      filter: previewImage.filter\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }\n  }))))));\n};\n\nconst mapStateToProps = createStructuredSelector({\n  token: selectToken,\n  currentUser: selectCurrentUser\n});\n\nconst mapDispatchToProps = dispatch => ({\n  showAlert: (text, onClick) => dispatch(showAlert(text, onClick)),\n  addPost: post => dispatch(addPost(post))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewPostForm);","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/components/NewPost/NewPostForm/NewPostForm.js"],"names":["React","useState","Fragment","connect","createStructuredSelector","useHistory","selectToken","selectCurrentUser","showAlert","addPost","createPost","Avatar","MobileHeader","Icon","TextButton","Loader","NewPostForm","token","file","previewImage","currentUser","hide","back","caption","setCaption","loading","setLoading","history","handleClick","event","preventDefault","formData","FormData","append","set","JSON","stringify","crop","filterName","post","location","pathname","push","err","message","cursor","fontSize","display","avatar","require","target","value","src","filter","mapStateToProps","mapDispatchToProps","dispatch","text","onClick"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,SACEC,WADF,EAEEC,iBAFF,QAGO,mCAHP;AAIA,SAASC,SAAT,QAA0B,mCAA1B;AACA,SAASC,OAAT,QAAwB,iCAAxB;AAEA,SAASC,UAAT,QAA2B,+BAA3B;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AACnBC,EAAAA,KADmB;AAEnBC,EAAAA,IAFmB;AAGnBC,EAAAA,YAHmB;AAInBC,EAAAA,WAJmB;AAKnBC,EAAAA,IALmB;AAMnBC,EAAAA,IANmB;AAOnBd,EAAAA,SAPmB;AAQnBC,EAAAA;AARmB,CAAD,KASd;AACJ,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBvB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACwB,OAAD,EAAUC,UAAV,IAAwBzB,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAM0B,OAAO,GAAGtB,UAAU,EAA1B;;AAEA,QAAMuB,WAAW,GAAG,MAAOC,KAAP,IAAiB;AACnCA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBf,IAAzB;AACAa,IAAAA,QAAQ,CAACG,GAAT,CAAa,SAAb,EAAwBX,OAAxB;AACAQ,IAAAA,QAAQ,CAACG,GAAT,CAAa,MAAb,EAAqBC,IAAI,CAACC,SAAL,CAAejB,YAAY,CAACkB,IAA5B,CAArB;AACAlB,IAAAA,YAAY,CAACmB,UAAb,IAA2BP,QAAQ,CAACG,GAAT,CAAa,QAAb,EAAuBf,YAAY,CAACmB,UAApC,CAA3B;;AACA,QAAI;AACFZ,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMa,IAAI,GAAG,MAAM7B,UAAU,CAACqB,QAAD,EAAWd,KAAX,CAA7B;AACAS,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAL,MAAAA,IAAI;;AACJ,UAAIM,OAAO,CAACa,QAAR,CAAiBC,QAAjB,KAA8B,GAAlC,EAAuC;AACrChC,QAAAA,OAAO,CAAC8B,IAAD,CAAP;AACD,OAFD,MAEO;AACLZ,QAAAA,OAAO,CAACe,IAAR,CAAa,GAAb;AACD;AACF,KAVD,CAUE,OAAOC,GAAP,EAAY;AACZjB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAlB,MAAAA,SAAS,CAACmC,GAAG,CAACC,OAAJ,IAAe,uBAAhB,EAAyC,MAChDhB,WAAW,CAACC,KAAD,CADJ,CAAT;AAGD;AACF,GAvBD;;AAyBA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,OAAO,iBAAI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADd,eAEE,oBAAC,YAAD;AAAc,IAAA,IAAI,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,IAAI,EAAC,cADP;AAEE,IAAA,OAAO,EAAE,MAAMH,IAAI,EAFrB;AAGE,IAAA,KAAK,EAAE;AAAEuB,MAAAA,MAAM,EAAE;AAAV,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAME;AAAI,IAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF,eAOE,oBAAC,UAAD;AACE,IAAA,IAAI,MADN;AAEE,IAAA,IAAI,MAFN;AAGE,IAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAHT;AAIE,IAAA,OAAO,EAAGjB,KAAD,IAAWD,WAAW,CAACC,KAAD,CAJjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAPF,CAFF,eAkBE;AACE,IAAA,KAAK,EAAEX,IAAI,IAAI;AAAE6B,MAAAA,OAAO,EAAE;AAAX,KADjB;AAEE,IAAA,SAAS,EAAC,0BAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,SAAS,EAAC,eAFZ;AAGE,IAAA,QAAQ,EACN3B,WAAW,CAAC4B,MAAZ,GACI5B,WAAW,CAAC4B,MADhB,GAEIC,OAAO,CAAC,wCAAD,CANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAYE;AACE,IAAA,SAAS,EAAC,qBADZ;AAEE,IAAA,WAAW,EAAC,oBAFd;AAGE,IAAA,QAAQ,EAAGpB,KAAD,IAAWL,UAAU,CAACK,KAAK,CAACqB,MAAN,CAAaC,KAAd,CAHjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,eAiBE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,GAAG,EAAEhC,YAAY,CAACiC,GADpB;AAEE,IAAA,GAAG,EAAC,SAFN;AAGE,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAElC,YAAY,CAACkC;AAAvB,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAjBF,CADF,CAJF,CAlBF,CADF;AAqDD,CA7FD;;AA+FA,MAAMC,eAAe,GAAGlD,wBAAwB,CAAC;AAC/Ca,EAAAA,KAAK,EAAEX,WADwC;AAE/Cc,EAAAA,WAAW,EAAEb;AAFkC,CAAD,CAAhD;;AAKA,MAAMgD,kBAAkB,GAAIC,QAAD,KAAe;AACxChD,EAAAA,SAAS,EAAE,CAACiD,IAAD,EAAOC,OAAP,KAAmBF,QAAQ,CAAChD,SAAS,CAACiD,IAAD,EAAOC,OAAP,CAAV,CADE;AAExCjD,EAAAA,OAAO,EAAG8B,IAAD,IAAUiB,QAAQ,CAAC/C,OAAO,CAAC8B,IAAD,CAAR;AAFa,CAAf,CAA3B;;AAKA,eAAepC,OAAO,CAACmD,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CvC,WAA7C,CAAf","sourcesContent":["import React, { useState, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { useHistory } from 'react-router-dom';\n\nimport {\n  selectToken,\n  selectCurrentUser,\n} from '../../../redux/user/userSelectors';\nimport { showAlert } from '../../../redux/alert/alertActions';\nimport { addPost } from '../../../redux/feed/feedActions';\n\nimport { createPost } from '../../../services/postService';\n\nimport Avatar from '../../Avatar/Avatar';\nimport MobileHeader from '../../Header/MobileHeader/MobileHeader';\nimport Icon from '../../Icon/Icon';\nimport TextButton from '../../Button/TextButton/TextButton';\nimport Loader from '../../Loader/Loader';\n\nconst NewPostForm = ({\n  token,\n  file,\n  previewImage,\n  currentUser,\n  hide,\n  back,\n  showAlert,\n  addPost,\n}) => {\n  const [caption, setCaption] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n\n  const handleClick = async (event) => {\n    event.preventDefault();\n    const formData = new FormData();\n    formData.append('image', file);\n    formData.set('caption', caption);\n    formData.set('crop', JSON.stringify(previewImage.crop));\n    previewImage.filterName && formData.set('filter', previewImage.filterName);\n    try {\n      setLoading(true);\n      const post = await createPost(formData, token);\n      setLoading(false);\n      hide();\n      if (history.location.pathname === '/') {\n        addPost(post);\n      } else {\n        history.push('/');\n      }\n    } catch (err) {\n      setLoading(false);\n      showAlert(err.message || 'Could not share post.', () =>\n        handleClick(event)\n      );\n    }\n  };\n\n  return (\n    <Fragment>\n      {loading && <Loader />}\n      <MobileHeader show>\n        <Icon\n          icon=\"chevron-back\"\n          onClick={() => back()}\n          style={{ cursor: 'pointer' }}\n        />\n        <h3 className=\"heading-3\">New Post</h3>\n        <TextButton\n          bold\n          blue\n          style={{ fontSize: '1.5rem' }}\n          onClick={(event) => handleClick(event)}\n        >\n          Share\n        </TextButton>\n      </MobileHeader>\n      <form\n        style={file && { display: 'block' }}\n        className=\"new-post__form post-form\"\n      >\n        <Fragment>\n          <div className=\"post-form__input\">\n            <div className=\"post-form__avatar\">\n              <Avatar\n                size=\"3rem\"\n                className=\"avatar--small\"\n                imageSrc={\n                  currentUser.avatar\n                    ? currentUser.avatar\n                    : require('../../../assets/img/default-avatar.png')\n                }\n              />\n            </div>\n            <textarea\n              className=\"post-form__textarea\"\n              placeholder=\"Write a caption...\"\n              onChange={(event) => setCaption(event.target.value)}\n            />\n            <div className=\"post-form__preview\">\n              <img\n                src={previewImage.src}\n                alt=\"Preview\"\n                style={{ filter: previewImage.filter }}\n              />\n            </div>\n          </div>\n        </Fragment>\n      </form>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  token: selectToken,\n  currentUser: selectCurrentUser,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  showAlert: (text, onClick) => dispatch(showAlert(text, onClick)),\n  addPost: (post) => dispatch(addPost(post)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewPostForm);\n"]},"metadata":{},"sourceType":"module"}