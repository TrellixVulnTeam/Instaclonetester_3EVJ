{"ast":null,"code":"var _jsxFileName = \"/Users/jidesh/Documents/instaclone/client/src/components/SuggestedPosts/SuggestedPosts.js\";\nimport React, { Fragment, useState, useEffect, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport useScrollPositionThrottled from '../../hooks/useScrollPositionThrottled';\nimport { getSuggestedPosts } from '../../services/postService';\nimport MobileHeader from '../../components/Header/MobileHeader/MobileHeader';\nimport SearchBox from '../../components/SearchBox/SearchBox';\nimport TextButton from '../../components/Button/TextButton/TextButton';\nimport UserCard from '../../components/UserCard/UserCard';\nimport PreviewImage from '../../components/PreviewImage/PreviewImage';\nimport SkeletonLoader from '../../components/SkeletonLoader/SkeletonLoader';\nimport ImageGrid from '../../components/ImageGrid/ImageGrid';\n\nconst SuggestedPosts = ({\n  token,\n  showModal,\n  showAlert\n}) => {\n  const history = useHistory();\n  const [result, setResult] = useState([]);\n  const [search, setSearch] = useState(false);\n  const [posts, setPosts] = useState({\n    posts: null,\n    fetching: false,\n    hasMore: false\n  });\n\n  const handleClick = (postId, avatar) => {\n    if (window.outerWidth <= 600) {\n      history.push(`/post/${postId}`);\n    } else {\n      showModal({\n        postId,\n        avatar\n      }, 'PostDialog/PostDialog');\n    }\n  };\n\n  const retrievePosts = async offset => {\n    try {\n      setPosts(previous => ({ ...previous,\n        fetching: true\n      }));\n      const response = await getSuggestedPosts(token, offset);\n      setPosts(previous => ({\n        posts: previous.posts ? [...previous.posts, ...response] : response,\n        fetching: false,\n        hasMore: response.length === 20\n      }));\n    } catch (err) {\n      showAlert(err.message);\n    }\n  };\n\n  const retrievePostsRef = useRef(retrievePosts);\n  useEffect(() => {\n    retrievePostsRef.current();\n  }, [retrievePostsRef]);\n  useScrollPositionThrottled(({\n    atBottom\n  }) => {\n    if (atBottom && posts.hasMore && !posts.fetching) {\n      retrievePosts(posts.posts.length);\n    }\n  }, null, [posts]);\n\n  const renderSkeleton = amount => {\n    const skeleton = [];\n\n    for (let i = 0; i < amount; i++) {\n      skeleton.push( /*#__PURE__*/React.createElement(SkeletonLoader, {\n        key: i,\n        style: {\n          minHeight: '30rem'\n        },\n        animated: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    return skeleton;\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MobileHeader, {\n    style: search && {\n      gridTemplateColumns: 'repeat(2, 1fr) min-content',\n      gridColumnGap: '2rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SearchBox, {\n    style: {\n      gridColumn: `${search ? '1 / span 2' : '1 / -1'}`\n    },\n    setResult: setResult,\n    onClick: () => setSearch(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }), search && /*#__PURE__*/React.createElement(TextButton, {\n    onClick: () => setSearch(false),\n    bold: true,\n    large: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, \"Cancel\")), search ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"explore-users\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, result.map(user => /*#__PURE__*/React.createElement(UserCard, {\n    avatar: user.avatar,\n    username: user.username,\n    subText: user.fullName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }))) : /*#__PURE__*/React.createElement(ImageGrid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, posts.posts && posts.posts.map((post, idx) => /*#__PURE__*/React.createElement(PreviewImage, {\n    key: idx,\n    image: post.thumbnail,\n    likes: post.postVotes,\n    comments: post.comments,\n    filter: post.filter,\n    onClick: () => handleClick(post._id, post.avatar),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  })), posts.fetching && renderSkeleton(10)));\n};\n\nexport default SuggestedPosts;","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/components/SuggestedPosts/SuggestedPosts.js"],"names":["React","Fragment","useState","useEffect","useRef","useHistory","useScrollPositionThrottled","getSuggestedPosts","MobileHeader","SearchBox","TextButton","UserCard","PreviewImage","SkeletonLoader","ImageGrid","SuggestedPosts","token","showModal","showAlert","history","result","setResult","search","setSearch","posts","setPosts","fetching","hasMore","handleClick","postId","avatar","window","outerWidth","push","retrievePosts","offset","previous","response","length","err","message","retrievePostsRef","current","atBottom","renderSkeleton","amount","skeleton","i","minHeight","gridTemplateColumns","gridColumnGap","gridColumn","map","user","username","fullName","post","idx","thumbnail","postVotes","comments","filter","_id"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport useScrollPositionThrottled from '../../hooks/useScrollPositionThrottled';\nimport { getSuggestedPosts } from '../../services/postService';\n\nimport MobileHeader from '../../components/Header/MobileHeader/MobileHeader';\nimport SearchBox from '../../components/SearchBox/SearchBox';\nimport TextButton from '../../components/Button/TextButton/TextButton';\nimport UserCard from '../../components/UserCard/UserCard';\nimport PreviewImage from '../../components/PreviewImage/PreviewImage';\nimport SkeletonLoader from '../../components/SkeletonLoader/SkeletonLoader';\nimport ImageGrid from '../../components/ImageGrid/ImageGrid';\n\nconst SuggestedPosts = ({ token, showModal, showAlert }) => {\n  const history = useHistory();\n  const [result, setResult] = useState([]);\n  const [search, setSearch] = useState(false);\n  const [posts, setPosts] = useState({\n    posts: null,\n    fetching: false,\n    hasMore: false,\n  });\n\n  const handleClick = (postId, avatar) => {\n    if (window.outerWidth <= 600) {\n      history.push(`/post/${postId}`);\n    } else {\n      showModal(\n        {\n          postId,\n          avatar,\n        },\n        'PostDialog/PostDialog'\n      );\n    }\n  };\n\n  const retrievePosts = async (offset) => {\n    try {\n      setPosts((previous) => ({ ...previous, fetching: true }));\n      const response = await getSuggestedPosts(token, offset);\n      setPosts((previous) => ({\n        posts: previous.posts ? [...previous.posts, ...response] : response,\n        fetching: false,\n        hasMore: response.length === 20,\n      }));\n    } catch (err) {\n      showAlert(err.message);\n    }\n  };\n\n  const retrievePostsRef = useRef(retrievePosts);\n\n  useEffect(() => {\n    retrievePostsRef.current();\n  }, [retrievePostsRef]);\n\n  useScrollPositionThrottled(\n    ({ atBottom }) => {\n      if (atBottom && posts.hasMore && !posts.fetching) {\n        retrievePosts(posts.posts.length);\n      }\n    },\n    null,\n    [posts]\n  );\n\n  const renderSkeleton = (amount) => {\n    const skeleton = [];\n    for (let i = 0; i < amount; i++) {\n      skeleton.push(\n        <SkeletonLoader key={i} style={{ minHeight: '30rem' }} animated />\n      );\n    }\n    return skeleton;\n  };\n\n  return (\n    <Fragment>\n      <MobileHeader\n        style={\n          search && {\n            gridTemplateColumns: 'repeat(2, 1fr) min-content',\n            gridColumnGap: '2rem',\n          }\n        }\n      >\n        <SearchBox\n          style={{ gridColumn: `${search ? '1 / span 2' : '1 / -1'}` }}\n          setResult={setResult}\n          onClick={() => setSearch(true)}\n        />\n        {search && (\n          <TextButton onClick={() => setSearch(false)} bold large>\n            Cancel\n          </TextButton>\n        )}\n      </MobileHeader>\n      {search ? (\n        <div className=\"explore-users\">\n          {result.map((user) => (\n            <UserCard\n              avatar={user.avatar}\n              username={user.username}\n              subText={user.fullName}\n            />\n          ))}\n        </div>\n      ) : (\n        <ImageGrid>\n          {posts.posts &&\n            posts.posts.map((post, idx) => (\n              <PreviewImage\n                key={idx}\n                image={post.thumbnail}\n                likes={post.postVotes}\n                comments={post.comments}\n                filter={post.filter}\n                onClick={() => handleClick(post._id, post.avatar)}\n              />\n            ))}\n          {posts.fetching && renderSkeleton(10)}\n        </ImageGrid>\n      )}\n    </Fragment>\n  );\n};\n\nexport default SuggestedPosts;\n"]},"metadata":{},"sourceType":"module"}