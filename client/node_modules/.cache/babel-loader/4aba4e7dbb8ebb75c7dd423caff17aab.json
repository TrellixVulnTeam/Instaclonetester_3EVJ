{"ast":null,"code":"import checkPropTypes from 'check-prop-types';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from '../../redux/rootReducer';\nimport { middlewares } from '../../redux/store';\n/**\n * Create a testing store with imported reducers, middleware,and initial state\n *  globals: rootReducer, middlewares.\n * @function storeFactory\n * @param {object} initialState Initial state for the store.\n * @returns {store} Redux store\n */\n\nexport const storeFactory = initialState => {\n  return createStore(rootReducer, initialState, applyMiddleware(...middlewares));\n};\n/**\n * Function to find a component by it's data-test attribute\n * @function findByTestAttribute\n * @param {ShallowWarapper} wrapper Wrapper to serach\n * @param {string} attributeName Attribute to find\n * @returns {JSX.Element}\n */\n\nexport const findByTestAttribute = (wrapper, attributeName) => {\n  const component = wrapper.find(`[data-test='${attributeName}']`);\n  return component;\n};\n/**\n * Function to check props on a react component\n * @function checkProps\n * @param {React.Component} Component Component to assert on.\n * @param {object} expectedProps Expected props.\n * @returns {undefined | Error}\n */\n\n/* eslint react/forbid-foreign-prop-types: 0 */\n\nexport const checkProps = (Component, expectedProps) => {\n  const result = checkPropTypes(Component.propTypes, expectedProps, 'prop', Component.name);\n  return result;\n};","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/utils/test/testUtils.js"],"names":["checkPropTypes","createStore","applyMiddleware","rootReducer","middlewares","storeFactory","initialState","findByTestAttribute","wrapper","attributeName","component","find","checkProps","Component","expectedProps","result","propTypes","name"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AAEA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,SAASC,WAAT,QAA4B,mBAA5B;AAEA;;;;;;;;AAOA,OAAO,MAAMC,YAAY,GAAGC,YAAY,IAAI;AAC1C,SAAOL,WAAW,CAChBE,WADgB,EAEhBG,YAFgB,EAGhBJ,eAAe,CAAC,GAAGE,WAAJ,CAHC,CAAlB;AAKD,CANM;AAQP;;;;;;;;AAOA,OAAO,MAAMG,mBAAmB,GAAG,CAACC,OAAD,EAAUC,aAAV,KAA4B;AAC7D,QAAMC,SAAS,GAAGF,OAAO,CAACG,IAAR,CAAc,eAAcF,aAAc,IAA1C,CAAlB;AACA,SAAOC,SAAP;AACD,CAHM;AAKP;;;;;;;;AAOA;;AACA,OAAO,MAAME,UAAU,GAAG,CAACC,SAAD,EAAYC,aAAZ,KAA8B;AACtD,QAAMC,MAAM,GAAGf,cAAc,CAC3Ba,SAAS,CAACG,SADiB,EAE3BF,aAF2B,EAG3B,MAH2B,EAI3BD,SAAS,CAACI,IAJiB,CAA7B;AAOA,SAAOF,MAAP;AACD,CATM","sourcesContent":["import checkPropTypes from 'check-prop-types';\nimport { createStore, applyMiddleware } from 'redux';\n\nimport rootReducer from '../../redux/rootReducer';\nimport { middlewares } from '../../redux/store';\n\n/**\n * Create a testing store with imported reducers, middleware,and initial state\n *  globals: rootReducer, middlewares.\n * @function storeFactory\n * @param {object} initialState Initial state for the store.\n * @returns {store} Redux store\n */\nexport const storeFactory = initialState => {\n  return createStore(\n    rootReducer,\n    initialState,\n    applyMiddleware(...middlewares)\n  );\n};\n\n/**\n * Function to find a component by it's data-test attribute\n * @function findByTestAttribute\n * @param {ShallowWarapper} wrapper Wrapper to serach\n * @param {string} attributeName Attribute to find\n * @returns {JSX.Element}\n */\nexport const findByTestAttribute = (wrapper, attributeName) => {\n  const component = wrapper.find(`[data-test='${attributeName}']`);\n  return component;\n};\n\n/**\n * Function to check props on a react component\n * @function checkProps\n * @param {React.Component} Component Component to assert on.\n * @param {object} expectedProps Expected props.\n * @returns {undefined | Error}\n */\n/* eslint react/forbid-foreign-prop-types: 0 */\nexport const checkProps = (Component, expectedProps) => {\n  const result = checkPropTypes(\n    Component.propTypes,\n    expectedProps,\n    'prop',\n    Component.name\n  );\n\n  return result;\n};\n"]},"metadata":{},"sourceType":"module"}