{"ast":null,"code":"import axios from 'axios';\n/**\n * Logs a user in with the provided credentials\n * @function login\n * @param {string} usernameOrEmail The username or email to login with\n * @param {string} password A password to log in with\n * @param {string} authToken A token to be used instead of a username/email or password\n * @returns {object} The user object\n */\n\nexport const login = async (usernameOrEmail, password, authToken) => {\n  try {\n    const request = usernameOrEmail && password ? {\n      data: {\n        usernameOrEmail,\n        password\n      }\n    } : {\n      headers: {\n        authorization: authToken\n      }\n    };\n    const response = await axios('/api/auth/login', {\n      method: 'POST',\n      ...request\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n/**\n * Logs the user in or signs them up with their github account\n * @function githubLogin\n * @param {number} code Code provided by github to exchange for an access code\n * @returns {object} User object\n */\n\nexport const githubAuthentication = async code => {\n  try {\n    const response = await axios.post('/api/auth/login/github', {\n      code,\n      state: sessionStorage.getItem('authState')\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n/**\n * Registers a user with the provided credentials\n * @param {string} email A user's email address\n * @param {string} fullName A user's full name\n * @param {string} username A user's username\n * @param {string} password A user's password\n * @returns {object} The user object\n */\n\nexport const registerUser = async (email, fullName, username, password) => {\n  try {\n    const response = await axios.post('/api/auth/register', {\n      email,\n      fullName,\n      username,\n      password\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n/**\n * Changes a users password\n * @function changePassword\n * @param {string} oldPassword The user's current password\n * @param {string} newPassword The new password\n * @param {string} authToken A user's auth token\n */\n\nexport const changePassword = async (oldPassword, newPassword, authToken) => {\n  try {\n    await axios.put('/api/auth/password', {\n      oldPassword,\n      newPassword\n    }, {\n      headers: {\n        authorization: authToken\n      }\n    });\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/services/authenticationServices.js"],"names":["axios","login","usernameOrEmail","password","authToken","request","data","headers","authorization","response","method","err","Error","error","githubAuthentication","code","post","state","sessionStorage","getItem","registerUser","email","fullName","username","changePassword","oldPassword","newPassword","put"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;;;;;;;;;AAQA,OAAO,MAAMC,KAAK,GAAG,OAAOC,eAAP,EAAwBC,QAAxB,EAAkCC,SAAlC,KAAgD;AACnE,MAAI;AACF,UAAMC,OAAO,GACXH,eAAe,IAAIC,QAAnB,GACI;AAAEG,MAAAA,IAAI,EAAE;AAAEJ,QAAAA,eAAF;AAAmBC,QAAAA;AAAnB;AAAR,KADJ,GAEI;AAAEI,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAEJ;AAAjB;AAAX,KAHN;AAIA,UAAMK,QAAQ,GAAG,MAAMT,KAAK,CAAC,iBAAD,EAAoB;AAC9CU,MAAAA,MAAM,EAAE,MADsC;AAE9C,SAAGL;AAF2C,KAApB,CAA5B;AAIA,WAAOI,QAAQ,CAACH,IAAhB;AACD,GAVD,CAUE,OAAOK,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,CAAUD,GAAG,CAACF,QAAJ,CAAaH,IAAb,CAAkBO,KAA5B,CAAN;AACD;AACF,CAdM;AAgBP;;;;;;;AAMA,OAAO,MAAMC,oBAAoB,GAAG,MAAOC,IAAP,IAAgB;AAClD,MAAI;AACF,UAAMN,QAAQ,GAAG,MAAMT,KAAK,CAACgB,IAAN,CAAW,wBAAX,EAAqC;AAC1DD,MAAAA,IAD0D;AAE1DE,MAAAA,KAAK,EAAEC,cAAc,CAACC,OAAf,CAAuB,WAAvB;AAFmD,KAArC,CAAvB;AAIA,WAAOV,QAAQ,CAACH,IAAhB;AACD,GAND,CAME,OAAOK,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,CAAUD,GAAG,CAACF,QAAJ,CAAaH,IAAb,CAAkBO,KAA5B,CAAN;AACD;AACF,CAVM;AAYP;;;;;;;;;AAQA,OAAO,MAAMO,YAAY,GAAG,OAAOC,KAAP,EAAcC,QAAd,EAAwBC,QAAxB,EAAkCpB,QAAlC,KAA+C;AACzE,MAAI;AACF,UAAMM,QAAQ,GAAG,MAAMT,KAAK,CAACgB,IAAN,CAAW,oBAAX,EAAiC;AACtDK,MAAAA,KADsD;AAEtDC,MAAAA,QAFsD;AAGtDC,MAAAA,QAHsD;AAItDpB,MAAAA;AAJsD,KAAjC,CAAvB;AAMA,WAAOM,QAAQ,CAACH,IAAhB;AACD,GARD,CAQE,OAAOK,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,CAAUD,GAAG,CAACF,QAAJ,CAAaH,IAAb,CAAkBO,KAA5B,CAAN;AACD;AACF,CAZM;AAcP;;;;;;;;AAOA,OAAO,MAAMW,cAAc,GAAG,OAAOC,WAAP,EAAoBC,WAApB,EAAiCtB,SAAjC,KAA+C;AAC3E,MAAI;AACF,UAAMJ,KAAK,CAAC2B,GAAN,CACJ,oBADI,EAEJ;AACEF,MAAAA,WADF;AAEEC,MAAAA;AAFF,KAFI,EAMJ;AACEnB,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAEJ;AADR;AADX,KANI,CAAN;AAYD,GAbD,CAaE,OAAOO,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,CAAUD,GAAG,CAACF,QAAJ,CAAaH,IAAb,CAAkBO,KAA5B,CAAN;AACD;AACF,CAjBM","sourcesContent":["import axios from 'axios';\n\n/**\n * Logs a user in with the provided credentials\n * @function login\n * @param {string} usernameOrEmail The username or email to login with\n * @param {string} password A password to log in with\n * @param {string} authToken A token to be used instead of a username/email or password\n * @returns {object} The user object\n */\nexport const login = async (usernameOrEmail, password, authToken) => {\n  try {\n    const request =\n      usernameOrEmail && password\n        ? { data: { usernameOrEmail, password } }\n        : { headers: { authorization: authToken } };\n    const response = await axios('/api/auth/login', {\n      method: 'POST',\n      ...request,\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n\n/**\n * Logs the user in or signs them up with their github account\n * @function githubLogin\n * @param {number} code Code provided by github to exchange for an access code\n * @returns {object} User object\n */\nexport const githubAuthentication = async (code) => {\n  try {\n    const response = await axios.post('/api/auth/login/github', {\n      code,\n      state: sessionStorage.getItem('authState'),\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n\n/**\n * Registers a user with the provided credentials\n * @param {string} email A user's email address\n * @param {string} fullName A user's full name\n * @param {string} username A user's username\n * @param {string} password A user's password\n * @returns {object} The user object\n */\nexport const registerUser = async (email, fullName, username, password) => {\n  try {\n    const response = await axios.post('/api/auth/register', {\n      email,\n      fullName,\n      username,\n      password,\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n\n/**\n * Changes a users password\n * @function changePassword\n * @param {string} oldPassword The user's current password\n * @param {string} newPassword The new password\n * @param {string} authToken A user's auth token\n */\nexport const changePassword = async (oldPassword, newPassword, authToken) => {\n  try {\n    await axios.put(\n      '/api/auth/password',\n      {\n        oldPassword,\n        newPassword,\n      },\n      {\n        headers: {\n          authorization: authToken,\n        },\n      }\n    );\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}