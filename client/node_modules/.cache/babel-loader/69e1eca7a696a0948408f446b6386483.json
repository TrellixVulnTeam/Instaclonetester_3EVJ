{"ast":null,"code":"import axios from 'axios';\n/**\n * Fetches a complete post with comments and the fully\n * sized image instead of a thumbnail image\n * @function getPost\n * @param {string} postId Id of the post to fetch\n * @returns {object} The post requested\n */\n\nexport const getPost = async postId => {\n  try {\n    const response = await axios.get(`/api/post/${postId}`);\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n/**\n *\n * @param {string} username A users username\n * @param {number} offset The amount of posts to skip\n */\n\nexport const getPosts = async (username, offset = 0) => {\n  try {\n    const response = await axios.get(`/api/user/${username}/posts/${offset}`);\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n/**\n * Either likes or dislikes a post\n * @function votePost\n * @param {string} postId The id of the post to be voted on\n * @param {*} authToken The user's auth token\n */\n\nexport const votePost = async (postId, authToken) => {\n  try {\n    await axios.post(`/api/post/${postId}/vote`, null, {\n      headers: {\n        authorization: authToken\n      }\n    });\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n/**\n * Sends an image and a caption as multipart/form-data and creates a post\n * @function createPost\n * @param {object} formData Multipart form data about the image being uploaded\n * @param {string} authToken The user's auth token\n * @returns {object} The created post\n */\n\nexport const createPost = async (formData, authToken) => {\n  try {\n    const post = await axios.post('/api/post', formData, {\n      headers: {\n        authorization: authToken,\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return post.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n/**\n * Deletes a post\n * @function deletePost\n * @param {string} postId The id of the post to delete\n * @param {string} authToken A user's auth token\n */\n\nexport const deletePost = async (postId, authToken) => {\n  try {\n    await axios.delete(`/api/post/${postId}`, {\n      headers: {\n        authorization: authToken\n      }\n    });\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n/**\n * Toggles bookmarking a post\n * @param {string} postId The id of the post to bookmark\n * @param {string} authToken A user's auth token\n * @return {object}\n */\n\nexport const bookmarkPost = async (postId, authToken) => {\n  try {\n    const response = await axios.post(`/api/user/${postId}/bookmark`, null, {\n      headers: {\n        authorization: authToken\n      }\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n/**\n * Retrieves all filters\n * @function getPostFilters\n * @returns {array} Array of filters\n */\n\nexport const getPostFilters = async () => {\n  try {\n    const response = await axios.get('/api/post/filters');\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n/**\n * Gets suggested posts\n * @function getSuggestedPosts\n * @param {string} authToken A user's auth token\n * @param {number} offset The amounts of posts to skip\n * @returns {array} Array of posts\n */\n\nexport const getSuggestedPosts = async (authToken, offset = 0) => {\n  try {\n    const response = await axios.get('/api/post/suggested/' + offset, {\n      headers: {\n        authorization: authToken\n      }\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n/**\n * Gets posts associated with a specific hashtag\n * @function getHashtagPosts\n * @param {string} authToken A user's auth token\n * @param {string} hashtag The hashtag to find posts by\n * @param {number} offset The amount of posts to skip\n * @returns {array} Array of posts\n */\n\nexport const getHashtagPosts = async (authToken, hashtag, offset = 0) => {\n  try {\n    const response = await axios.get(`/api/post/hashtag/${hashtag}/${offset}`, {\n      headers: {\n        authorization: authToken\n      }\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/services/postService.js"],"names":["axios","getPost","postId","response","get","data","err","Error","error","getPosts","username","offset","votePost","authToken","post","headers","authorization","createPost","formData","deletePost","delete","bookmarkPost","getPostFilters","getSuggestedPosts","getHashtagPosts","hashtag"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\n/**\n * Fetches a complete post with comments and the fully\n * sized image instead of a thumbnail image\n * @function getPost\n * @param {string} postId Id of the post to fetch\n * @returns {object} The post requested\n */\nexport const getPost = async (postId) => {\n  try {\n    const response = await axios.get(`/api/post/${postId}`);\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n\n/**\n *\n * @param {string} username A users username\n * @param {number} offset The amount of posts to skip\n */\nexport const getPosts = async (username, offset = 0) => {\n  try {\n    const response = await axios.get(`/api/user/${username}/posts/${offset}`);\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n\n/**\n * Either likes or dislikes a post\n * @function votePost\n * @param {string} postId The id of the post to be voted on\n * @param {*} authToken The user's auth token\n */\nexport const votePost = async (postId, authToken) => {\n  try {\n    await axios.post(`/api/post/${postId}/vote`, null, {\n      headers: { authorization: authToken },\n    });\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n\n/**\n * Sends an image and a caption as multipart/form-data and creates a post\n * @function createPost\n * @param {object} formData Multipart form data about the image being uploaded\n * @param {string} authToken The user's auth token\n * @returns {object} The created post\n */\nexport const createPost = async (formData, authToken) => {\n  try {\n    const post = await axios.post('/api/post', formData, {\n      headers: {\n        authorization: authToken,\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return post.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n\n/**\n * Deletes a post\n * @function deletePost\n * @param {string} postId The id of the post to delete\n * @param {string} authToken A user's auth token\n */\nexport const deletePost = async (postId, authToken) => {\n  try {\n    await axios.delete(`/api/post/${postId}`, {\n      headers: {\n        authorization: authToken,\n      },\n    });\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n\n/**\n * Toggles bookmarking a post\n * @param {string} postId The id of the post to bookmark\n * @param {string} authToken A user's auth token\n * @return {object}\n */\nexport const bookmarkPost = async (postId, authToken) => {\n  try {\n    const response = await axios.post(`/api/user/${postId}/bookmark`, null, {\n      headers: { authorization: authToken },\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n\n/**\n * Retrieves all filters\n * @function getPostFilters\n * @returns {array} Array of filters\n */\nexport const getPostFilters = async () => {\n  try {\n    const response = await axios.get('/api/post/filters');\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n\n/**\n * Gets suggested posts\n * @function getSuggestedPosts\n * @param {string} authToken A user's auth token\n * @param {number} offset The amounts of posts to skip\n * @returns {array} Array of posts\n */\nexport const getSuggestedPosts = async (authToken, offset = 0) => {\n  try {\n    const response = await axios.get('/api/post/suggested/' + offset, {\n      headers: {\n        authorization: authToken,\n      },\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n\n/**\n * Gets posts associated with a specific hashtag\n * @function getHashtagPosts\n * @param {string} authToken A user's auth token\n * @param {string} hashtag The hashtag to find posts by\n * @param {number} offset The amount of posts to skip\n * @returns {array} Array of posts\n */\nexport const getHashtagPosts = async (authToken, hashtag, offset = 0) => {\n  try {\n    const response = await axios.get(`/api/post/hashtag/${hashtag}/${offset}`, {\n      headers: {\n        authorization: authToken,\n      },\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}