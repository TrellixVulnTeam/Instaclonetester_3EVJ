{"ast":null,"code":"var _jsxFileName = \"/Users/jidesh/Documents/instaclone/client/src/components/EditProfileForm/EditProfileForm.js\";\nimport React, { useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { createStructuredSelector } from 'reselect';\nimport { selectCurrentUser, selectToken, selectUpdatingProfile } from '../../redux/user/userSelectors';\nimport { updateProfileStart } from '../../redux/user/userActions';\nimport { showAlert } from '../../redux/alert/alertActions';\nimport { validateEmail, validateFullName, validateUsername, validateBio, validateWebsite } from '../../utils/validation';\nimport Avatar from '../Avatar/Avatar';\nimport FormInput from '../FormInput/FormInput';\nimport FormTextarea from '../FormTextarea/FormTextarea';\nimport Button from '../Button/Button';\nimport SettingsForm from '../SettingsForm/SettingsForm';\nimport SettingsFormGroup from '../SettingsForm/SettingsFormGroup/SettingsFormGroup';\nimport ChangeAvatarButton from '../ChangeAvatarButton/ChangeAvatarButton';\n\nconst EditProfileForm = ({\n  currentUser,\n  showAlert,\n  token,\n  updateProfileStart,\n  updatingProfile\n}) => {\n  const validate = values => {\n    const errors = {};\n    const emailError = validateEmail(values.email);\n    if (emailError) errors.email = emailError;\n    const fullNameError = validateFullName(values.fullName);\n    if (fullNameError) errors.fullName = fullNameError;\n    const usernameError = validateUsername(values.username);\n    if (usernameError) errors.username = usernameError;\n    const bioError = validateBio(values.bio);\n    if (bioError) errors.bio = bioError;\n    const websiteError = validateWebsite(values.website);\n    if (websiteError) errors.website = websiteError;\n    return errors;\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      email: currentUser.email,\n      fullName: currentUser.fullName,\n      username: currentUser.username,\n      bio: currentUser.bio || '',\n      website: currentUser.website || ''\n    },\n    validate,\n    onSubmit: async values => {\n      await updateProfileStart(token, values);\n      showAlert('Profile saved.');\n    }\n  });\n  useEffect(() => {\n    document.title = 'Edit Profile â€¢ Instaclone';\n  }, []);\n  return /*#__PURE__*/React.createElement(SettingsForm, {\n    onSubmit: formik.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SettingsFormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ChangeAvatarButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    className: \"avatar--small\",\n    imageSrc: currentUser.avatar,\n    style: {\n      alignSelf: 'start'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      lineHeight: '2.2rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"heading-2 font-medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, formik.values.username), /*#__PURE__*/React.createElement(ChangeAvatarButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(SettingsFormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"heading-3 font-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"fullName\",\n    fieldProps: formik.getFieldProps('fullName'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(SettingsFormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"heading-3 font-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \"Username\"), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"username\",\n    fieldProps: formik.getFieldProps('username'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(SettingsFormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"heading-3 font-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, \"Website\"), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"website\",\n    fieldProps: formik.getFieldProps('website'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(SettingsFormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"heading-3 font-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, \"Bio\"), /*#__PURE__*/React.createElement(FormTextarea, {\n    name: \"bio\",\n    fieldProps: formik.getFieldProps('bio'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(SettingsFormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"heading-3 color-grey font-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, \"Personal Information\"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      fontSize: '1.3rem',\n      lineHeight: '1.6rem'\n    },\n    className: \"color-grey\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, \"Provide your personal information, even if the account is used for a business, a pet or something else. This won't be a part of your public profile.\"))), /*#__PURE__*/React.createElement(SettingsFormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"heading-3 font-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"email\",\n    fieldProps: formik.getFieldProps('email'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(SettingsFormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    style: {\n      width: '10rem'\n    },\n    disabled: Object.keys(formik.touched).length === 0,\n    loading: updatingProfile,\n    onClick: () => {\n      if (!formik.isValid) {\n        showAlert(Object.values(formik.errors)[0]);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, \"Submit\")));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  updateProfileStart: (authToken, updates) => dispatch(updateProfileStart(authToken, updates)),\n  showAlert: (text, onClick) => dispatch(showAlert(text, onClick))\n});\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n  token: selectToken,\n  updatingProfile: selectUpdatingProfile\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(EditProfileForm);","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/components/EditProfileForm/EditProfileForm.js"],"names":["React","useEffect","useRef","connect","useFormik","createStructuredSelector","selectCurrentUser","selectToken","selectUpdatingProfile","updateProfileStart","showAlert","validateEmail","validateFullName","validateUsername","validateBio","validateWebsite","Avatar","FormInput","FormTextarea","Button","SettingsForm","SettingsFormGroup","ChangeAvatarButton","EditProfileForm","currentUser","token","updatingProfile","validate","values","errors","emailError","email","fullNameError","fullName","usernameError","username","bioError","bio","websiteError","website","formik","initialValues","onSubmit","document","title","handleSubmit","avatar","alignSelf","lineHeight","getFieldProps","fontSize","width","Object","keys","touched","length","isValid","mapDispatchToProps","dispatch","authToken","updates","text","onClick","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { createStructuredSelector } from 'reselect';\n\nimport {\n  selectCurrentUser,\n  selectToken,\n  selectUpdatingProfile,\n} from '../../redux/user/userSelectors';\nimport { updateProfileStart } from '../../redux/user/userActions';\nimport { showAlert } from '../../redux/alert/alertActions';\n\nimport {\n  validateEmail,\n  validateFullName,\n  validateUsername,\n  validateBio,\n  validateWebsite,\n} from '../../utils/validation';\n\nimport Avatar from '../Avatar/Avatar';\nimport FormInput from '../FormInput/FormInput';\nimport FormTextarea from '../FormTextarea/FormTextarea';\nimport Button from '../Button/Button';\nimport SettingsForm from '../SettingsForm/SettingsForm';\nimport SettingsFormGroup from '../SettingsForm/SettingsFormGroup/SettingsFormGroup';\nimport ChangeAvatarButton from '../ChangeAvatarButton/ChangeAvatarButton';\n\nconst EditProfileForm = ({\n  currentUser,\n  showAlert,\n  token,\n  updateProfileStart,\n  updatingProfile,\n}) => {\n  const validate = (values) => {\n    const errors = {};\n    const emailError = validateEmail(values.email);\n    if (emailError) errors.email = emailError;\n\n    const fullNameError = validateFullName(values.fullName);\n    if (fullNameError) errors.fullName = fullNameError;\n\n    const usernameError = validateUsername(values.username);\n    if (usernameError) errors.username = usernameError;\n\n    const bioError = validateBio(values.bio);\n    if (bioError) errors.bio = bioError;\n\n    const websiteError = validateWebsite(values.website);\n    if (websiteError) errors.website = websiteError;\n\n    return errors;\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      email: currentUser.email,\n      fullName: currentUser.fullName,\n      username: currentUser.username,\n      bio: currentUser.bio || '',\n      website: currentUser.website || '',\n    },\n    validate,\n    onSubmit: async (values) => {\n      await updateProfileStart(token, values);\n      showAlert('Profile saved.');\n    },\n  });\n\n  useEffect(() => {\n    document.title = 'Edit Profile â€¢ Instaclone';\n  }, []);\n\n  return (\n    <SettingsForm onSubmit={formik.handleSubmit}>\n      <SettingsFormGroup>\n        <ChangeAvatarButton>\n          <Avatar\n            className=\"avatar--small\"\n            imageSrc={currentUser.avatar}\n            style={{ alignSelf: 'start' }}\n          />\n        </ChangeAvatarButton>\n        <div style={{ lineHeight: '2.2rem' }}>\n          <h3 className=\"heading-2 font-medium\">{formik.values.username}</h3>\n          <ChangeAvatarButton />\n        </div>\n      </SettingsFormGroup>\n      <SettingsFormGroup>\n        <label className=\"heading-3 font-bold\">Name</label>\n        <FormInput\n          name=\"fullName\"\n          fieldProps={formik.getFieldProps('fullName')}\n        />\n      </SettingsFormGroup>\n      <SettingsFormGroup>\n        <label className=\"heading-3 font-bold\">Username</label>\n        <FormInput\n          name=\"username\"\n          fieldProps={formik.getFieldProps('username')}\n        />\n      </SettingsFormGroup>\n      <SettingsFormGroup>\n        <label className=\"heading-3 font-bold\">Website</label>\n        <FormInput\n          name=\"website\"\n          fieldProps={formik.getFieldProps('website')}\n        />\n      </SettingsFormGroup>\n      <SettingsFormGroup>\n        <label className=\"heading-3 font-bold\">Bio</label>\n        <FormTextarea name=\"bio\" fieldProps={formik.getFieldProps('bio')} />\n      </SettingsFormGroup>\n      <SettingsFormGroup>\n        <label></label>\n        <div>\n          <h3 className=\"heading-3 color-grey font-bold\">\n            Personal Information\n          </h3>\n          <p\n            style={{ fontSize: '1.3rem', lineHeight: '1.6rem' }}\n            className=\"color-grey\"\n          >\n            Provide your personal information, even if the account is used for a\n            business, a pet or something else. This won't be a part of your\n            public profile.\n          </p>\n        </div>\n      </SettingsFormGroup>\n      <SettingsFormGroup>\n        <label className=\"heading-3 font-bold\">Email</label>\n        <FormInput name=\"email\" fieldProps={formik.getFieldProps('email')} />\n      </SettingsFormGroup>\n      <SettingsFormGroup>\n        <label></label>\n        <Button\n          style={{ width: '10rem' }}\n          disabled={Object.keys(formik.touched).length === 0}\n          loading={updatingProfile}\n          onClick={() => {\n            if (!formik.isValid) {\n              showAlert(Object.values(formik.errors)[0]);\n            }\n          }}\n        >\n          Submit\n        </Button>\n      </SettingsFormGroup>\n    </SettingsForm>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateProfileStart: (authToken, updates) =>\n    dispatch(updateProfileStart(authToken, updates)),\n  showAlert: (text, onClick) => dispatch(showAlert(text, onClick)),\n});\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n  token: selectToken,\n  updatingProfile: selectUpdatingProfile,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditProfileForm);\n"]},"metadata":{},"sourceType":"module"}