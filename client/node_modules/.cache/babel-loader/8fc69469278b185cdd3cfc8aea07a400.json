{"ast":null,"code":"var _jsxFileName = \"/Users/jidesh/Documents/instaclone/client/src/components/HashtagPosts/HashtagPosts.js\";\nimport React, { Fragment, useState, useEffect, useRef } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport useScrollPositionThrottled from '../../hooks/useScrollPositionThrottled';\nimport { getHashtagPosts } from '../../services/postService';\nimport MobileHeader from '../../components/Header/MobileHeader/MobileHeader';\nimport TextButton from '../../components/Button/TextButton/TextButton';\nimport PreviewImage from '../../components/PreviewImage/PreviewImage';\nimport SkeletonLoader from '../../components/SkeletonLoader/SkeletonLoader';\nimport ImageGrid from '../../components/ImageGrid/ImageGrid';\n\nconst HashtagPosts = ({\n  token,\n  showModal,\n  showAlert\n}) => {\n  const [posts, setPosts] = useState({\n    posts: [],\n    postCount: 0,\n    fetching: false,\n    hasMore: false\n  });\n  const {\n    hashtag\n  } = useParams();\n  const history = useHistory();\n\n  const handleClick = (postId, avatar) => {\n    if (window.outerWidth <= 600) {\n      history.push(`/post/${postId}`);\n    } else {\n      showModal({\n        postId,\n        avatar\n      }, 'PostDialog/PostDialog');\n    }\n  };\n\n  const retrievePosts = async offset => {\n    try {\n      setPosts(previous => ({ ...previous,\n        fetching: true\n      }));\n      const response = await getHashtagPosts(token, hashtag, offset);\n      response.posts ? setPosts(previous => ({\n        posts: previous.posts ? [...previous.posts, ...response.posts] : response.posts,\n        postCount: response.postCount,\n        fetching: false,\n        hasMore: response.length === 20\n      })) : setPosts(previous => ({ ...previous,\n        fetching: false\n      }));\n    } catch (err) {\n      showAlert(err.message);\n    }\n  };\n\n  const renderSkeleton = amount => {\n    const skeleton = [];\n\n    for (let i = 0; i < amount; i++) {\n      skeleton.push( /*#__PURE__*/React.createElement(SkeletonLoader, {\n        key: i,\n        style: {\n          minHeight: '30rem'\n        },\n        animated: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    return skeleton;\n  };\n\n  useScrollPositionThrottled(({\n    atBottom\n  }) => {\n    if (atBottom && posts.hasMore && !posts.fetching) {\n      retrievePosts(posts.posts.length);\n    }\n  }, null, [posts]);\n  const retrievePostsRef = useRef(retrievePosts);\n  useEffect(() => {\n    retrievePostsRef.current();\n  }, [retrievePostsRef]);\n  return !posts.fetching && posts.posts.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"hashtag-posts__empty\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"heading-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, \"Could not find any post associated with #\", hashtag, \".\")) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MobileHeader, {\n    backArrow: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextButton, {\n    style: {\n      justifySelf: 'center'\n    },\n    bold: true,\n    large: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"#\", hashtag)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"hashtag-posts__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"heading-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, \"#\", hashtag), /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"heading-3 font-medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, posts.postCount), ' ', posts.postCount === 1 ? 'post' : 'posts')), /*#__PURE__*/React.createElement(ImageGrid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, posts.posts && posts.posts.map((post, idx) => /*#__PURE__*/React.createElement(PreviewImage, {\n    key: idx,\n    image: post.thumbnail,\n    likes: post.postVotes,\n    comments: post.comments,\n    filter: post.filter,\n    onClick: () => handleClick(post._id, post.avatar),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  })), posts.fetching && renderSkeleton(10)));\n};\n\nexport default HashtagPosts;","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/components/HashtagPosts/HashtagPosts.js"],"names":["React","Fragment","useState","useEffect","useRef","useParams","useHistory","useScrollPositionThrottled","getHashtagPosts","MobileHeader","TextButton","PreviewImage","SkeletonLoader","ImageGrid","HashtagPosts","token","showModal","showAlert","posts","setPosts","postCount","fetching","hasMore","hashtag","history","handleClick","postId","avatar","window","outerWidth","push","retrievePosts","offset","previous","response","length","err","message","renderSkeleton","amount","skeleton","i","minHeight","atBottom","retrievePostsRef","current","justifySelf","map","post","idx","thumbnail","postVotes","comments","filter","_id"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect, useRef } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport useScrollPositionThrottled from '../../hooks/useScrollPositionThrottled';\nimport { getHashtagPosts } from '../../services/postService';\n\nimport MobileHeader from '../../components/Header/MobileHeader/MobileHeader';\nimport TextButton from '../../components/Button/TextButton/TextButton';\nimport PreviewImage from '../../components/PreviewImage/PreviewImage';\nimport SkeletonLoader from '../../components/SkeletonLoader/SkeletonLoader';\nimport ImageGrid from '../../components/ImageGrid/ImageGrid';\n\nconst HashtagPosts = ({ token, showModal, showAlert }) => {\n  const [posts, setPosts] = useState({\n    posts: [],\n    postCount: 0,\n    fetching: false,\n    hasMore: false,\n  });\n\n  const { hashtag } = useParams();\n  const history = useHistory();\n\n  const handleClick = (postId, avatar) => {\n    if (window.outerWidth <= 600) {\n      history.push(`/post/${postId}`);\n    } else {\n      showModal(\n        {\n          postId,\n          avatar,\n        },\n        'PostDialog/PostDialog'\n      );\n    }\n  };\n\n  const retrievePosts = async (offset) => {\n    try {\n      setPosts((previous) => ({ ...previous, fetching: true }));\n      const response = await getHashtagPosts(token, hashtag, offset);\n      response.posts\n        ? setPosts((previous) => ({\n            posts: previous.posts\n              ? [...previous.posts, ...response.posts]\n              : response.posts,\n            postCount: response.postCount,\n            fetching: false,\n            hasMore: response.length === 20,\n          }))\n        : setPosts((previous) => ({ ...previous, fetching: false }));\n    } catch (err) {\n      showAlert(err.message);\n    }\n  };\n\n  const renderSkeleton = (amount) => {\n    const skeleton = [];\n    for (let i = 0; i < amount; i++) {\n      skeleton.push(\n        <SkeletonLoader key={i} style={{ minHeight: '30rem' }} animated />\n      );\n    }\n    return skeleton;\n  };\n\n  useScrollPositionThrottled(\n    ({ atBottom }) => {\n      if (atBottom && posts.hasMore && !posts.fetching) {\n        retrievePosts(posts.posts.length);\n      }\n    },\n    null,\n    [posts]\n  );\n\n  const retrievePostsRef = useRef(retrievePosts);\n\n  useEffect(() => {\n    retrievePostsRef.current();\n  }, [retrievePostsRef]);\n\n  return !posts.fetching && posts.posts.length === 0 ? (\n    <div className=\"hashtag-posts__empty\">\n      <h2 className=\"heading-2\">\n        Could not find any post associated with #{hashtag}.\n      </h2>\n    </div>\n  ) : (\n    <Fragment>\n      <MobileHeader backArrow>\n        <TextButton style={{ justifySelf: 'center' }} bold large>\n          #{hashtag}\n        </TextButton>\n      </MobileHeader>\n      <div className=\"hashtag-posts__title\">\n        <h2 className=\"heading-2\">#{hashtag}</h2>\n        <h3 className=\"heading-3 font-medium\">\n          <span className=\"font-bold\">{posts.postCount}</span>{' '}\n          {posts.postCount === 1 ? 'post' : 'posts'}\n        </h3>\n      </div>\n      <ImageGrid>\n        {posts.posts &&\n          posts.posts.map((post, idx) => (\n            <PreviewImage\n              key={idx}\n              image={post.thumbnail}\n              likes={post.postVotes}\n              comments={post.comments}\n              filter={post.filter}\n              onClick={() => handleClick(post._id, post.avatar)}\n            />\n          ))}\n        {posts.fetching && renderSkeleton(10)}\n      </ImageGrid>\n    </Fragment>\n  );\n};\n\nexport default HashtagPosts;\n"]},"metadata":{},"sourceType":"module"}