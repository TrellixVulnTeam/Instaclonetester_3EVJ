{"ast":null,"code":"var _jsxFileName = \"/Users/jidesh/Documents/instaclone/client/src/components/PostDialog/PostDialogCommentForm/PostDialogCommentForm.js\";\nimport React, { useReducer, Fragment, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { createComment, createCommentReply } from '../../../services/commentService';\nimport { INITIAL_STATE, postDialogCommentFormReducer } from './postDialogCommentFormReducer';\nimport useSearchUsersDebounced from '../../../hooks/useSearchUsersDebounced';\nimport Loader from '../../Loader/Loader';\nimport SearchSuggestion from '../../SearchSuggestion/SearchSuggestion';\n\nconst PostDialogCommentForm = ({\n  token,\n  postId,\n  commentsRef,\n  dialogDispatch,\n  profileDispatch,\n  replying,\n  currentUser\n}) => {\n  const [state, dispatch] = useReducer(postDialogCommentFormReducer, INITIAL_STATE);\n  const [mention, setMention] = useState(null);\n  let {\n    handleSearchDebouncedRef,\n    result,\n    setResult,\n    fetching,\n    setFetching\n  } = useSearchUsersDebounced();\n  const commentInputRef = useRef();\n  useEffect(() => {\n    if (replying && commentInputRef.current) {\n      commentInputRef.current.value = `@${replying.commentUser} `;\n      commentInputRef.current.focus();\n    }\n  }, [replying]);\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (state.comment.length === 0) {\n      return dispatch({\n        type: 'POST_COMMENT_FAILURE',\n        payload: 'You cannot post an empty comment.'\n      });\n    }\n\n    try {\n      setResult(null);\n      dispatch({\n        type: 'POST_COMMENT_START'\n      });\n\n      if (!replying) {\n        // The user is not replying to a comment\n        const comment = await createComment(state.comment, postId, token);\n        dispatch({\n          type: 'POST_COMMENT_SUCCESS',\n          payload: {\n            comment,\n            dispatch: dialogDispatch,\n            postId\n          }\n        }); // Scroll to bottom to see posted comment\n\n        commentsRef.current.scrollTop = commentsRef.current.scrollHeight;\n      } else {\n        // The user is replying to a comment\n        const comment = await createCommentReply(state.comment, replying.commentId, token);\n        dispatch({\n          type: 'POST_COMMENT_REPLY_SUCCESS',\n          payload: {\n            comment,\n            dispatch: dialogDispatch,\n            parentCommentId: replying.commentId\n          }\n        });\n        dialogDispatch({\n          type: 'SET_REPLYING'\n        });\n      } // Increment the comment count on the overlay of the image on the profile page\n\n\n      profileDispatch && profileDispatch({\n        type: 'INCREMENT_POST_COMMENTS_COUNT',\n        payload: postId\n      });\n    } catch (err) {\n      dispatch({\n        type: 'POST_COMMENT_FAILURE',\n        payload: err\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: event => handleSubmit(event),\n    className: \"post-dialog__add-comment\",\n    \"data-test\": \"component-post-dialog-add-comment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, currentUser ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, state.posting && /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 31\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"add-comment__input\",\n    type: \"text\",\n    placeholder: \"Add a comment...\",\n    onChange: event => {\n      // Removed the `@username` from the input so the user is no longer looking to reply\n      if (replying && !event.target.value) {\n        dialogDispatch({\n          type: 'SET_REPLYING'\n        });\n      }\n\n      dispatch({\n        type: 'SET_COMMENT',\n        payload: event.target.value\n      }); // Checking for an @ mention\n\n      let string = event.target.value.match(new RegExp(/@[a-zA-Z0-9]+$/));\n\n      if (string) {\n        setMention(() => {\n          setFetching(true);\n          const mention = string[0].substring(1); // Setting the result to an empty array to show skeleton\n\n          setResult([]);\n          handleSearchDebouncedRef(mention);\n          return mention;\n        });\n      } else {\n        setResult(null);\n      }\n    },\n    value: state.comment,\n    ref: commentInputRef,\n    \"data-test\": \"component-add-comment-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"heading-3 heading--button font-bold color-blue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, \"Post\")) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"heading-4 font-medium color-grey\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/login\",\n    className: \"link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  }, \"Log in\"), ' '), \"to like or comment.\"))), result && /*#__PURE__*/React.createElement(SearchSuggestion, {\n    fetching: fetching,\n    result: result,\n    username: mention,\n    onClick: user => {\n      let comment = commentInputRef.current.value; // Replace the last word with the @mention\n\n      dispatch({\n        type: 'SET_COMMENT',\n        payload: comment.replace(/@\\b(\\w+)$/, `@${user.username} `)\n      });\n      commentInputRef.current.focus();\n      setResult(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }));\n};\n\nPostDialogCommentForm.propTypes = {\n  token: PropTypes.string,\n  postId: PropTypes.string.isRequired,\n  commentsRef: PropTypes.object.isRequired,\n  dialogDispatch: PropTypes.func.isRequired,\n  profileDispatch: PropTypes.func,\n  replying: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]).isRequired\n};\nexport default PostDialogCommentForm;","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/components/PostDialog/PostDialogCommentForm/PostDialogCommentForm.js"],"names":["React","useReducer","Fragment","useEffect","useRef","useState","PropTypes","Link","createComment","createCommentReply","INITIAL_STATE","postDialogCommentFormReducer","useSearchUsersDebounced","Loader","SearchSuggestion","PostDialogCommentForm","token","postId","commentsRef","dialogDispatch","profileDispatch","replying","currentUser","state","dispatch","mention","setMention","handleSearchDebouncedRef","result","setResult","fetching","setFetching","commentInputRef","current","value","commentUser","focus","handleSubmit","event","preventDefault","comment","length","type","payload","scrollTop","scrollHeight","commentId","parentCommentId","err","posting","target","string","match","RegExp","substring","user","replace","username","propTypes","isRequired","object","func","oneOfType","bool"],"mappings":"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","sourcesContent":["import React, {\n  useReducer,\n  Fragment,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport {\n  createComment,\n  createCommentReply,\n} from '../../../services/commentService';\n\nimport {\n  INITIAL_STATE,\n  postDialogCommentFormReducer,\n} from './postDialogCommentFormReducer';\n\nimport useSearchUsersDebounced from '../../../hooks/useSearchUsersDebounced';\n\nimport Loader from '../../Loader/Loader';\nimport SearchSuggestion from '../../SearchSuggestion/SearchSuggestion';\n\nconst PostDialogCommentForm = ({\n  token,\n  postId,\n  commentsRef,\n  dialogDispatch,\n  profileDispatch,\n  replying,\n  currentUser,\n}) => {\n  const [state, dispatch] = useReducer(\n    postDialogCommentFormReducer,\n    INITIAL_STATE\n  );\n  const [mention, setMention] = useState(null);\n\n  let {\n    handleSearchDebouncedRef,\n    result,\n    setResult,\n    fetching,\n    setFetching,\n  } = useSearchUsersDebounced();\n\n  const commentInputRef = useRef();\n\n  useEffect(() => {\n    if (replying && commentInputRef.current) {\n      commentInputRef.current.value = `@${replying.commentUser} `;\n      commentInputRef.current.focus();\n    }\n  }, [replying]);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    if (state.comment.length === 0) {\n      return dispatch({\n        type: 'POST_COMMENT_FAILURE',\n        payload: 'You cannot post an empty comment.',\n      });\n    }\n\n    try {\n      setResult(null);\n      dispatch({ type: 'POST_COMMENT_START' });\n      if (!replying) {\n        // The user is not replying to a comment\n        const comment = await createComment(state.comment, postId, token);\n        dispatch({\n          type: 'POST_COMMENT_SUCCESS',\n          payload: { comment, dispatch: dialogDispatch, postId },\n        });\n        // Scroll to bottom to see posted comment\n        commentsRef.current.scrollTop = commentsRef.current.scrollHeight;\n      } else {\n        // The user is replying to a comment\n        const comment = await createCommentReply(\n          state.comment,\n          replying.commentId,\n          token\n        );\n        dispatch({\n          type: 'POST_COMMENT_REPLY_SUCCESS',\n          payload: {\n            comment,\n            dispatch: dialogDispatch,\n            parentCommentId: replying.commentId,\n          },\n        });\n        dialogDispatch({ type: 'SET_REPLYING' });\n      }\n      // Increment the comment count on the overlay of the image on the profile page\n      profileDispatch &&\n        profileDispatch({\n          type: 'INCREMENT_POST_COMMENTS_COUNT',\n          payload: postId,\n        });\n    } catch (err) {\n      dispatch({ type: 'POST_COMMENT_FAILURE', payload: err });\n    }\n  };\n\n  return (\n    <form\n      onSubmit={(event) => handleSubmit(event)}\n      className=\"post-dialog__add-comment\"\n      data-test=\"component-post-dialog-add-comment\"\n    >\n      <Fragment>\n        {currentUser ? (\n          <Fragment>\n            {state.posting && <Loader />}\n            <input\n              className=\"add-comment__input\"\n              type=\"text\"\n              placeholder=\"Add a comment...\"\n              onChange={(event) => {\n                // Removed the `@username` from the input so the user is no longer looking to reply\n                if (replying && !event.target.value) {\n                  dialogDispatch({ type: 'SET_REPLYING' });\n                }\n                dispatch({ type: 'SET_COMMENT', payload: event.target.value });\n                // Checking for an @ mention\n                let string = event.target.value.match(\n                  new RegExp(/@[a-zA-Z0-9]+$/)\n                );\n                if (string) {\n                  setMention(() => {\n                    setFetching(true);\n                    const mention = string[0].substring(1);\n                    // Setting the result to an empty array to show skeleton\n                    setResult([]);\n                    handleSearchDebouncedRef(mention);\n                    return mention;\n                  });\n                } else {\n                  setResult(null);\n                }\n              }}\n              value={state.comment}\n              ref={commentInputRef}\n              data-test=\"component-add-comment-input\"\n            />\n            <button\n              type=\"submit\"\n              className=\"heading-3 heading--button font-bold color-blue\"\n            >\n              Post\n            </button>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <h4 className=\"heading-4 font-medium color-grey\">\n              <span>\n                <Link to=\"/login\" className=\"link\">\n                  Log in\n                </Link>{' '}\n              </span>\n              to like or comment.\n            </h4>\n          </Fragment>\n        )}\n      </Fragment>\n      {result && (\n        <SearchSuggestion\n          fetching={fetching}\n          result={result}\n          username={mention}\n          onClick={(user) => {\n            let comment = commentInputRef.current.value;\n            // Replace the last word with the @mention\n            dispatch({\n              type: 'SET_COMMENT',\n              payload: comment.replace(/@\\b(\\w+)$/, `@${user.username} `),\n            });\n            commentInputRef.current.focus();\n            setResult(null);\n          }}\n        />\n      )}\n    </form>\n  );\n};\n\nPostDialogCommentForm.propTypes = {\n  token: PropTypes.string,\n  postId: PropTypes.string.isRequired,\n  commentsRef: PropTypes.object.isRequired,\n  dialogDispatch: PropTypes.func.isRequired,\n  profileDispatch: PropTypes.func,\n  replying: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]).isRequired,\n};\n\nexport default PostDialogCommentForm;\n"]},"metadata":{},"sourceType":"module"}