{"ast":null,"code":"var _jsxFileName = \"/Users/jidesh/Documents/instaclone/client/src/components/ChangePasswordForm/ChangePasswordForm.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectCurrentUser, selectToken } from '../../redux/user/userSelectors';\nimport { showAlert } from '../../redux/alert/alertActions';\nimport { validatePassword } from '../../utils/validation';\nimport { changePassword } from '../../services/authenticationServices';\nimport Avatar from '../Avatar/Avatar';\nimport FormInput from '../FormInput/FormInput';\nimport Button from '../Button/Button';\nimport TextButton from '../Button/TextButton/TextButton';\nimport SettingsForm from '../SettingsForm/SettingsForm';\nimport SettingsFormGroup from '../SettingsForm/SettingsFormGroup/SettingsFormGroup';\n\nconst ChangePasswordForm = ({\n  currentUser,\n  token,\n  showAlert\n}) => {\n  const [oldPassword, setOldPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmNewPassword, setConfirmNewPassword] = useState('');\n  const [fetching, setFetching] = useState(false);\n  useEffect(() => {\n    document.title = 'Change Password â€¢ Instaclone';\n  }, []);\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (newPassword !== confirmNewPassword) {\n      return showAlert('Please make sure both passwords match.');\n    }\n\n    const newPasswordError = validatePassword(newPassword);\n    if (newPasswordError) return showAlert(newPasswordError);\n\n    try {\n      setFetching(true);\n      await changePassword(oldPassword, newPassword, token);\n      showAlert(\"Your password has been changed, you'll have to log in with the new one next time.\");\n      setFetching(false);\n    } catch (err) {\n      setFetching(false);\n      showAlert(err.message);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(SettingsForm, {\n    onSubmit: event => handleSubmit(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SettingsFormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    className: \"avatar--small\",\n    imageSrc: currentUser.avatar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"font-medium\",\n    style: {\n      fontSize: '2.5rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, currentUser.username)), /*#__PURE__*/React.createElement(SettingsFormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"heading-3 font-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"Old Password\"), /*#__PURE__*/React.createElement(FormInput, {\n    onChange: event => setOldPassword(event.target.value),\n    type: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(SettingsFormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"heading-3 font-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, \"New Password\"), /*#__PURE__*/React.createElement(FormInput, {\n    onChange: event => setNewPassword(event.target.value),\n    type: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(SettingsFormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"heading-3 font-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Confirm New Password\"), /*#__PURE__*/React.createElement(FormInput, {\n    onChange: event => setConfirmNewPassword(event.target.value),\n    type: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(SettingsFormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    style: {\n      width: '15rem'\n    },\n    loading: fetching,\n    disabled: oldPassword.length < 6 || newPassword.length < 6 || confirmNewPassword.length < 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, \"Change Password\")), /*#__PURE__*/React.createElement(SettingsFormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextButton, {\n    style: {\n      width: '15rem',\n      textAlign: 'left'\n    },\n    blue: true,\n    bold: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, \"Forgot Password?\")));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  showAlert: (text, onClick) => dispatch(showAlert(text, onClick))\n});\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n  token: selectToken\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangePasswordForm);","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/components/ChangePasswordForm/ChangePasswordForm.js"],"names":["React","useEffect","useState","connect","createStructuredSelector","selectCurrentUser","selectToken","showAlert","validatePassword","changePassword","Avatar","FormInput","Button","TextButton","SettingsForm","SettingsFormGroup","ChangePasswordForm","currentUser","token","oldPassword","setOldPassword","newPassword","setNewPassword","confirmNewPassword","setConfirmNewPassword","fetching","setFetching","document","title","handleSubmit","event","preventDefault","newPasswordError","err","message","avatar","fontSize","username","target","value","width","length","textAlign","mapDispatchToProps","dispatch","text","onClick","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport { selectCurrentUser, selectToken } from '../../redux/user/userSelectors';\nimport { showAlert } from '../../redux/alert/alertActions';\n\nimport { validatePassword } from '../../utils/validation';\n\nimport { changePassword } from '../../services/authenticationServices';\n\nimport Avatar from '../Avatar/Avatar';\nimport FormInput from '../FormInput/FormInput';\nimport Button from '../Button/Button';\nimport TextButton from '../Button/TextButton/TextButton';\nimport SettingsForm from '../SettingsForm/SettingsForm';\nimport SettingsFormGroup from '../SettingsForm/SettingsFormGroup/SettingsFormGroup';\n\nconst ChangePasswordForm = ({ currentUser, token, showAlert }) => {\n  const [oldPassword, setOldPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmNewPassword, setConfirmNewPassword] = useState('');\n  const [fetching, setFetching] = useState(false);\n  useEffect(() => {\n    document.title = 'Change Password â€¢ Instaclone';\n  }, []);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    if (newPassword !== confirmNewPassword) {\n      return showAlert('Please make sure both passwords match.');\n    }\n    const newPasswordError = validatePassword(newPassword);\n    if (newPasswordError) return showAlert(newPasswordError);\n\n    try {\n      setFetching(true);\n      await changePassword(oldPassword, newPassword, token);\n      showAlert(\n        \"Your password has been changed, you'll have to log in with the new one next time.\"\n      );\n      setFetching(false);\n    } catch (err) {\n      setFetching(false);\n      showAlert(err.message);\n    }\n  };\n\n  return (\n    <SettingsForm onSubmit={(event) => handleSubmit(event)}>\n      <SettingsFormGroup>\n        <Avatar className=\"avatar--small\" imageSrc={currentUser.avatar} />\n        <h1 className=\"font-medium\" style={{ fontSize: '2.5rem' }}>\n          {currentUser.username}\n        </h1>\n      </SettingsFormGroup>\n      <SettingsFormGroup>\n        <label className=\"heading-3 font-bold\">Old Password</label>\n        <FormInput\n          onChange={(event) => setOldPassword(event.target.value)}\n          type=\"password\"\n        />\n      </SettingsFormGroup>\n      <SettingsFormGroup>\n        <label className=\"heading-3 font-bold\">New Password</label>\n        <FormInput\n          onChange={(event) => setNewPassword(event.target.value)}\n          type=\"password\"\n        />\n      </SettingsFormGroup>\n      <SettingsFormGroup>\n        <label className=\"heading-3 font-bold\">Confirm New Password</label>\n        <FormInput\n          onChange={(event) => setConfirmNewPassword(event.target.value)}\n          type=\"password\"\n        />\n      </SettingsFormGroup>\n      <SettingsFormGroup>\n        <label></label>\n        <Button\n          style={{ width: '15rem' }}\n          loading={fetching}\n          disabled={\n            oldPassword.length < 6 ||\n            newPassword.length < 6 ||\n            confirmNewPassword.length < 6\n          }\n        >\n          Change Password\n        </Button>\n      </SettingsFormGroup>\n      <SettingsFormGroup>\n        <label></label>\n        <TextButton style={{ width: '15rem', textAlign: 'left' }} blue bold>\n          Forgot Password?\n        </TextButton>\n      </SettingsFormGroup>\n    </SettingsForm>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  showAlert: (text, onClick) => dispatch(showAlert(text, onClick)),\n});\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n  token: selectToken,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangePasswordForm);\n"]},"metadata":{},"sourceType":"module"}