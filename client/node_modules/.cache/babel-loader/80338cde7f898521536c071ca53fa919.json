{"ast":null,"code":"/**\n * Copyright Facebook, ratehub.\n * All rights reserved.\n *\n * This code is intended to closely match the behaviour of checkPropTypes() from\n * facebook/prop-types. The license for that code can be found here:\n * https://github.com/facebook/prop-types/blob/be165febc8133dfbe2c45133db6d25664dd68ad8/LICENSE\n *\n * That function's source:\n * https://github.com/facebook/prop-types/blob/be165febc8133dfbe2c45133db6d25664dd68ad8/checkPropTypes.js\n */\n\n/**\n * Check if the values match with the type specs\n * Return a type error message or null\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (process.env.NODE_ENV !== 'production') {\n    const ReactPropTypesSecret = require('prop-types/lib/ReactPropTypesSecret');\n\n    var name = componentName || 'React class';\n\n    for (var typeSpecName in typeSpecs) {\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {\n        var error;\n\n        if (typeof typeSpecs[typeSpecName] !== 'function') {\n          return name + ': ' + location + ' type `' + typeSpecName + '` is ' + 'invalid; it must be a function, usually from React.PropTypes.';\n        } else {\n          // Prop type validation may throw. In case they do, catch and save the\n          // exception as the error.\n          try {\n            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n          } catch (ex) {\n            error = ex;\n          }\n        }\n\n        if (error && !(error instanceof Error)) {\n          return name + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker function must ' + 'return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).';\n        }\n\n        if (error instanceof Error) {\n          var stack = getStack && getStack() || '';\n          return 'Failed ' + location + ' type: ' + error.message + stack;\n        }\n      }\n    }\n  }\n}\n/**\n * Same as checkPropTypes but throws on error\n */\n\n\nfunction assertPropTypes() {\n  if (process.env.NODE_ENV !== 'production') {\n    var error = checkPropTypes.apply(null, arguments);\n\n    if (error) {\n      throw new Error(error);\n    }\n  }\n}\n\nmodule.exports = checkPropTypes;\nmodule.exports.assertPropTypes = assertPropTypes;","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/node_modules/check-prop-types/index.js"],"names":["checkPropTypes","typeSpecs","values","location","componentName","getStack","process","env","NODE_ENV","ReactPropTypesSecret","require","name","typeSpecName","hasOwnProperty","error","ex","Error","stack","message","assertPropTypes","apply","arguments","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;;;;;;;;;AAUA,SAASA,cAAT,CAAwBC,SAAxB,EAAmCC,MAAnC,EAA2CC,QAA3C,EAAqDC,aAArD,EAAoEC,QAApE,EAA8E;AAC5E,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAMC,oBAAoB,GAAGC,OAAO,CAAC,qCAAD,CAApC;;AACA,QAAIC,IAAI,GAAGP,aAAa,IAAI,aAA5B;;AACA,SAAK,IAAIQ,YAAT,IAAyBX,SAAzB,EAAoC;AAClC,UAAIA,SAAS,CAACY,cAAV,CAAyBD,YAAzB,CAAJ,EAA4C;AAC1C,YAAIE,KAAJ;;AACA,YAAI,OAAOb,SAAS,CAACW,YAAD,CAAhB,KAAmC,UAAvC,EAAmD;AACjD,iBAAQD,IAAI,GAAG,IAAP,GAAcR,QAAd,GAAyB,SAAzB,GAAqCS,YAArC,GAAoD,OAApD,GACN,+DADF;AAED,SAHD,MAGO;AACL;AACA;AACA,cAAI;AACFE,YAAAA,KAAK,GAAGb,SAAS,CAACW,YAAD,CAAT,CAAwBV,MAAxB,EAAgCU,YAAhC,EAA8CR,aAA9C,EACND,QADM,EACI,IADJ,EACUM,oBADV,CAAR;AAED,WAHD,CAGE,OAAOM,EAAP,EAAW;AACXD,YAAAA,KAAK,GAAGC,EAAR;AACD;AACF;;AACD,YAAID,KAAK,IAAI,EAAEA,KAAK,YAAYE,KAAnB,CAAb,EAAwC;AACtC,iBAAQL,IAAI,GAAG,0BAAP,GAAoCR,QAApC,GAA+C,IAA/C,GACNS,YADM,GACS,+CADT,GAEN,6CAFM,GAE0C,OAAOE,KAFjD,GAEyD,IAFzD,GAGN,iEAHM,GAIN,gEAJM,GAKN,iCALF;AAMD;;AACD,YAAIA,KAAK,YAAYE,KAArB,EAA4B;AAC1B,cAAIC,KAAK,GAAGZ,QAAQ,IAAIA,QAAQ,EAApB,IAA0B,EAAtC;AACA,iBAAO,YAAYF,QAAZ,GAAuB,SAAvB,GAAmCW,KAAK,CAACI,OAAzC,GAAmDD,KAA1D;AACD;AACF;AACF;AACF;AACF;AAED;;;;;AAGA,SAASE,eAAT,GAA2B;AACzB,MAAIb,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAIM,KAAK,GAAGd,cAAc,CAACoB,KAAf,CAAqB,IAArB,EAA2BC,SAA3B,CAAZ;;AACA,QAAIP,KAAJ,EAAW;AACT,YAAM,IAAIE,KAAJ,CAAUF,KAAV,CAAN;AACD;AACF;AACF;;AAEDQ,MAAM,CAACC,OAAP,GAAiBvB,cAAjB;AACAsB,MAAM,CAACC,OAAP,CAAeJ,eAAf,GAAiCA,eAAjC","sourcesContent":["/**\n * Copyright Facebook, ratehub.\n * All rights reserved.\n *\n * This code is intended to closely match the behaviour of checkPropTypes() from\n * facebook/prop-types. The license for that code can be found here:\n * https://github.com/facebook/prop-types/blob/be165febc8133dfbe2c45133db6d25664dd68ad8/LICENSE\n *\n * That function's source:\n * https://github.com/facebook/prop-types/blob/be165febc8133dfbe2c45133db6d25664dd68ad8/checkPropTypes.js\n */\n\n/**\n * Check if the values match with the type specs\n * Return a type error message or null\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (process.env.NODE_ENV !== 'production') {\n    const ReactPropTypesSecret = require('prop-types/lib/ReactPropTypesSecret');\n    var name = componentName || 'React class';\n    for (var typeSpecName in typeSpecs) {\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {\n        var error;\n        if (typeof typeSpecs[typeSpecName] !== 'function') {\n          return (name + ': ' + location + ' type `' + typeSpecName + '` is ' +\n            'invalid; it must be a function, usually from React.PropTypes.');\n        } else {\n          // Prop type validation may throw. In case they do, catch and save the\n          // exception as the error.\n          try {\n            error = typeSpecs[typeSpecName](values, typeSpecName, componentName,\n              location, null, ReactPropTypesSecret);\n          } catch (ex) {\n            error = ex;\n          }\n        }\n        if (error && !(error instanceof Error)) {\n          return (name + ': type specification of ' + location + ' `' +\n            typeSpecName + '` is invalid; the type checker function must ' +\n            'return `null` or an `Error` but returned a ' + typeof error + '. '+\n            'You may have forgotten to pass an argument to the type checker ' +\n            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n            'shape all require an argument).');\n        }\n        if (error instanceof Error) {\n          var stack = getStack && getStack() || '';\n          return 'Failed ' + location + ' type: ' + error.message + stack;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Same as checkPropTypes but throws on error\n */\nfunction assertPropTypes() {\n  if (process.env.NODE_ENV !== 'production') {\n    var error = checkPropTypes.apply(null, arguments);\n    if (error) {\n      throw new Error(error);\n    }\n  }\n}\n\nmodule.exports = checkPropTypes;\nmodule.exports.assertPropTypes = assertPropTypes;\n"]},"metadata":{},"sourceType":"script"}