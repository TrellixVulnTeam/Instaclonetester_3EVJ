{"ast":null,"code":"import { postDialogReducer, INITIAL_STATE } from './postDialogReducer';\nconst comment = {\n  _id: '456',\n  message: 'test',\n  author: {\n    _id: '123',\n    username: 'test'\n  },\n  post: '12345',\n  date: 32432432324,\n  commentReplies: 0,\n  commentVotes: []\n};\nconst post = {\n  _id: '12345',\n  image: 'www.image.com',\n  caption: 'test post',\n  author: {\n    username: 'test'\n  },\n  date: 32432432324,\n  postVotes: [{\n    votes: []\n  }],\n  comments: [comment],\n  commentReplies: []\n};\nconst user = {\n  _id: '123',\n  username: 'test'\n};\nconst seededState = {\n  fetching: false,\n  error: false,\n  replying: false,\n  data: post\n};\ntest('throws error when an invalid action is passed', () => {\n  expect(() => postDialogReducer(null, {\n    type: 'test'\n  }).toThrow());\n});\ntest('returns expected state when `FETCH_POST_FAILURE` is passed', () => {\n  const error = 'failed';\n  const newState = postDialogReducer(INITIAL_STATE, {\n    type: 'FETCH_POST_FAILURE',\n    payload: error\n  });\n  expect(newState).toEqual({ ...INITIAL_STATE,\n    fetching: false,\n    error\n  });\n});\ntest('returns expected state when `FETCH_POST_SUCCESS` is passed', () => {\n  const newState = postDialogReducer(INITIAL_STATE, {\n    type: 'FETCH_POST_SUCCESS',\n    payload: post\n  });\n  expect(newState).toEqual({\n    fetching: false,\n    error: false,\n    replying: false,\n    data: post\n  });\n});\ntest('returns expected state and calls dispatch when `VOTE_POST` is passed', () => {\n  const dispatchMock = jest.fn();\n  const newState = postDialogReducer(seededState, {\n    type: 'VOTE_POST',\n    payload: {\n      currentUser: user,\n      postId: '321',\n      dispatch: dispatchMock\n    }\n  });\n  expect(newState).toEqual({\n    fetching: false,\n    error: false,\n    replying: false,\n    data: { ...post,\n      postVotes: [{\n        votes: [{\n          author: user._id\n        }]\n      }]\n    }\n  });\n  expect(dispatchMock).toHaveBeenCalledTimes(1);\n});\ntest('returns expected state when `VOTE_COMMENT` is passed and comment has NOT been voted on', () => {\n  const newState = postDialogReducer(seededState, {\n    type: 'VOTE_COMMENT',\n    payload: {\n      commentId: '456',\n      currentUser: user\n    }\n  });\n  expect(newState).toEqual({ ...seededState,\n    data: { ...seededState.data,\n      comments: [{ ...comment,\n        commentVotes: [{\n          author: user._id\n        }]\n      }]\n    }\n  });\n});\ntest('returns expected state when `ADD_COMMENT` is passed', () => {\n  const newComment = {\n    _id: '678',\n    message: 'test2',\n    author: user,\n    post: '12345',\n    date: 32432432324,\n    commentReplies: 0,\n    commentVotes: []\n  };\n  const newState = postDialogReducer(seededState, {\n    type: 'ADD_COMMENT',\n    payload: newComment\n  });\n  expect(newState).toEqual({ ...seededState,\n    data: { ...seededState.data,\n      comments: [...seededState.data.comments, newComment]\n    }\n  });\n});\ntest('returns expected state when `REMOVE_COMMENT` is passed', () => {\n  const newState = postDialogReducer(seededState, {\n    type: 'REMOVE_COMMENT',\n    payload: comment._id\n  });\n  expect(newState).toEqual({ ...seededState,\n    data: { ...seededState.data,\n      comments: []\n    }\n  });\n});\ndescribe('COMMENT_REPLY', () => {\n  let commentReply = undefined;\n  beforeEach(() => {\n    commentReply = {\n      _id: '678',\n      parentComment: comment._id,\n      message: 'comment reply',\n      author: user,\n      commentReplyVotes: []\n    };\n  });\n  test('returns expected state when `ADD_COMMENT_REPLY` is passed', () => {\n    const newState = postDialogReducer(seededState, {\n      type: 'ADD_COMMENT_REPLY',\n      payload: {\n        comment: commentReply,\n        parentCommentId: comment._id\n      }\n    });\n    expect(newState).toEqual({ ...seededState,\n      data: { ...seededState.data,\n        comments: [{ ...comment,\n          commentReplies: 1\n        }],\n        commentReplies: [commentReply]\n      }\n    });\n  });\n  test('returns expected state when `REMOVE_COMMENT_REPLY` is passed', () => {\n    const newState = postDialogReducer({ ...seededState,\n      data: { ...seededState.data,\n        commentReplies: [commentReply],\n        comments: [{ ...comment,\n          commentReplies: 1\n        }]\n      }\n    }, {\n      type: 'REMOVE_COMMENT_REPLY',\n      payload: {\n        commentReplyId: commentReply._id,\n        parentCommentId: comment._id\n      }\n    });\n    expect(newState).toEqual({ ...seededState,\n      data: { ...seededState.data,\n        comments: [{ ...comment,\n          commentReplies: 0\n        }],\n        commentReplies: []\n      }\n    });\n  });\n  test('returns expected state when `VOTE_COMMENT_REPLY` is passed', () => {\n    const newState = postDialogReducer({ ...seededState,\n      data: { ...seededState.data,\n        commentReplies: [commentReply],\n        comments: [{ ...comment,\n          commentReplies: 1\n        }]\n      }\n    }, {\n      type: 'VOTE_COMMENT_REPLY',\n      payload: {\n        commentReplyId: commentReply._id,\n        currentUser: user\n      }\n    });\n    expect(newState).toEqual({ ...seededState,\n      data: { ...seededState.data,\n        comments: [{ ...comment,\n          commentReplies: 1\n        }],\n        commentReplies: [{ ...commentReply,\n          commentReplyVotes: [{\n            author: user._id\n          }]\n        }]\n      }\n    });\n  });\n});\ntest('returns expected state when `SET_REPLYING` is passed', () => {\n  const newState = postDialogReducer(seededState, {\n    type: 'SET_REPLYING',\n    payload: {\n      username: user.username,\n      commentId: comment._id\n    }\n  });\n  expect(newState).toEqual({ ...seededState,\n    replying: {\n      commentUser: user.username,\n      commentId: comment._id\n    }\n  });\n});","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/components/PostDialog/PostDialogReducer.test.js"],"names":["postDialogReducer","INITIAL_STATE","comment","_id","message","author","username","post","date","commentReplies","commentVotes","image","caption","postVotes","votes","comments","user","seededState","fetching","error","replying","data","test","expect","type","toThrow","newState","payload","toEqual","dispatchMock","jest","fn","currentUser","postId","dispatch","toHaveBeenCalledTimes","commentId","newComment","describe","commentReply","undefined","beforeEach","parentComment","commentReplyVotes","parentCommentId","commentReplyId","commentUser"],"mappings":"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","sourcesContent":["import { postDialogReducer, INITIAL_STATE } from './postDialogReducer';\n\nconst comment = {\n  _id: '456',\n  message: 'test',\n  author: { _id: '123', username: 'test' },\n  post: '12345',\n  date: 32432432324,\n  commentReplies: 0,\n  commentVotes: []\n};\n\nconst post = {\n  _id: '12345',\n  image: 'www.image.com',\n  caption: 'test post',\n  author: { username: 'test' },\n  date: 32432432324,\n  postVotes: [{ votes: [] }],\n  comments: [comment],\n  commentReplies: []\n};\n\nconst user = { _id: '123', username: 'test' };\n\nconst seededState = {\n  fetching: false,\n  error: false,\n  replying: false,\n  data: post\n};\n\ntest('throws error when an invalid action is passed', () => {\n  expect(() => postDialogReducer(null, { type: 'test' }).toThrow());\n});\n\ntest('returns expected state when `FETCH_POST_FAILURE` is passed', () => {\n  const error = 'failed';\n  const newState = postDialogReducer(INITIAL_STATE, {\n    type: 'FETCH_POST_FAILURE',\n    payload: error\n  });\n\n  expect(newState).toEqual({\n    ...INITIAL_STATE,\n    fetching: false,\n    error\n  });\n});\n\ntest('returns expected state when `FETCH_POST_SUCCESS` is passed', () => {\n  const newState = postDialogReducer(INITIAL_STATE, {\n    type: 'FETCH_POST_SUCCESS',\n    payload: post\n  });\n\n  expect(newState).toEqual({\n    fetching: false,\n    error: false,\n    replying: false,\n    data: post\n  });\n});\n\ntest('returns expected state and calls dispatch when `VOTE_POST` is passed', () => {\n  const dispatchMock = jest.fn();\n  const newState = postDialogReducer(seededState, {\n    type: 'VOTE_POST',\n    payload: {\n      currentUser: user,\n      postId: '321',\n      dispatch: dispatchMock\n    }\n  });\n\n  expect(newState).toEqual({\n    fetching: false,\n    error: false,\n    replying: false,\n    data: {\n      ...post,\n      postVotes: [{ votes: [{ author: user._id }] }]\n    }\n  });\n\n  expect(dispatchMock).toHaveBeenCalledTimes(1);\n});\n\ntest('returns expected state when `VOTE_COMMENT` is passed and comment has NOT been voted on', () => {\n  const newState = postDialogReducer(seededState, {\n    type: 'VOTE_COMMENT',\n    payload: { commentId: '456', currentUser: user }\n  });\n\n  expect(newState).toEqual({\n    ...seededState,\n    data: {\n      ...seededState.data,\n      comments: [{ ...comment, commentVotes: [{ author: user._id }] }]\n    }\n  });\n});\n\ntest('returns expected state when `ADD_COMMENT` is passed', () => {\n  const newComment = {\n    _id: '678',\n    message: 'test2',\n    author: user,\n    post: '12345',\n    date: 32432432324,\n    commentReplies: 0,\n    commentVotes: []\n  };\n  const newState = postDialogReducer(seededState, {\n    type: 'ADD_COMMENT',\n    payload: newComment\n  });\n\n  expect(newState).toEqual({\n    ...seededState,\n    data: {\n      ...seededState.data,\n      comments: [...seededState.data.comments, newComment]\n    }\n  });\n});\n\ntest('returns expected state when `REMOVE_COMMENT` is passed', () => {\n  const newState = postDialogReducer(seededState, {\n    type: 'REMOVE_COMMENT',\n    payload: comment._id\n  });\n\n  expect(newState).toEqual({\n    ...seededState,\n    data: { ...seededState.data, comments: [] }\n  });\n});\n\ndescribe('COMMENT_REPLY', () => {\n  let commentReply = undefined;\n  beforeEach(() => {\n    commentReply = {\n      _id: '678',\n      parentComment: comment._id,\n      message: 'comment reply',\n      author: user,\n      commentReplyVotes: []\n    };\n  });\n\n  test('returns expected state when `ADD_COMMENT_REPLY` is passed', () => {\n    const newState = postDialogReducer(seededState, {\n      type: 'ADD_COMMENT_REPLY',\n      payload: {\n        comment: commentReply,\n        parentCommentId: comment._id\n      }\n    });\n\n    expect(newState).toEqual({\n      ...seededState,\n      data: {\n        ...seededState.data,\n        comments: [{ ...comment, commentReplies: 1 }],\n        commentReplies: [commentReply]\n      }\n    });\n  });\n\n  test('returns expected state when `REMOVE_COMMENT_REPLY` is passed', () => {\n    const newState = postDialogReducer(\n      {\n        ...seededState,\n        data: {\n          ...seededState.data,\n          commentReplies: [commentReply],\n          comments: [{ ...comment, commentReplies: 1 }]\n        }\n      },\n      {\n        type: 'REMOVE_COMMENT_REPLY',\n        payload: {\n          commentReplyId: commentReply._id,\n          parentCommentId: comment._id\n        }\n      }\n    );\n\n    expect(newState).toEqual({\n      ...seededState,\n      data: {\n        ...seededState.data,\n        comments: [{ ...comment, commentReplies: 0 }],\n        commentReplies: []\n      }\n    });\n  });\n\n  test('returns expected state when `VOTE_COMMENT_REPLY` is passed', () => {\n    const newState = postDialogReducer(\n      {\n        ...seededState,\n        data: {\n          ...seededState.data,\n          commentReplies: [commentReply],\n          comments: [{ ...comment, commentReplies: 1 }]\n        }\n      },\n      {\n        type: 'VOTE_COMMENT_REPLY',\n        payload: { commentReplyId: commentReply._id, currentUser: user }\n      }\n    );\n\n    expect(newState).toEqual({\n      ...seededState,\n      data: {\n        ...seededState.data,\n        comments: [{ ...comment, commentReplies: 1 }],\n        commentReplies: [\n          { ...commentReply, commentReplyVotes: [{ author: user._id }] }\n        ]\n      }\n    });\n  });\n});\n\ntest('returns expected state when `SET_REPLYING` is passed', () => {\n  const newState = postDialogReducer(seededState, {\n    type: 'SET_REPLYING',\n    payload: { username: user.username, commentId: comment._id }\n  });\n\n  expect(newState).toEqual({\n    ...seededState,\n    replying: { commentUser: user.username, commentId: comment._id }\n  });\n});\n"]},"metadata":{},"sourceType":"module"}