{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport throttle from 'lodash/throttle';\n/**\n * Gets the current scroll position\n * @function getCurrentScrollPosition\n * @param {HTMLElement} element The element to retrieve a scroll position from\n */\n\nconst getCurrentScrollPosition = element => {\n  const {\n    scrollTop\n  } = element;\n  return scrollTop;\n};\n/**\n * A throttled hook to execute a function upon scroll\n * @function useScrollPositionThrottled\n * @param {function} callback Callback function to call when a user scrolls\n * @param {HTMLElement} element The element to calculate the scroll position, the default is document\n * @param {array} deps Dependency array\n */\n\n\nconst useScrollPositionThrottled = (callback, element, deps = []) => {\n  const currentElement = element ? element : document.documentElement;\n  const scrollPosition = useRef(getCurrentScrollPosition(currentElement));\n  /**\n   * Handles determining positional values when scrolling\n   * @function handleScroll\n   */\n\n  useEffect(() => {\n    const handleScroll = () => {\n      scrollPosition.current = getCurrentScrollPosition(currentElement);\n      callback({\n        currentScrollPosition: scrollPosition.current,\n        atBottom: currentElement.scrollHeight - currentElement.scrollTop - currentElement.clientHeight < 1000\n      });\n    }; // Throttle the function to improve performance\n\n\n    const handleScrollThrottled = throttle(handleScroll, 200);\n    element ? element.addEventListener('scroll', handleScrollThrottled) : window.addEventListener('scroll', handleScrollThrottled);\n    return () => {\n      element ? element.removeEventListener('scroll', handleScrollThrottled) : window.removeEventListener('scroll', handleScrollThrottled);\n    }; //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [...deps, element, currentElement, callback]);\n};\n\nexport default useScrollPositionThrottled;","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/hooks/useScrollPositionThrottled.js"],"names":["useEffect","useRef","throttle","getCurrentScrollPosition","element","scrollTop","useScrollPositionThrottled","callback","deps","currentElement","document","documentElement","scrollPosition","handleScroll","current","currentScrollPosition","atBottom","scrollHeight","clientHeight","handleScrollThrottled","addEventListener","window","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA;;;;;;AAKA,MAAMC,wBAAwB,GAAIC,OAAD,IAAa;AAC5C,QAAM;AAAEC,IAAAA;AAAF,MAAgBD,OAAtB;AACA,SAAOC,SAAP;AACD,CAHD;AAKA;;;;;;;;;AAOA,MAAMC,0BAA0B,GAAG,CAACC,QAAD,EAAWH,OAAX,EAAoBI,IAAI,GAAG,EAA3B,KAAkC;AACnE,QAAMC,cAAc,GAAGL,OAAO,GAAGA,OAAH,GAAaM,QAAQ,CAACC,eAApD;AACA,QAAMC,cAAc,GAAGX,MAAM,CAACE,wBAAwB,CAACM,cAAD,CAAzB,CAA7B;AAEA;;;;;AAIAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,YAAY,GAAG,MAAM;AACzBD,MAAAA,cAAc,CAACE,OAAf,GAAyBX,wBAAwB,CAACM,cAAD,CAAjD;AACAF,MAAAA,QAAQ,CAAC;AACPQ,QAAAA,qBAAqB,EAAEH,cAAc,CAACE,OAD/B;AAEPE,QAAAA,QAAQ,EACNP,cAAc,CAACQ,YAAf,GACER,cAAc,CAACJ,SADjB,GAEEI,cAAc,CAACS,YAFjB,GAGA;AANK,OAAD,CAAR;AAQD,KAVD,CADc,CAYd;;;AACA,UAAMC,qBAAqB,GAAGjB,QAAQ,CAACW,YAAD,EAAe,GAAf,CAAtC;AACAT,IAAAA,OAAO,GACHA,OAAO,CAACgB,gBAAR,CAAyB,QAAzB,EAAmCD,qBAAnC,CADG,GAEHE,MAAM,CAACD,gBAAP,CAAwB,QAAxB,EAAkCD,qBAAlC,CAFJ;AAIA,WAAO,MAAM;AACXf,MAAAA,OAAO,GACHA,OAAO,CAACkB,mBAAR,CAA4B,QAA5B,EAAsCH,qBAAtC,CADG,GAEHE,MAAM,CAACC,mBAAP,CAA2B,QAA3B,EAAqCH,qBAArC,CAFJ;AAGD,KAJD,CAlBc,CAuBd;AACD,GAxBQ,EAwBN,CAAC,GAAGX,IAAJ,EAAUJ,OAAV,EAAmBK,cAAnB,EAAmCF,QAAnC,CAxBM,CAAT;AAyBD,CAjCD;;AAmCA,eAAeD,0BAAf","sourcesContent":["import { useEffect, useRef } from 'react';\nimport throttle from 'lodash/throttle';\n\n/**\n * Gets the current scroll position\n * @function getCurrentScrollPosition\n * @param {HTMLElement} element The element to retrieve a scroll position from\n */\nconst getCurrentScrollPosition = (element) => {\n  const { scrollTop } = element;\n  return scrollTop;\n};\n\n/**\n * A throttled hook to execute a function upon scroll\n * @function useScrollPositionThrottled\n * @param {function} callback Callback function to call when a user scrolls\n * @param {HTMLElement} element The element to calculate the scroll position, the default is document\n * @param {array} deps Dependency array\n */\nconst useScrollPositionThrottled = (callback, element, deps = []) => {\n  const currentElement = element ? element : document.documentElement;\n  const scrollPosition = useRef(getCurrentScrollPosition(currentElement));\n\n  /**\n   * Handles determining positional values when scrolling\n   * @function handleScroll\n   */\n  useEffect(() => {\n    const handleScroll = () => {\n      scrollPosition.current = getCurrentScrollPosition(currentElement);\n      callback({\n        currentScrollPosition: scrollPosition.current,\n        atBottom:\n          currentElement.scrollHeight -\n            currentElement.scrollTop -\n            currentElement.clientHeight <\n          1000,\n      });\n    };\n    // Throttle the function to improve performance\n    const handleScrollThrottled = throttle(handleScroll, 200);\n    element\n      ? element.addEventListener('scroll', handleScrollThrottled)\n      : window.addEventListener('scroll', handleScrollThrottled);\n\n    return () => {\n      element\n        ? element.removeEventListener('scroll', handleScrollThrottled)\n        : window.removeEventListener('scroll', handleScrollThrottled);\n    };\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [...deps, element, currentElement, callback]);\n};\n\nexport default useScrollPositionThrottled;\n"]},"metadata":{},"sourceType":"module"}