{"ast":null,"code":"import notificationTypes from './notificationTypes';\nconst INITIAL_STATE = {\n  notifications: [],\n  unreadCount: 0,\n  fetching: false,\n  error: false\n};\n\nconst notificationReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case notificationTypes.ADD_NOTIFICATION:\n      {\n        return { ...state,\n          notifications: [action.payload, ...state.notifications],\n          unreadCount: state.unreadCount + 1\n        };\n      }\n\n    case notificationTypes.FETCH_NOTIFICATIONS_START:\n      {\n        return { ...state,\n          fetching: true,\n          error: false\n        };\n      }\n\n    case notificationTypes.FETCH_NOTIFICATIONS_FAILURE:\n      {\n        return { ...state,\n          fetching: false,\n          error: action.payload\n        };\n      }\n\n    case notificationTypes.FETCH_NOTIFICATIONS_SUCCESS:\n      {\n        const unreadCount = action.payload.filter(notification => notification.read === false).length;\n        return { ...state,\n          fetching: false,\n          error: false,\n          notifications: action.payload,\n          unreadCount\n        };\n      }\n\n    case notificationTypes.READ_NOTIFICATIONS:\n      {\n        const notifications = JSON.parse(JSON.stringify(state.notifications));\n        notifications.forEach(notification => notification.read = true);\n        return { ...state,\n          unreadCount: 0,\n          notifications\n        };\n      }\n\n    case notificationTypes.CLEAR_NOTIFICATIONS:\n      {\n        return { ...state,\n          unreadCount: 0,\n          notifications: []\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport default notificationReducer;","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/redux/notification/notificationReducer.js"],"names":["notificationTypes","INITIAL_STATE","notifications","unreadCount","fetching","error","notificationReducer","state","action","type","ADD_NOTIFICATION","payload","FETCH_NOTIFICATIONS_START","FETCH_NOTIFICATIONS_FAILURE","FETCH_NOTIFICATIONS_SUCCESS","filter","notification","read","length","READ_NOTIFICATIONS","JSON","parse","stringify","forEach","CLEAR_NOTIFICATIONS"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,aAAa,EAAE,EADK;AAEpBC,EAAAA,WAAW,EAAE,CAFO;AAGpBC,EAAAA,QAAQ,EAAE,KAHU;AAIpBC,EAAAA,KAAK,EAAE;AAJa,CAAtB;;AAOA,MAAMC,mBAAmB,GAAG,CAACC,KAAK,GAAGN,aAAT,EAAwBO,MAAxB,KAAmC;AAC7D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,iBAAiB,CAACU,gBAAvB;AAAyC;AACvC,eAAO,EACL,GAAGH,KADE;AAELL,UAAAA,aAAa,EAAE,CAACM,MAAM,CAACG,OAAR,EAAiB,GAAGJ,KAAK,CAACL,aAA1B,CAFV;AAGLC,UAAAA,WAAW,EAAEI,KAAK,CAACJ,WAAN,GAAoB;AAH5B,SAAP;AAKD;;AACD,SAAKH,iBAAiB,CAACY,yBAAvB;AAAkD;AAChD,eAAO,EACL,GAAGL,KADE;AAELH,UAAAA,QAAQ,EAAE,IAFL;AAGLC,UAAAA,KAAK,EAAE;AAHF,SAAP;AAKD;;AACD,SAAKL,iBAAiB,CAACa,2BAAvB;AAAoD;AAClD,eAAO,EACL,GAAGN,KADE;AAELH,UAAAA,QAAQ,EAAE,KAFL;AAGLC,UAAAA,KAAK,EAAEG,MAAM,CAACG;AAHT,SAAP;AAKD;;AACD,SAAKX,iBAAiB,CAACc,2BAAvB;AAAoD;AAClD,cAAMX,WAAW,GAAGK,MAAM,CAACG,OAAP,CAAeI,MAAf,CACjBC,YAAD,IAAkBA,YAAY,CAACC,IAAb,KAAsB,KADtB,EAElBC,MAFF;AAGA,eAAO,EACL,GAAGX,KADE;AAELH,UAAAA,QAAQ,EAAE,KAFL;AAGLC,UAAAA,KAAK,EAAE,KAHF;AAILH,UAAAA,aAAa,EAAEM,MAAM,CAACG,OAJjB;AAKLR,UAAAA;AALK,SAAP;AAOD;;AACD,SAAKH,iBAAiB,CAACmB,kBAAvB;AAA2C;AACzC,cAAMjB,aAAa,GAAGkB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAef,KAAK,CAACL,aAArB,CAAX,CAAtB;AACAA,QAAAA,aAAa,CAACqB,OAAd,CAAuBP,YAAD,IAAmBA,YAAY,CAACC,IAAb,GAAoB,IAA7D;AACA,eAAO,EACL,GAAGV,KADE;AAELJ,UAAAA,WAAW,EAAE,CAFR;AAGLD,UAAAA;AAHK,SAAP;AAKD;;AACD,SAAKF,iBAAiB,CAACwB,mBAAvB;AAA4C;AAC1C,eAAO,EACL,GAAGjB,KADE;AAELJ,UAAAA,WAAW,EAAE,CAFR;AAGLD,UAAAA,aAAa,EAAE;AAHV,SAAP;AAKD;;AACD;AAAS;AACP,eAAOK,KAAP;AACD;AApDH;AAsDD,CAvDD;;AAyDA,eAAeD,mBAAf","sourcesContent":["import notificationTypes from './notificationTypes';\n\nconst INITIAL_STATE = {\n  notifications: [],\n  unreadCount: 0,\n  fetching: false,\n  error: false,\n};\n\nconst notificationReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case notificationTypes.ADD_NOTIFICATION: {\n      return {\n        ...state,\n        notifications: [action.payload, ...state.notifications],\n        unreadCount: state.unreadCount + 1,\n      };\n    }\n    case notificationTypes.FETCH_NOTIFICATIONS_START: {\n      return {\n        ...state,\n        fetching: true,\n        error: false,\n      };\n    }\n    case notificationTypes.FETCH_NOTIFICATIONS_FAILURE: {\n      return {\n        ...state,\n        fetching: false,\n        error: action.payload,\n      };\n    }\n    case notificationTypes.FETCH_NOTIFICATIONS_SUCCESS: {\n      const unreadCount = action.payload.filter(\n        (notification) => notification.read === false\n      ).length;\n      return {\n        ...state,\n        fetching: false,\n        error: false,\n        notifications: action.payload,\n        unreadCount,\n      };\n    }\n    case notificationTypes.READ_NOTIFICATIONS: {\n      const notifications = JSON.parse(JSON.stringify(state.notifications));\n      notifications.forEach((notification) => (notification.read = true));\n      return {\n        ...state,\n        unreadCount: 0,\n        notifications,\n      };\n    }\n    case notificationTypes.CLEAR_NOTIFICATIONS: {\n      return {\n        ...state,\n        unreadCount: 0,\n        notifications: [],\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default notificationReducer;\n"]},"metadata":{},"sourceType":"module"}