{"ast":null,"code":"var _jsxFileName = \"/Users/jidesh/Documents/instaclone/client/src/components/PostDialog/PostDialog.test.js\";\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport PostDialog from './PostDialog';\nimport { storeFactory, checkProps, findByTestAttribute } from '../../utils/test/testUtils';\nconst INITIAL_PROPS = {\n  postId: '456',\n  username: 'test',\n  profileDispatch: jest.fn()\n};\n/**\n * Function to set up a wrapped component\n * @function setup\n * @param {object} initialState The initial state to be used for this setup\n * @returns {ShallowWrapper} The wrapped component\n */\n\nconst setup = (initialState = {\n  user: {\n    token: '123',\n    currentUser: {\n      username: 'test'\n    }\n  }\n}) => {\n  const store = storeFactory(initialState);\n  const wrapper = shallow( /*#__PURE__*/React.createElement(PostDialog, Object.assign({\n    store: store\n  }, INITIAL_PROPS, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }))).dive();\n  return wrapper;\n};\n\ntest('renders without error', () => {\n  const wrapper = setup().dive();\n  const component = findByTestAttribute(wrapper, 'component-post-dialog');\n  expect(component.exists()).toBeTruthy();\n});\ndescribe('redux props', () => {\n  test('has token piece of state as prop', () => {\n    const wrapper = setup();\n    expect(wrapper.props().token).toBe('123');\n  });\n  test('has currentUser piece of state as prop', () => {\n    const wrapper = setup();\n    expect(wrapper.props().currentUser).toEqual({\n      username: 'test'\n    });\n  });\n});\ntest('does not throw error with expected props', () => {\n  const result = checkProps(PostDialog, INITIAL_PROPS);\n  expect(result).toBeUndefined();\n});","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/components/PostDialog/PostDialog.test.js"],"names":["React","shallow","PostDialog","storeFactory","checkProps","findByTestAttribute","INITIAL_PROPS","postId","username","profileDispatch","jest","fn","setup","initialState","user","token","currentUser","store","wrapper","dive","test","component","expect","exists","toBeTruthy","describe","props","toBe","toEqual","result","toBeUndefined"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,SACEC,YADF,EAEEC,UAFF,EAGEC,mBAHF,QAIO,4BAJP;AAMA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,MAAM,EAAE,KADY;AAEpBC,EAAAA,QAAQ,EAAE,MAFU;AAGpBC,EAAAA,eAAe,EAAEC,IAAI,CAACC,EAAL;AAHG,CAAtB;AAMA;;;;;;;AAMA,MAAMC,KAAK,GAAG,CACZC,YAAY,GAAG;AAAEC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,WAAW,EAAE;AAAER,MAAAA,QAAQ,EAAE;AAAZ;AAA7B;AAAR,CADH,KAET;AACH,QAAMS,KAAK,GAAGd,YAAY,CAACU,YAAD,CAA1B;AACA,QAAMK,OAAO,GAAGjB,OAAO,eACrB,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAEgB;AAAnB,KAA8BX,aAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADqB,CAAP,CAEda,IAFc,EAAhB;AAGA,SAAOD,OAAP;AACD,CARD;;AAUAE,IAAI,CAAC,uBAAD,EAA0B,MAAM;AAClC,QAAMF,OAAO,GAAGN,KAAK,GAAGO,IAAR,EAAhB;AACA,QAAME,SAAS,GAAGhB,mBAAmB,CAACa,OAAD,EAAU,uBAAV,CAArC;AACAI,EAAAA,MAAM,CAACD,SAAS,CAACE,MAAV,EAAD,CAAN,CAA2BC,UAA3B;AACD,CAJG,CAAJ;AAMAC,QAAQ,CAAC,aAAD,EAAgB,MAAM;AAC5BL,EAAAA,IAAI,CAAC,kCAAD,EAAqC,MAAM;AAC7C,UAAMF,OAAO,GAAGN,KAAK,EAArB;AACAU,IAAAA,MAAM,CAACJ,OAAO,CAACQ,KAAR,GAAgBX,KAAjB,CAAN,CAA8BY,IAA9B,CAAmC,KAAnC;AACD,GAHG,CAAJ;AAKAP,EAAAA,IAAI,CAAC,wCAAD,EAA2C,MAAM;AACnD,UAAMF,OAAO,GAAGN,KAAK,EAArB;AACAU,IAAAA,MAAM,CAACJ,OAAO,CAACQ,KAAR,GAAgBV,WAAjB,CAAN,CAAoCY,OAApC,CAA4C;AAAEpB,MAAAA,QAAQ,EAAE;AAAZ,KAA5C;AACD,GAHG,CAAJ;AAID,CAVO,CAAR;AAYAY,IAAI,CAAC,0CAAD,EAA6C,MAAM;AACrD,QAAMS,MAAM,GAAGzB,UAAU,CAACF,UAAD,EAAaI,aAAb,CAAzB;AACAgB,EAAAA,MAAM,CAACO,MAAD,CAAN,CAAeC,aAAf;AACD,CAHG,CAAJ","sourcesContent":["import React from 'react';\nimport { shallow } from 'enzyme';\n\nimport PostDialog from './PostDialog';\n\nimport {\n  storeFactory,\n  checkProps,\n  findByTestAttribute\n} from '../../utils/test/testUtils';\n\nconst INITIAL_PROPS = {\n  postId: '456',\n  username: 'test',\n  profileDispatch: jest.fn()\n};\n\n/**\n * Function to set up a wrapped component\n * @function setup\n * @param {object} initialState The initial state to be used for this setup\n * @returns {ShallowWrapper} The wrapped component\n */\nconst setup = (\n  initialState = { user: { token: '123', currentUser: { username: 'test' } } }\n) => {\n  const store = storeFactory(initialState);\n  const wrapper = shallow(\n    <PostDialog store={store} {...INITIAL_PROPS} />\n  ).dive();\n  return wrapper;\n};\n\ntest('renders without error', () => {\n  const wrapper = setup().dive();\n  const component = findByTestAttribute(wrapper, 'component-post-dialog');\n  expect(component.exists()).toBeTruthy();\n});\n\ndescribe('redux props', () => {\n  test('has token piece of state as prop', () => {\n    const wrapper = setup();\n    expect(wrapper.props().token).toBe('123');\n  });\n\n  test('has currentUser piece of state as prop', () => {\n    const wrapper = setup();\n    expect(wrapper.props().currentUser).toEqual({ username: 'test' });\n  });\n});\n\ntest('does not throw error with expected props', () => {\n  const result = checkProps(PostDialog, INITIAL_PROPS);\n  expect(result).toBeUndefined();\n});\n"]},"metadata":{},"sourceType":"module"}