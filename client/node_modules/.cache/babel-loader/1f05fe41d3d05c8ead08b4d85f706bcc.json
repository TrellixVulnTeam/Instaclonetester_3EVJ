{"ast":null,"code":"var _jsxFileName = \"/Users/jidesh/Documents/instaclone/client/src/components/PostDialog/PostDialogCommentForm/PostDialogCommentForm.test.js\";\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport PostDialogCommentForm from './PostDialogCommentForm';\nimport { checkProps, findByTestAttribute } from '../../../utils/test/testUtils';\nimport { createComment } from '../../../services/commentService';\njest.mock('../../../services/commentService');\nconst INITIAL_PROPS = {\n  token: '123',\n  postId: '456',\n  commentsRef: {},\n  dialogDispatch: jest.fn(),\n  profileDispatch: jest.fn(),\n  replying: false\n};\n/**\n * Function to set up a wrapped component\n * @function setup\n * @param {object} additionalProps Additional props passed to the component\n * @returns {ShallowWrapper} The wrapped component\n */\n\nconst setup = (additionalProps = {}) => {\n  const wrapper = shallow( /*#__PURE__*/React.createElement(PostDialogCommentForm, Object.assign({}, INITIAL_PROPS, additionalProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  })));\n  return wrapper;\n};\n\ntest('renders without error', () => {\n  const wrapper = setup();\n  const component = findByTestAttribute(wrapper, 'component-post-dialog-add-comment');\n  expect(component.exists()).toBeTruthy();\n});\ntest('does not throw error with expected props', () => {\n  const result = checkProps(PostDialogCommentForm, INITIAL_PROPS);\n  expect(result).toBeUndefined();\n});\ndescribe('form input', () => {\n  beforeEach(() => {\n    createComment.mockClear();\n  });\n  test('does not attempt to create a comment when the input is empty', () => {\n    createComment.mockResolvedValue({});\n    const wrapper = setup();\n    const form = findByTestAttribute(wrapper, 'component-post-dialog-add-comment'); // Submitting the form\n\n    form.simulate('submit', {\n      preventDefault: jest.fn()\n    });\n    expect(createComment).toHaveBeenCalledTimes(0);\n  });\n  test('clears the input after a comment has been posted', async () => {\n    expect.assertions(1);\n    createComment.mockResolvedValue({\n      _id: '123',\n      message: 'test comment',\n      author: {\n        _id: '321',\n        username: 'test'\n      },\n      date: Date.now(),\n      postVotes: [],\n      comments: []\n    });\n    const wrapper = setup();\n    const form = findByTestAttribute(wrapper, 'component-post-dialog-add-comment'); // Finding and setting the input value before submitting the form\n\n    const input = findByTestAttribute(wrapper, 'component-add-comment-input');\n    input.simulate('change', {\n      target: {\n        value: 'test'\n      }\n    }); // Submitting the form\n\n    form.simulate('submit', {\n      preventDefault: jest.fn()\n    });\n    await expect(createComment).toHaveBeenCalledTimes(1);\n  });\n});","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/components/PostDialog/PostDialogCommentForm/PostDialogCommentForm.test.js"],"names":["React","shallow","PostDialogCommentForm","checkProps","findByTestAttribute","createComment","jest","mock","INITIAL_PROPS","token","postId","commentsRef","dialogDispatch","fn","profileDispatch","replying","setup","additionalProps","wrapper","test","component","expect","exists","toBeTruthy","result","toBeUndefined","describe","beforeEach","mockClear","mockResolvedValue","form","simulate","preventDefault","toHaveBeenCalledTimes","assertions","_id","message","author","username","date","Date","now","postVotes","comments","input","target","value"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { shallow } from 'enzyme';\n\nimport PostDialogCommentForm from './PostDialogCommentForm';\n\nimport { checkProps, findByTestAttribute } from '../../../utils/test/testUtils';\n\nimport { createComment } from '../../../services/commentService';\njest.mock('../../../services/commentService');\n\nconst INITIAL_PROPS = {\n  token: '123',\n  postId: '456',\n  commentsRef: {},\n  dialogDispatch: jest.fn(),\n  profileDispatch: jest.fn(),\n  replying: false\n};\n\n/**\n * Function to set up a wrapped component\n * @function setup\n * @param {object} additionalProps Additional props passed to the component\n * @returns {ShallowWrapper} The wrapped component\n */\nconst setup = (additionalProps = {}) => {\n  const wrapper = shallow(\n    <PostDialogCommentForm {...INITIAL_PROPS} {...additionalProps} />\n  );\n  return wrapper;\n};\n\ntest('renders without error', () => {\n  const wrapper = setup();\n  const component = findByTestAttribute(\n    wrapper,\n    'component-post-dialog-add-comment'\n  );\n\n  expect(component.exists()).toBeTruthy();\n});\n\ntest('does not throw error with expected props', () => {\n  const result = checkProps(PostDialogCommentForm, INITIAL_PROPS);\n\n  expect(result).toBeUndefined();\n});\n\ndescribe('form input', () => {\n  beforeEach(() => {\n    createComment.mockClear();\n  });\n\n  test('does not attempt to create a comment when the input is empty', () => {\n    createComment.mockResolvedValue({});\n    const wrapper = setup();\n    const form = findByTestAttribute(\n      wrapper,\n      'component-post-dialog-add-comment'\n    );\n\n    // Submitting the form\n    form.simulate('submit', { preventDefault: jest.fn() });\n\n    expect(createComment).toHaveBeenCalledTimes(0);\n  });\n\n  test('clears the input after a comment has been posted', async () => {\n    expect.assertions(1);\n    createComment.mockResolvedValue({\n      _id: '123',\n      message: 'test comment',\n      author: { _id: '321', username: 'test' },\n      date: Date.now(),\n      postVotes: [],\n      comments: []\n    });\n    const wrapper = setup();\n    const form = findByTestAttribute(\n      wrapper,\n      'component-post-dialog-add-comment'\n    );\n\n    // Finding and setting the input value before submitting the form\n    const input = findByTestAttribute(wrapper, 'component-add-comment-input');\n    input.simulate('change', { target: { value: 'test' } });\n\n    // Submitting the form\n    form.simulate('submit', { preventDefault: jest.fn() });\n\n    await expect(createComment).toHaveBeenCalledTimes(1);\n  });\n});\n"]},"metadata":{},"sourceType":"module"}