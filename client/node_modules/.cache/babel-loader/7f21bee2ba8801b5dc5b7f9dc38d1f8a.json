{"ast":null,"code":"var _jsxFileName = \"/Users/jidesh/Documents/instaclone/client/src/components/Notification/NotificationButton/NotificationButton.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { useTransition } from 'react-spring';\nimport { selectNotifications, selectNotificationState } from '../../../redux/notification/notificationSelectors';\nimport Icon from '../../Icon/Icon';\nimport NotificationPopup from './NotificationPopup/NotificationPopup';\nimport PopupCard from '../../PopupCard/PopupCard';\nimport NotificationFeed from '../NotificationFeed/NotificationFeed';\n\nconst NotificationButton = ({\n  notifications,\n  notificationState,\n  mobile,\n  icon\n}) => {\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [showNotificationPopup, setShowNotificationPopup] = useState(false);\n  const [notificationPopupTimeout, setShowNotificationPopupTimeout] = useState(null);\n  useEffect(() => {\n    if (notificationPopupTimeout) {\n      clearTimeout(notificationPopupTimeout);\n    }\n\n    if (notificationState.unreadCount > 0) {\n      !showNotificationPopup && setShowNotificationPopup(true);\n      setShowNotificationPopupTimeout(setTimeout(() => setShowNotificationPopup(false), 10000));\n    }\n  }, [notificationState.unreadCount]);\n  useEffect(() => {\n    if (showNotifications) {\n      clearTimeout(notificationPopupTimeout);\n      setShowNotificationPopup(false);\n    }\n  }, [showNotifications, notificationPopupTimeout]);\n  const transitions = useTransition(notificationState.unreadCount > 0 && showNotificationPopup ? {\n    notifications\n  } : false, null, {\n    from: {\n      transform: 'scale(0) translateX(-50%)',\n      opacity: 0\n    },\n    enter: {\n      transform: 'scale(1) translateX(-50%)',\n      opacity: 1\n    },\n    leave: {\n      transform: 'scale(0) translateX(-50%)',\n      opacity: 0\n    },\n    config: {\n      tension: 280,\n      friction: 20\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'relative',\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"notification-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: icon ? icon : showNotifications ? 'heart' : 'heart-outline',\n    className: notificationState.unreadCount > 0 ? 'icon--unread' : '',\n    onClick: () => !mobile && setShowNotifications(previous => !previous),\n    style: {\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }), transitions.map(({\n    item,\n    key,\n    props\n  }) => item && /*#__PURE__*/React.createElement(NotificationPopup, {\n    style: props,\n    notifications: item.notifications,\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }))), showNotifications && !mobile && /*#__PURE__*/React.createElement(PopupCard, {\n    hide: () => setShowNotifications(false),\n    leftAlign: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(NotificationFeed, {\n    setShowNotifications: setShowNotifications,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  })));\n};\n\nconst mapStateToProps = createStructuredSelector({\n  notifications: selectNotifications,\n  notificationState: selectNotificationState\n});\nexport default connect(mapStateToProps)(NotificationButton);","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/components/Notification/NotificationButton/NotificationButton.js"],"names":["React","useState","useEffect","connect","createStructuredSelector","useTransition","selectNotifications","selectNotificationState","Icon","NotificationPopup","PopupCard","NotificationFeed","NotificationButton","notifications","notificationState","mobile","icon","showNotifications","setShowNotifications","showNotificationPopup","setShowNotificationPopup","notificationPopupTimeout","setShowNotificationPopupTimeout","clearTimeout","unreadCount","setTimeout","transitions","from","transform","opacity","enter","leave","config","tension","friction","position","height","previous","cursor","map","item","key","props","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { useTransition } from 'react-spring';\n\nimport {\n  selectNotifications,\n  selectNotificationState,\n} from '../../../redux/notification/notificationSelectors';\n\nimport Icon from '../../Icon/Icon';\nimport NotificationPopup from './NotificationPopup/NotificationPopup';\nimport PopupCard from '../../PopupCard/PopupCard';\nimport NotificationFeed from '../NotificationFeed/NotificationFeed';\n\nconst NotificationButton = ({\n  notifications,\n  notificationState,\n  mobile,\n  icon,\n}) => {\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [showNotificationPopup, setShowNotificationPopup] = useState(false);\n  const [notificationPopupTimeout, setShowNotificationPopupTimeout] = useState(\n    null\n  );\n\n  useEffect(() => {\n    if (notificationPopupTimeout) {\n      clearTimeout(notificationPopupTimeout);\n    }\n    if (notificationState.unreadCount > 0) {\n      !showNotificationPopup && setShowNotificationPopup(true);\n      setShowNotificationPopupTimeout(\n        setTimeout(() => setShowNotificationPopup(false), 10000)\n      );\n    }\n  }, [notificationState.unreadCount]);\n\n  useEffect(() => {\n    if (showNotifications) {\n      clearTimeout(notificationPopupTimeout);\n      setShowNotificationPopup(false);\n    }\n  }, [showNotifications, notificationPopupTimeout]);\n\n  const transitions = useTransition(\n    notificationState.unreadCount > 0 && showNotificationPopup\n      ? { notifications }\n      : false,\n    null,\n    {\n      from: {\n        transform: 'scale(0) translateX(-50%)',\n        opacity: 0,\n      },\n      enter: {\n        transform: 'scale(1) translateX(-50%)',\n        opacity: 1,\n      },\n      leave: {\n        transform: 'scale(0) translateX(-50%)',\n        opacity: 0,\n      },\n      config: {\n        tension: 280,\n        friction: 20,\n      },\n    }\n  );\n\n  return (\n    <div style={{ position: 'relative', height: '100%' }}>\n      <button className=\"notification-button\">\n        <Icon\n          icon={icon ? icon : showNotifications ? 'heart' : 'heart-outline'}\n          className={notificationState.unreadCount > 0 ? 'icon--unread' : ''}\n          onClick={() =>\n            !mobile && setShowNotifications((previous) => !previous)\n          }\n          style={{ cursor: 'pointer' }}\n        />\n        {transitions.map(\n          ({ item, key, props }) =>\n            item && (\n              <NotificationPopup\n                style={props}\n                notifications={item.notifications}\n                key={key}\n              />\n            )\n        )}\n      </button>\n      {showNotifications && !mobile && (\n        <PopupCard hide={() => setShowNotifications(false)} leftAlign>\n          <NotificationFeed setShowNotifications={setShowNotifications} />\n        </PopupCard>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  notifications: selectNotifications,\n  notificationState: selectNotificationState,\n});\n\nexport default connect(mapStateToProps)(NotificationButton);\n"]},"metadata":{},"sourceType":"module"}