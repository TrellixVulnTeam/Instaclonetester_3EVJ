{"ast":null,"code":"import axios from 'axios';\n/**\n * Searches for a username that is similar to the one supplied\n * @function searchUsers\n * @param {string} username The username to search for\n * @param {number} offset The number of documents to skip\n * @returns {array} Array of users that match the criteria\n */\n\nexport const searchUsers = async (username, offset = 0) => {\n  try {\n    const response = await axios.get(`/api/user/${username}/${offset}/search`);\n    return response.data;\n  } catch (err) {\n    console.warn(err);\n  }\n};\n/**\n * Verifies a user's email\n * @function verifyUser\n * @param {string} authToken A user's auth token\n * @param {string} confirmationToken The token to verify an emailk\n */\n\nexport const confirmUser = async (authToken, confirmationToken) => {\n  try {\n    await axios.put('/api/user/confirm', {\n      token: confirmationToken\n    }, {\n      headers: {\n        authorization: authToken\n      }\n    });\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n/**\n * Uploads and changes a user's avatar\n * @function changeAvatar\n * @param {object} image The image to upload\n * @param {string} authToken A user's auth token\n * @returns {string} The new avatar url\n */\n\nexport const changeAvatar = async (image, authToken) => {\n  const formData = new FormData();\n  formData.append('image', image);\n\n  try {\n    const response = await axios.put('/api/user/avatar', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        authorization: authToken\n      }\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n/**\n * Removes a user's current avatar\n * @function removeAvatar\n * @param {string} authToken A user's auth token\n */\n\nexport const removeAvatar = async authToken => {\n  try {\n    axios.delete('/api/user/avatar', {\n      headers: {\n        authorization: authToken\n      }\n    });\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n/**\n * Updates the specified fields on the user\n * @function updateProfile\n * @param {string} authToken A user's auth token\n * @param  {object} updates An object of the fields to update on the user model\n * @returns {object} Updated user object\n */\n\nexport const updateProfile = async (authToken, updates) => {\n  try {\n    const response = await axios.put('/api/user', { ...updates\n    }, {\n      headers: {\n        authorization: authToken\n      }\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n/**\n * Gets random suggested users for the user to follow\n * @function getSuggestedUsers\n * @param {string} authToken A user's auth token\n * @returns {array} Array of users\n */\n\nexport const getSuggestedUsers = async (authToken, max) => {\n  try {\n    const response = await axios.get(`/api/user/suggested/${max || ''}`, {\n      headers: {\n        authorization: authToken\n      }\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/services/userService.js"],"names":["axios","searchUsers","username","offset","response","get","data","err","console","warn","confirmUser","authToken","confirmationToken","put","token","headers","authorization","Error","changeAvatar","image","formData","FormData","append","error","removeAvatar","delete","updateProfile","updates","getSuggestedUsers","max"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\n/**\n * Searches for a username that is similar to the one supplied\n * @function searchUsers\n * @param {string} username The username to search for\n * @param {number} offset The number of documents to skip\n * @returns {array} Array of users that match the criteria\n */\nexport const searchUsers = async (username, offset = 0) => {\n  try {\n    const response = await axios.get(`/api/user/${username}/${offset}/search`);\n    return response.data;\n  } catch (err) {\n    console.warn(err);\n  }\n};\n\n/**\n * Verifies a user's email\n * @function verifyUser\n * @param {string} authToken A user's auth token\n * @param {string} confirmationToken The token to verify an emailk\n */\nexport const confirmUser = async (authToken, confirmationToken) => {\n  try {\n    await axios.put(\n      '/api/user/confirm',\n      {\n        token: confirmationToken,\n      },\n      {\n        headers: {\n          authorization: authToken,\n        },\n      }\n    );\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n\n/**\n * Uploads and changes a user's avatar\n * @function changeAvatar\n * @param {object} image The image to upload\n * @param {string} authToken A user's auth token\n * @returns {string} The new avatar url\n */\nexport const changeAvatar = async (image, authToken) => {\n  const formData = new FormData();\n  formData.append('image', image);\n  try {\n    const response = await axios.put('/api/user/avatar', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        authorization: authToken,\n      },\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n\n/**\n * Removes a user's current avatar\n * @function removeAvatar\n * @param {string} authToken A user's auth token\n */\nexport const removeAvatar = async (authToken) => {\n  try {\n    axios.delete('/api/user/avatar', {\n      headers: {\n        authorization: authToken,\n      },\n    });\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n\n/**\n * Updates the specified fields on the user\n * @function updateProfile\n * @param {string} authToken A user's auth token\n * @param  {object} updates An object of the fields to update on the user model\n * @returns {object} Updated user object\n */\nexport const updateProfile = async (authToken, updates) => {\n  try {\n    const response = await axios.put(\n      '/api/user',\n      {\n        ...updates,\n      },\n      {\n        headers: {\n          authorization: authToken,\n        },\n      }\n    );\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n\n/**\n * Gets random suggested users for the user to follow\n * @function getSuggestedUsers\n * @param {string} authToken A user's auth token\n * @returns {array} Array of users\n */\nexport const getSuggestedUsers = async (authToken, max) => {\n  try {\n    const response = await axios.get(`/api/user/suggested/${max || ''}`, {\n      headers: {\n        authorization: authToken,\n      },\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err.response.data.error);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}