{"ast":null,"code":"import userTypes from './userTypes';\nimport { disconnectSocket } from '../socket/socketActions';\nimport { bookmarkPost as bookmark } from '../../services/postService';\nimport { registerUser, login, githubAuthentication } from '../../services/authenticationServices';\nimport { changeAvatar, removeAvatar, updateProfile } from '../../services/userService';\nexport const signOut = () => dispatch => {\n  localStorage.removeItem('token');\n  dispatch(disconnectSocket());\n  dispatch({\n    type: userTypes.SIGN_OUT\n  });\n};\nexport const signInSuccess = user => {\n  localStorage.setItem('token', user.token);\n  return {\n    type: userTypes.SIGN_IN_SUCCESS,\n    payload: user\n  };\n};\nexport const signInFailure = err => ({\n  type: userTypes.SIGN_IN_FAILURE,\n  payload: err\n});\nexport const signInStart = (usernameOrEmail, password, authToken) => async dispatch => {\n  try {\n    dispatch({\n      type: userTypes.SIGN_IN_START\n    });\n    const response = await login(usernameOrEmail, password, authToken);\n    dispatch(signInSuccess(response));\n  } catch (err) {\n    if (authToken) dispatch(signOut);\n    dispatch(signInFailure(err.message));\n  }\n};\nexport const githubSignInStart = code => async dispatch => {\n  try {\n    dispatch({\n      type: userTypes.GITHUB_SIGN_IN_START\n    });\n    const response = await githubAuthentication(code);\n    localStorage.setItem('token', response.token);\n    dispatch({\n      type: userTypes.GITHUB_SIGN_IN_SUCCESS,\n      payload: response\n    });\n  } catch (err) {\n    dispatch({\n      type: userTypes.GITHUB_SIGN_IN_FAILURE,\n      payload: err.message\n    });\n  }\n};\nexport const signUpStart = (email, fullName, username, password) => async dispatch => {\n  try {\n    dispatch({\n      type: userTypes.SIGN_IN_START\n    });\n    const response = await registerUser(email, fullName, username, password);\n    dispatch(signInStart(null, null, response.token));\n  } catch (err) {\n    dispatch({\n      type: userTypes.SIGN_UP_FAILURE,\n      payload: err.message\n    });\n  }\n};\nexport const bookmarkPost = (postId, authToken) => async dispatch => {\n  try {\n    const response = await bookmark(postId, authToken);\n    dispatch({\n      type: userTypes.BOOKMARK_POST,\n      payload: { ...response,\n        postId\n      }\n    });\n  } catch (err) {\n    return err;\n  }\n};\nexport const changeAvatarStart = (formData, authToken) => async dispatch => {\n  try {\n    dispatch({\n      type: userTypes.CHANGE_AVATAR_START\n    });\n    const response = await changeAvatar(formData, authToken);\n    dispatch({\n      type: userTypes.CHANGE_AVATAR_SUCCESS,\n      payload: response.avatar\n    });\n  } catch (err) {\n    dispatch({\n      type: userTypes.CHANGE_AVATAR_FAILURE,\n      payload: err.message\n    });\n  }\n};\nexport const removeAvatarStart = authToken => async dispatch => {\n  try {\n    dispatch({\n      type: userTypes.REMOVE_AVATAR_START\n    });\n    await removeAvatar(authToken);\n    dispatch({\n      type: userTypes.REMOVE_AVATAR_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: userTypes.REMOVE_AVATAR_FAILURE,\n      payload: err.message\n    });\n  }\n};\nexport const updateProfileStart = (authToken, updates) => async dispatch => {\n  try {\n    dispatch({\n      type: userTypes.UPDATE_PROFILE_START\n    });\n    const response = await updateProfile(authToken, updates);\n    dispatch({\n      type: userTypes.UPDATE_PROFILE_SUCCESS,\n      payload: response\n    });\n  } catch (err) {\n    dispatch({\n      type: userTypes.UPDATE_PROFILE_FAILURE,\n      payload: err.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/redux/user/userActions.js"],"names":["userTypes","disconnectSocket","bookmarkPost","bookmark","registerUser","login","githubAuthentication","changeAvatar","removeAvatar","updateProfile","signOut","dispatch","localStorage","removeItem","type","SIGN_OUT","signInSuccess","user","setItem","token","SIGN_IN_SUCCESS","payload","signInFailure","err","SIGN_IN_FAILURE","signInStart","usernameOrEmail","password","authToken","SIGN_IN_START","response","message","githubSignInStart","code","GITHUB_SIGN_IN_START","GITHUB_SIGN_IN_SUCCESS","GITHUB_SIGN_IN_FAILURE","signUpStart","email","fullName","username","SIGN_UP_FAILURE","postId","BOOKMARK_POST","changeAvatarStart","formData","CHANGE_AVATAR_START","CHANGE_AVATAR_SUCCESS","avatar","CHANGE_AVATAR_FAILURE","removeAvatarStart","REMOVE_AVATAR_START","REMOVE_AVATAR_SUCCESS","REMOVE_AVATAR_FAILURE","updateProfileStart","updates","UPDATE_PROFILE_START","UPDATE_PROFILE_SUCCESS","UPDATE_PROFILE_FAILURE"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AAEA,SAASC,gBAAT,QAAiC,yBAAjC;AACA,SAASC,YAAY,IAAIC,QAAzB,QAAyC,4BAAzC;AACA,SACEC,YADF,EAEEC,KAFF,EAGEC,oBAHF,QAIO,uCAJP;AAKA,SACEC,YADF,EAEEC,YAFF,EAGEC,aAHF,QAIO,4BAJP;AAMA,OAAO,MAAMC,OAAO,GAAG,MAAOC,QAAD,IAAc;AACzCC,EAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AACAF,EAAAA,QAAQ,CAACV,gBAAgB,EAAjB,CAAR;AACAU,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEd,SAAS,CAACe;AAAlB,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMC,aAAa,GAAIC,IAAD,IAAU;AACrCL,EAAAA,YAAY,CAACM,OAAb,CAAqB,OAArB,EAA8BD,IAAI,CAACE,KAAnC;AACA,SAAO;AACLL,IAAAA,IAAI,EAAEd,SAAS,CAACoB,eADX;AAELC,IAAAA,OAAO,EAAEJ;AAFJ,GAAP;AAID,CANM;AAQP,OAAO,MAAMK,aAAa,GAAIC,GAAD,KAAU;AACrCT,EAAAA,IAAI,EAAEd,SAAS,CAACwB,eADqB;AAErCH,EAAAA,OAAO,EAAEE;AAF4B,CAAV,CAAtB;AAKP,OAAO,MAAME,WAAW,GAAG,CAACC,eAAD,EAAkBC,QAAlB,EAA4BC,SAA5B,KAA0C,MACnEjB,QADmE,IAEhE;AACH,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEd,SAAS,CAAC6B;AAAlB,KAAD,CAAR;AACA,UAAMC,QAAQ,GAAG,MAAMzB,KAAK,CAACqB,eAAD,EAAkBC,QAAlB,EAA4BC,SAA5B,CAA5B;AACAjB,IAAAA,QAAQ,CAACK,aAAa,CAACc,QAAD,CAAd,CAAR;AACD,GAJD,CAIE,OAAOP,GAAP,EAAY;AACZ,QAAIK,SAAJ,EAAejB,QAAQ,CAACD,OAAD,CAAR;AACfC,IAAAA,QAAQ,CAACW,aAAa,CAACC,GAAG,CAACQ,OAAL,CAAd,CAAR;AACD;AACF,CAXM;AAaP,OAAO,MAAMC,iBAAiB,GAAIC,IAAD,IAAU,MAAOtB,QAAP,IAAoB;AAC7D,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEd,SAAS,CAACkC;AAAlB,KAAD,CAAR;AACA,UAAMJ,QAAQ,GAAG,MAAMxB,oBAAoB,CAAC2B,IAAD,CAA3C;AACArB,IAAAA,YAAY,CAACM,OAAb,CAAqB,OAArB,EAA8BY,QAAQ,CAACX,KAAvC;AACAR,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEd,SAAS,CAACmC,sBAAlB;AAA0Cd,MAAAA,OAAO,EAAES;AAAnD,KAAD,CAAR;AACD,GALD,CAKE,OAAOP,GAAP,EAAY;AACZZ,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEd,SAAS,CAACoC,sBAAlB;AAA0Cf,MAAAA,OAAO,EAAEE,GAAG,CAACQ;AAAvD,KAAD,CAAR;AACD;AACF,CATM;AAWP,OAAO,MAAMM,WAAW,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,EAA4Bb,QAA5B,KAAyC,MAClEhB,QADkE,IAE/D;AACH,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEd,SAAS,CAAC6B;AAAlB,KAAD,CAAR;AACA,UAAMC,QAAQ,GAAG,MAAM1B,YAAY,CAACkC,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,EAA4Bb,QAA5B,CAAnC;AACAhB,IAAAA,QAAQ,CAACc,WAAW,CAAC,IAAD,EAAO,IAAP,EAAaK,QAAQ,CAACX,KAAtB,CAAZ,CAAR;AACD,GAJD,CAIE,OAAOI,GAAP,EAAY;AACZZ,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEd,SAAS,CAACyC,eAAlB;AAAmCpB,MAAAA,OAAO,EAAEE,GAAG,CAACQ;AAAhD,KAAD,CAAR;AACD;AACF,CAVM;AAYP,OAAO,MAAM7B,YAAY,GAAG,CAACwC,MAAD,EAASd,SAAT,KAAuB,MAAOjB,QAAP,IAAoB;AACrE,MAAI;AACF,UAAMmB,QAAQ,GAAG,MAAM3B,QAAQ,CAACuC,MAAD,EAASd,SAAT,CAA/B;AACAjB,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEd,SAAS,CAAC2C,aADT;AAEPtB,MAAAA,OAAO,EAAE,EAAE,GAAGS,QAAL;AAAeY,QAAAA;AAAf;AAFF,KAAD,CAAR;AAID,GAND,CAME,OAAOnB,GAAP,EAAY;AACZ,WAAOA,GAAP;AACD;AACF,CAVM;AAYP,OAAO,MAAMqB,iBAAiB,GAAG,CAACC,QAAD,EAAWjB,SAAX,KAAyB,MAAOjB,QAAP,IAAoB;AAC5E,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEd,SAAS,CAAC8C;AAAlB,KAAD,CAAR;AACA,UAAMhB,QAAQ,GAAG,MAAMvB,YAAY,CAACsC,QAAD,EAAWjB,SAAX,CAAnC;AACAjB,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEd,SAAS,CAAC+C,qBADT;AAEP1B,MAAAA,OAAO,EAAES,QAAQ,CAACkB;AAFX,KAAD,CAAR;AAID,GAPD,CAOE,OAAOzB,GAAP,EAAY;AACZZ,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEd,SAAS,CAACiD,qBADT;AAEP5B,MAAAA,OAAO,EAAEE,GAAG,CAACQ;AAFN,KAAD,CAAR;AAID;AACF,CAdM;AAgBP,OAAO,MAAMmB,iBAAiB,GAAItB,SAAD,IAAe,MAAOjB,QAAP,IAAoB;AAClE,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEd,SAAS,CAACmD;AAAlB,KAAD,CAAR;AACA,UAAM3C,YAAY,CAACoB,SAAD,CAAlB;AACAjB,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEd,SAAS,CAACoD;AAAlB,KAAD,CAAR;AACD,GAJD,CAIE,OAAO7B,GAAP,EAAY;AACZZ,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEd,SAAS,CAACqD,qBAAlB;AAAyChC,MAAAA,OAAO,EAAEE,GAAG,CAACQ;AAAtD,KAAD,CAAR;AACD;AACF,CARM;AAUP,OAAO,MAAMuB,kBAAkB,GAAG,CAAC1B,SAAD,EAAY2B,OAAZ,KAAwB,MAAO5C,QAAP,IAAoB;AAC5E,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEd,SAAS,CAACwD;AAAlB,KAAD,CAAR;AACA,UAAM1B,QAAQ,GAAG,MAAMrB,aAAa,CAACmB,SAAD,EAAY2B,OAAZ,CAApC;AACA5C,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEd,SAAS,CAACyD,sBAAlB;AAA0CpC,MAAAA,OAAO,EAAES;AAAnD,KAAD,CAAR;AACD,GAJD,CAIE,OAAOP,GAAP,EAAY;AACZZ,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEd,SAAS,CAAC0D,sBAAlB;AAA0CrC,MAAAA,OAAO,EAAEE,GAAG,CAACQ;AAAvD,KAAD,CAAR;AACD;AACF,CARM","sourcesContent":["import userTypes from './userTypes';\n\nimport { disconnectSocket } from '../socket/socketActions';\nimport { bookmarkPost as bookmark } from '../../services/postService';\nimport {\n  registerUser,\n  login,\n  githubAuthentication,\n} from '../../services/authenticationServices';\nimport {\n  changeAvatar,\n  removeAvatar,\n  updateProfile,\n} from '../../services/userService';\n\nexport const signOut = () => (dispatch) => {\n  localStorage.removeItem('token');\n  dispatch(disconnectSocket());\n  dispatch({ type: userTypes.SIGN_OUT });\n};\n\nexport const signInSuccess = (user) => {\n  localStorage.setItem('token', user.token);\n  return {\n    type: userTypes.SIGN_IN_SUCCESS,\n    payload: user,\n  };\n};\n\nexport const signInFailure = (err) => ({\n  type: userTypes.SIGN_IN_FAILURE,\n  payload: err,\n});\n\nexport const signInStart = (usernameOrEmail, password, authToken) => async (\n  dispatch\n) => {\n  try {\n    dispatch({ type: userTypes.SIGN_IN_START });\n    const response = await login(usernameOrEmail, password, authToken);\n    dispatch(signInSuccess(response));\n  } catch (err) {\n    if (authToken) dispatch(signOut);\n    dispatch(signInFailure(err.message));\n  }\n};\n\nexport const githubSignInStart = (code) => async (dispatch) => {\n  try {\n    dispatch({ type: userTypes.GITHUB_SIGN_IN_START });\n    const response = await githubAuthentication(code);\n    localStorage.setItem('token', response.token);\n    dispatch({ type: userTypes.GITHUB_SIGN_IN_SUCCESS, payload: response });\n  } catch (err) {\n    dispatch({ type: userTypes.GITHUB_SIGN_IN_FAILURE, payload: err.message });\n  }\n};\n\nexport const signUpStart = (email, fullName, username, password) => async (\n  dispatch\n) => {\n  try {\n    dispatch({ type: userTypes.SIGN_IN_START });\n    const response = await registerUser(email, fullName, username, password);\n    dispatch(signInStart(null, null, response.token));\n  } catch (err) {\n    dispatch({ type: userTypes.SIGN_UP_FAILURE, payload: err.message });\n  }\n};\n\nexport const bookmarkPost = (postId, authToken) => async (dispatch) => {\n  try {\n    const response = await bookmark(postId, authToken);\n    dispatch({\n      type: userTypes.BOOKMARK_POST,\n      payload: { ...response, postId },\n    });\n  } catch (err) {\n    return err;\n  }\n};\n\nexport const changeAvatarStart = (formData, authToken) => async (dispatch) => {\n  try {\n    dispatch({ type: userTypes.CHANGE_AVATAR_START });\n    const response = await changeAvatar(formData, authToken);\n    dispatch({\n      type: userTypes.CHANGE_AVATAR_SUCCESS,\n      payload: response.avatar,\n    });\n  } catch (err) {\n    dispatch({\n      type: userTypes.CHANGE_AVATAR_FAILURE,\n      payload: err.message,\n    });\n  }\n};\n\nexport const removeAvatarStart = (authToken) => async (dispatch) => {\n  try {\n    dispatch({ type: userTypes.REMOVE_AVATAR_START });\n    await removeAvatar(authToken);\n    dispatch({ type: userTypes.REMOVE_AVATAR_SUCCESS });\n  } catch (err) {\n    dispatch({ type: userTypes.REMOVE_AVATAR_FAILURE, payload: err.message });\n  }\n};\n\nexport const updateProfileStart = (authToken, updates) => async (dispatch) => {\n  try {\n    dispatch({ type: userTypes.UPDATE_PROFILE_START });\n    const response = await updateProfile(authToken, updates);\n    dispatch({ type: userTypes.UPDATE_PROFILE_SUCCESS, payload: response });\n  } catch (err) {\n    dispatch({ type: userTypes.UPDATE_PROFILE_FAILURE, payload: err.message });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}