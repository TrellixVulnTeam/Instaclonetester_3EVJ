{"ast":null,"code":"import { postDialogCommentFormReducer, INITIAL_STATE } from './postDialogCommentFormReducer';\ntest('returns expected state when `POST_COMMENT_START` is passed', () => {\n  const newState = postDialogCommentFormReducer(INITIAL_STATE, {\n    type: 'POST_COMMENT_START'\n  });\n  expect(newState).toEqual({ ...INITIAL_STATE,\n    posting: true\n  });\n});\ntest('returns expected state when `POST_COMMENT_FAILURE` is passed', () => {\n  const newState = postDialogCommentFormReducer({ ...INITIAL_STATE,\n    posting: true\n  }, {\n    type: 'POST_COMMENT_FAILURE',\n    payload: 'error'\n  });\n  expect(newState).toEqual({ ...INITIAL_STATE,\n    posting: false,\n    error: 'error'\n  });\n});\ntest('returns expected state and calls dispatch when `POST_COMMENT_SUCCESS` is called', () => {\n  const mockDispatch = jest.fn();\n  const newState = postDialogCommentFormReducer(INITIAL_STATE, {\n    type: 'POST_COMMENT_SUCCESS',\n    payload: {\n      comment: 'test',\n      dispatch: mockDispatch\n    }\n  });\n  expect(newState).toEqual(INITIAL_STATE);\n  expect(mockDispatch).toHaveBeenCalledTimes(1);\n});\ntest('returns expected state and calls dispatch when `POST_COMMENT_REPLY_SUCCESS` is called', () => {\n  const mockDispatch = jest.fn();\n  const newState = postDialogCommentFormReducer(INITIAL_STATE, {\n    type: 'POST_COMMENT_REPLY_SUCCESS',\n    payload: {\n      comment: 'test',\n      dispatch: mockDispatch,\n      parentCommentId: '123'\n    }\n  });\n  expect(newState).toEqual(INITIAL_STATE);\n  expect(mockDispatch).toHaveBeenCalledTimes(1);\n});\ntest('returns expected state when `SET_COMMENT` is passed', () => {\n  const newState = postDialogCommentFormReducer(INITIAL_STATE, {\n    type: 'SET_COMMENT',\n    payload: 'test comment'\n  });\n  expect(newState).toEqual({ ...INITIAL_STATE,\n    comment: 'test comment'\n  });\n});\ntest('throws error when an invalid action is passed', () => {\n  expect(() => postDialogCommentFormReducer(INITIAL_STATE, {\n    type: 'test'\n  })).toThrow();\n});","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/components/PostDialog/PostDialogCommentForm/postDialogCommentFormReducer.test.js"],"names":["postDialogCommentFormReducer","INITIAL_STATE","test","newState","type","expect","toEqual","posting","payload","error","mockDispatch","jest","fn","comment","dispatch","toHaveBeenCalledTimes","parentCommentId","toThrow"],"mappings":"AAAA,SACEA,4BADF,EAEEC,aAFF,QAGO,gCAHP;AAKAC,IAAI,CAAC,4DAAD,EAA+D,MAAM;AACvE,QAAMC,QAAQ,GAAGH,4BAA4B,CAACC,aAAD,EAAgB;AAC3DG,IAAAA,IAAI,EAAE;AADqD,GAAhB,CAA7C;AAIAC,EAAAA,MAAM,CAACF,QAAD,CAAN,CAAiBG,OAAjB,CAAyB,EAAE,GAAGL,aAAL;AAAoBM,IAAAA,OAAO,EAAE;AAA7B,GAAzB;AACD,CANG,CAAJ;AAQAL,IAAI,CAAC,8DAAD,EAAiE,MAAM;AACzE,QAAMC,QAAQ,GAAGH,4BAA4B,CAC3C,EACE,GAAGC,aADL;AAEEM,IAAAA,OAAO,EAAE;AAFX,GAD2C,EAK3C;AAAEH,IAAAA,IAAI,EAAE,sBAAR;AAAgCI,IAAAA,OAAO,EAAE;AAAzC,GAL2C,CAA7C;AAQAH,EAAAA,MAAM,CAACF,QAAD,CAAN,CAAiBG,OAAjB,CAAyB,EACvB,GAAGL,aADoB;AAEvBM,IAAAA,OAAO,EAAE,KAFc;AAGvBE,IAAAA,KAAK,EAAE;AAHgB,GAAzB;AAKD,CAdG,CAAJ;AAgBAP,IAAI,CAAC,iFAAD,EAAoF,MAAM;AAC5F,QAAMQ,YAAY,GAAGC,IAAI,CAACC,EAAL,EAArB;AACA,QAAMT,QAAQ,GAAGH,4BAA4B,CAACC,aAAD,EAAgB;AAC3DG,IAAAA,IAAI,EAAE,sBADqD;AAE3DI,IAAAA,OAAO,EAAE;AAAEK,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,QAAQ,EAAEJ;AAA7B;AAFkD,GAAhB,CAA7C;AAKAL,EAAAA,MAAM,CAACF,QAAD,CAAN,CAAiBG,OAAjB,CAAyBL,aAAzB;AACAI,EAAAA,MAAM,CAACK,YAAD,CAAN,CAAqBK,qBAArB,CAA2C,CAA3C;AACD,CATG,CAAJ;AAWAb,IAAI,CAAC,uFAAD,EAA0F,MAAM;AAClG,QAAMQ,YAAY,GAAGC,IAAI,CAACC,EAAL,EAArB;AACA,QAAMT,QAAQ,GAAGH,4BAA4B,CAACC,aAAD,EAAgB;AAC3DG,IAAAA,IAAI,EAAE,4BADqD;AAE3DI,IAAAA,OAAO,EAAE;AAAEK,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,QAAQ,EAAEJ,YAA7B;AAA2CM,MAAAA,eAAe,EAAE;AAA5D;AAFkD,GAAhB,CAA7C;AAKAX,EAAAA,MAAM,CAACF,QAAD,CAAN,CAAiBG,OAAjB,CAAyBL,aAAzB;AACAI,EAAAA,MAAM,CAACK,YAAD,CAAN,CAAqBK,qBAArB,CAA2C,CAA3C;AACD,CATG,CAAJ;AAWAb,IAAI,CAAC,qDAAD,EAAwD,MAAM;AAChE,QAAMC,QAAQ,GAAGH,4BAA4B,CAACC,aAAD,EAAgB;AAC3DG,IAAAA,IAAI,EAAE,aADqD;AAE3DI,IAAAA,OAAO,EAAE;AAFkD,GAAhB,CAA7C;AAKAH,EAAAA,MAAM,CAACF,QAAD,CAAN,CAAiBG,OAAjB,CAAyB,EAAE,GAAGL,aAAL;AAAoBY,IAAAA,OAAO,EAAE;AAA7B,GAAzB;AACD,CAPG,CAAJ;AASAX,IAAI,CAAC,+CAAD,EAAkD,MAAM;AAC1DG,EAAAA,MAAM,CAAC,MACLL,4BAA4B,CAACC,aAAD,EAAgB;AAAEG,IAAAA,IAAI,EAAE;AAAR,GAAhB,CADxB,CAAN,CAEEa,OAFF;AAGD,CAJG,CAAJ","sourcesContent":["import {\n  postDialogCommentFormReducer,\n  INITIAL_STATE\n} from './postDialogCommentFormReducer';\n\ntest('returns expected state when `POST_COMMENT_START` is passed', () => {\n  const newState = postDialogCommentFormReducer(INITIAL_STATE, {\n    type: 'POST_COMMENT_START'\n  });\n\n  expect(newState).toEqual({ ...INITIAL_STATE, posting: true });\n});\n\ntest('returns expected state when `POST_COMMENT_FAILURE` is passed', () => {\n  const newState = postDialogCommentFormReducer(\n    {\n      ...INITIAL_STATE,\n      posting: true\n    },\n    { type: 'POST_COMMENT_FAILURE', payload: 'error' }\n  );\n\n  expect(newState).toEqual({\n    ...INITIAL_STATE,\n    posting: false,\n    error: 'error'\n  });\n});\n\ntest('returns expected state and calls dispatch when `POST_COMMENT_SUCCESS` is called', () => {\n  const mockDispatch = jest.fn();\n  const newState = postDialogCommentFormReducer(INITIAL_STATE, {\n    type: 'POST_COMMENT_SUCCESS',\n    payload: { comment: 'test', dispatch: mockDispatch }\n  });\n\n  expect(newState).toEqual(INITIAL_STATE);\n  expect(mockDispatch).toHaveBeenCalledTimes(1);\n});\n\ntest('returns expected state and calls dispatch when `POST_COMMENT_REPLY_SUCCESS` is called', () => {\n  const mockDispatch = jest.fn();\n  const newState = postDialogCommentFormReducer(INITIAL_STATE, {\n    type: 'POST_COMMENT_REPLY_SUCCESS',\n    payload: { comment: 'test', dispatch: mockDispatch, parentCommentId: '123' }\n  });\n\n  expect(newState).toEqual(INITIAL_STATE);\n  expect(mockDispatch).toHaveBeenCalledTimes(1);\n});\n\ntest('returns expected state when `SET_COMMENT` is passed', () => {\n  const newState = postDialogCommentFormReducer(INITIAL_STATE, {\n    type: 'SET_COMMENT',\n    payload: 'test comment'\n  });\n\n  expect(newState).toEqual({ ...INITIAL_STATE, comment: 'test comment' });\n});\n\ntest('throws error when an invalid action is passed', () => {\n  expect(() =>\n    postDialogCommentFormReducer(INITIAL_STATE, { type: 'test' })\n  ).toThrow();\n});\n"]},"metadata":{},"sourceType":"module"}