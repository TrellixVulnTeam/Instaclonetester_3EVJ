{"ast":null,"code":"import feedTypes from './feedTypes';\nconst INITIAL_STATE = {\n  posts: [],\n  fetching: true,\n  error: false,\n  hasMore: false\n};\n\nconst feedReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case feedTypes.FETCH_POSTS_START:\n      {\n        return { ...state,\n          fetching: true,\n          error: false\n        };\n      }\n\n    case feedTypes.FETCH_POSTS_SUCCESS:\n      {\n        return { ...state,\n          fetching: false,\n          error: false,\n          posts: [...state.posts, ...action.payload],\n          hasMore: action.payload.length === 5\n        };\n      }\n\n    case feedTypes.FETCH_POSTS_FAILURE:\n      {\n        return { ...state,\n          fetching: false,\n          error: action.payload\n        };\n      }\n\n    case feedTypes.ADD_POST:\n      {\n        return { ...state,\n          posts: [action.payload, ...state.posts]\n        };\n      }\n\n    case feedTypes.REMOVE_POST:\n      {\n        const posts = JSON.parse(JSON.stringify(state.posts));\n        const postIndex = posts.findIndex(post => post._id === action.payload);\n\n        if (postIndex) {\n          posts.splice(postIndex, 1);\n        }\n\n        return { ...state,\n          posts\n        };\n      }\n\n    case feedTypes.CLEAR_POSTS:\n      {\n        return { ...state,\n          posts: []\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport default feedReducer;","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/redux/feed/feedReducer.js"],"names":["feedTypes","INITIAL_STATE","posts","fetching","error","hasMore","feedReducer","state","action","type","FETCH_POSTS_START","FETCH_POSTS_SUCCESS","payload","length","FETCH_POSTS_FAILURE","ADD_POST","REMOVE_POST","JSON","parse","stringify","postIndex","findIndex","post","_id","splice","CLEAR_POSTS"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,KAAK,EAAE,EADa;AAEpBC,EAAAA,QAAQ,EAAE,IAFU;AAGpBC,EAAAA,KAAK,EAAE,KAHa;AAIpBC,EAAAA,OAAO,EAAE;AAJW,CAAtB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,aAAT,EAAwBO,MAAxB,KAAmC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,SAAS,CAACU,iBAAf;AAAkC;AAChC,eAAO,EACL,GAAGH,KADE;AAELJ,UAAAA,QAAQ,EAAE,IAFL;AAGLC,UAAAA,KAAK,EAAE;AAHF,SAAP;AAKD;;AACD,SAAKJ,SAAS,CAACW,mBAAf;AAAoC;AAClC,eAAO,EACL,GAAGJ,KADE;AAELJ,UAAAA,QAAQ,EAAE,KAFL;AAGLC,UAAAA,KAAK,EAAE,KAHF;AAILF,UAAAA,KAAK,EAAE,CAAC,GAAGK,KAAK,CAACL,KAAV,EAAiB,GAAGM,MAAM,CAACI,OAA3B,CAJF;AAKLP,UAAAA,OAAO,EAAEG,MAAM,CAACI,OAAP,CAAeC,MAAf,KAA0B;AAL9B,SAAP;AAOD;;AACD,SAAKb,SAAS,CAACc,mBAAf;AAAoC;AAClC,eAAO,EACL,GAAGP,KADE;AAELJ,UAAAA,QAAQ,EAAE,KAFL;AAGLC,UAAAA,KAAK,EAAEI,MAAM,CAACI;AAHT,SAAP;AAKD;;AACD,SAAKZ,SAAS,CAACe,QAAf;AAAyB;AACvB,eAAO,EACL,GAAGR,KADE;AAELL,UAAAA,KAAK,EAAE,CAACM,MAAM,CAACI,OAAR,EAAiB,GAAGL,KAAK,CAACL,KAA1B;AAFF,SAAP;AAID;;AACD,SAAKF,SAAS,CAACgB,WAAf;AAA4B;AAC1B,cAAMd,KAAK,GAAGe,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeZ,KAAK,CAACL,KAArB,CAAX,CAAd;AACA,cAAMkB,SAAS,GAAGlB,KAAK,CAACmB,SAAN,CAAiBC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaf,MAAM,CAACI,OAA9C,CAAlB;;AACA,YAAIQ,SAAJ,EAAe;AACblB,UAAAA,KAAK,CAACsB,MAAN,CAAaJ,SAAb,EAAwB,CAAxB;AACD;;AACD,eAAO,EACL,GAAGb,KADE;AAELL,UAAAA;AAFK,SAAP;AAID;;AACD,SAAKF,SAAS,CAACyB,WAAf;AAA4B;AAC1B,eAAO,EACL,GAAGlB,KADE;AAELL,UAAAA,KAAK,EAAE;AAFF,SAAP;AAID;;AACD;AAAS;AACP,eAAOK,KAAP;AACD;AAjDH;AAmDD,CApDD;;AAsDA,eAAeD,WAAf","sourcesContent":["import feedTypes from './feedTypes';\n\nconst INITIAL_STATE = {\n  posts: [],\n  fetching: true,\n  error: false,\n  hasMore: false,\n};\n\nconst feedReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case feedTypes.FETCH_POSTS_START: {\n      return {\n        ...state,\n        fetching: true,\n        error: false,\n      };\n    }\n    case feedTypes.FETCH_POSTS_SUCCESS: {\n      return {\n        ...state,\n        fetching: false,\n        error: false,\n        posts: [...state.posts, ...action.payload],\n        hasMore: action.payload.length === 5,\n      };\n    }\n    case feedTypes.FETCH_POSTS_FAILURE: {\n      return {\n        ...state,\n        fetching: false,\n        error: action.payload,\n      };\n    }\n    case feedTypes.ADD_POST: {\n      return {\n        ...state,\n        posts: [action.payload, ...state.posts],\n      };\n    }\n    case feedTypes.REMOVE_POST: {\n      const posts = JSON.parse(JSON.stringify(state.posts));\n      const postIndex = posts.findIndex((post) => post._id === action.payload);\n      if (postIndex) {\n        posts.splice(postIndex, 1);\n      }\n      return {\n        ...state,\n        posts,\n      };\n    }\n    case feedTypes.CLEAR_POSTS: {\n      return {\n        ...state,\n        posts: [],\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default feedReducer;\n"]},"metadata":{},"sourceType":"module"}