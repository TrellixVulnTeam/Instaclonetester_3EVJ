{"ast":null,"code":"var _jsxFileName = \"/Users/jidesh/Documents/instaclone/client/src/components/Notification/NotificationFeed/NotificationFeed.js\";\nimport React, { useEffect, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { Link } from 'react-router-dom';\nimport { selectNotifications, selectNotificationState } from '../../../redux/notification/notificationSelectors';\nimport { selectToken } from '../../../redux/user/userSelectors';\nimport { fetchNotificationsStart, readNotificationsStart, clearNotifications } from '../../../redux/notification/notificationActions';\nimport UserCard from '../../UserCard/UserCard';\nimport UsersListSkeleton from '../../UsersList/UsersListSkeleton/UsersListSkeleton';\nimport Icon from '../../Icon/Icon';\nimport FollowButton from '../../Button/FollowButton/FollowButton';\nimport Divider from '../../Divider/Divider';\nimport Linkify from 'linkifyjs/react';\nimport * as linkify from 'linkifyjs';\nimport mention from 'linkifyjs/plugins/mention';\nimport { linkifyOptions } from '../../../utils/linkifyUtils';\nmention(linkify);\n\nconst NotificationFeed = ({\n  notifications,\n  fetchNotificationsStart,\n  readNotificationsStart,\n  notificationState,\n  clearNotifications,\n  setShowNotifications,\n  token\n}) => {\n  useEffect(() => {\n    (async function () {\n      await fetchNotificationsStart(token);\n      await readNotificationsStart(token);\n    })();\n\n    return () => {\n      clearNotifications();\n    };\n  }, [fetchNotificationsStart, readNotificationsStart, clearNotifications, token]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, notificationState.fetching ? /*#__PURE__*/React.createElement(UsersListSkeleton, {\n    style: {\n      height: '7rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }) : notifications.length > 0 ? notifications.map((notification, idx) => {\n    const userCardProps = {\n      username: notification.sender.username,\n      avatar: notification.sender.avatar,\n      subTextDark: true,\n      token: token,\n      date: notification.date,\n      style: {\n        minHeight: '7rem',\n        padding: '1rem 1.5rem'\n      }\n    };\n    let userCardChild = null;\n\n    switch (notification.notificationType) {\n      case 'follow':\n        {\n          userCardProps.subText = 'started following you.';\n          userCardChild = /*#__PURE__*/React.createElement(FollowButton, {\n            username: notification.sender.username,\n            avatar: notification.sender.avatar,\n            following: notification.isFollowing,\n            userId: notification.sender._id,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }\n          });\n          break;\n        }\n\n      case 'like':\n        {\n          userCardProps.subText = 'liked your photo.';\n          userCardChild = /*#__PURE__*/React.createElement(Link, {\n            to: `/post/${notification.notificationData.postId}`,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"img\", {\n            src: notification.notificationData.image,\n            style: {\n              display: 'flex',\n              filter: notification.notificationData.filter\n            },\n            onClick: () => setShowNotifications && setShowNotifications(false),\n            alt: \"liked post\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 19\n            }\n          }));\n          break;\n        }\n\n      default:\n        {\n          userCardProps.subText = /*#__PURE__*/React.createElement(Linkify, {\n            options: linkifyOptions,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }\n          }, `${notification.notificationType === 'comment' ? 'commented:' : 'mentioned you in a comment:'} ${notification.notificationData.message}`);\n          userCardChild = /*#__PURE__*/React.createElement(Link, {\n            to: `/post/${notification.notificationData.postId}`,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"img\", {\n            src: notification.notificationData.image,\n            style: {\n              display: 'flex',\n              filter: notification.notificationData.filter\n            },\n            onClick: () => setShowNotifications && setShowNotifications(false),\n            alt: \"post commented on\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }\n          }));\n        }\n    }\n\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(UserCard, Object.assign({}, userCardProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 15\n      }\n    }), userCardChild && userCardChild), notifications.length - 1 > idx && /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 50\n      }\n    }));\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup-card__empty\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    className: \"icon--larger\",\n    icon: \"heart-circle-outline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"heading-2 font-medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, \"Activity On Your Posts\"), /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"heading-4 font-medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, \"When someone likes or comments on your posts, you'll see them here.\")));\n};\n\nconst mapStateToProps = createStructuredSelector({\n  notifications: selectNotifications,\n  notificationState: selectNotificationState,\n  token: selectToken\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchNotificationsStart: authToken => dispatch(fetchNotificationsStart(authToken)),\n  readNotificationsStart: authToken => dispatch(readNotificationsStart(authToken)),\n  clearNotifications: () => dispatch(clearNotifications())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NotificationFeed);","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/components/Notification/NotificationFeed/NotificationFeed.js"],"names":["React","useEffect","Fragment","connect","createStructuredSelector","Link","selectNotifications","selectNotificationState","selectToken","fetchNotificationsStart","readNotificationsStart","clearNotifications","UserCard","UsersListSkeleton","Icon","FollowButton","Divider","Linkify","linkify","mention","linkifyOptions","NotificationFeed","notifications","notificationState","setShowNotifications","token","fetching","height","length","map","notification","idx","userCardProps","username","sender","avatar","subTextDark","date","style","minHeight","padding","userCardChild","notificationType","subText","isFollowing","_id","notificationData","postId","image","display","filter","message","mapStateToProps","mapDispatchToProps","dispatch","authToken"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,SACEC,mBADF,EAEEC,uBAFF,QAGO,mDAHP;AAIA,SAASC,WAAT,QAA4B,mCAA5B;AAEA,SACEC,uBADF,EAEEC,sBAFF,EAGEC,kBAHF,QAIO,iDAJP;AAMA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,iBAAP,MAA8B,qDAA9B;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,SAASC,cAAT,QAA+B,6BAA/B;AAEAD,OAAO,CAACD,OAAD,CAAP;;AAEA,MAAMG,gBAAgB,GAAG,CAAC;AACxBC,EAAAA,aADwB;AAExBb,EAAAA,uBAFwB;AAGxBC,EAAAA,sBAHwB;AAIxBa,EAAAA,iBAJwB;AAKxBZ,EAAAA,kBALwB;AAMxBa,EAAAA,oBANwB;AAOxBC,EAAAA;AAPwB,CAAD,KAQnB;AACJxB,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,kBAAkB;AACjB,YAAMQ,uBAAuB,CAACgB,KAAD,CAA7B;AACA,YAAMf,sBAAsB,CAACe,KAAD,CAA5B;AACD,KAHD;;AAKA,WAAO,MAAM;AACXd,MAAAA,kBAAkB;AACnB,KAFD;AAGD,GATQ,EASN,CACDF,uBADC,EAEDC,sBAFC,EAGDC,kBAHC,EAIDc,KAJC,CATM,CAAT;AAgBA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,iBAAiB,CAACG,QAAlB,gBACC,oBAAC,iBAAD;AAAmB,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAEGL,aAAa,CAACM,MAAd,GAAuB,CAAvB,GACFN,aAAa,CAACO,GAAd,CAAkB,CAACC,YAAD,EAAeC,GAAf,KAAuB;AACvC,UAAMC,aAAa,GAAG;AACpBC,MAAAA,QAAQ,EAAEH,YAAY,CAACI,MAAb,CAAoBD,QADV;AAEpBE,MAAAA,MAAM,EAAEL,YAAY,CAACI,MAAb,CAAoBC,MAFR;AAGpBC,MAAAA,WAAW,EAAE,IAHO;AAIpBX,MAAAA,KAAK,EAAEA,KAJa;AAKpBY,MAAAA,IAAI,EAAEP,YAAY,CAACO,IALC;AAMpBC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE,MAAb;AAAqBC,QAAAA,OAAO,EAAE;AAA9B;AANa,KAAtB;AAQA,QAAIC,aAAa,GAAG,IAApB;;AAEA,YAAQX,YAAY,CAACY,gBAArB;AACE,WAAK,QAAL;AAAe;AACbV,UAAAA,aAAa,CAACW,OAAd,GAAwB,wBAAxB;AACAF,UAAAA,aAAa,gBACX,oBAAC,YAAD;AACE,YAAA,QAAQ,EAAEX,YAAY,CAACI,MAAb,CAAoBD,QADhC;AAEE,YAAA,MAAM,EAAEH,YAAY,CAACI,MAAb,CAAoBC,MAF9B;AAGE,YAAA,SAAS,EAAEL,YAAY,CAACc,WAH1B;AAIE,YAAA,MAAM,EAAEd,YAAY,CAACI,MAAb,CAAoBW,GAJ9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQA;AACD;;AACD,WAAK,MAAL;AAAa;AACXb,UAAAA,aAAa,CAACW,OAAd,GAAwB,mBAAxB;AACAF,UAAAA,aAAa,gBACX,oBAAC,IAAD;AAAM,YAAA,EAAE,EAAG,SAAQX,YAAY,CAACgB,gBAAb,CAA8BC,MAAO,EAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACE;AACE,YAAA,GAAG,EAAEjB,YAAY,CAACgB,gBAAb,CAA8BE,KADrC;AAEE,YAAA,KAAK,EAAE;AACLC,cAAAA,OAAO,EAAE,MADJ;AAELC,cAAAA,MAAM,EAAEpB,YAAY,CAACgB,gBAAb,CAA8BI;AAFjC,aAFT;AAME,YAAA,OAAO,EAAE,MACP1B,oBAAoB,IAAIA,oBAAoB,CAAC,KAAD,CAPhD;AASE,YAAA,GAAG,EAAC,YATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADF;AAeA;AACD;;AACD;AAAS;AACPQ,UAAAA,aAAa,CAACW,OAAd,gBACE,oBAAC,OAAD;AAAS,YAAA,OAAO,EAAEvB,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAoC,GAClCU,YAAY,CAACY,gBAAb,KAAkC,SAAlC,GACI,YADJ,GAEI,6BACL,IAAGZ,YAAY,CAACgB,gBAAb,CAA8BK,OAAQ,EAJ1C,CADF;AAOAV,UAAAA,aAAa,gBACX,oBAAC,IAAD;AAAM,YAAA,EAAE,EAAG,SAAQX,YAAY,CAACgB,gBAAb,CAA8BC,MAAO,EAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACE;AACE,YAAA,GAAG,EAAEjB,YAAY,CAACgB,gBAAb,CAA8BE,KADrC;AAEE,YAAA,KAAK,EAAE;AACLC,cAAAA,OAAO,EAAE,MADJ;AAELC,cAAAA,MAAM,EAAEpB,YAAY,CAACgB,gBAAb,CAA8BI;AAFjC,aAFT;AAME,YAAA,OAAO,EAAE,MACP1B,oBAAoB,IAAIA,oBAAoB,CAAC,KAAD,CAPhD;AASE,YAAA,GAAG,EAAC,mBATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CADF;AAeD;AAvDH;;AA0DA,wBACE;AAAI,MAAA,GAAG,EAAEO,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,QAAD,oBAAcC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACGS,aAAa,IAAIA,aADpB,CADF,EAIGnB,aAAa,CAACM,MAAd,GAAuB,CAAvB,GAA2BG,GAA3B,iBAAkC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJrC,CADF;AAQD,GA7ED,CADE,gBAgFF;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,cAAhB;AAA+B,IAAA,IAAI,EAAC,sBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAI,IAAA,SAAS,EAAC,uBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAFF,eAGE;AAAI,IAAA,SAAS,EAAC,uBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EAHF,CAnFJ,CADF;AA8FD,CAvHD;;AAyHA,MAAMqB,eAAe,GAAGhD,wBAAwB,CAAC;AAC/CkB,EAAAA,aAAa,EAAEhB,mBADgC;AAE/CiB,EAAAA,iBAAiB,EAAEhB,uBAF4B;AAG/CkB,EAAAA,KAAK,EAAEjB;AAHwC,CAAD,CAAhD;;AAMA,MAAM6C,kBAAkB,GAAIC,QAAD,KAAe;AACxC7C,EAAAA,uBAAuB,EAAG8C,SAAD,IACvBD,QAAQ,CAAC7C,uBAAuB,CAAC8C,SAAD,CAAxB,CAF8B;AAGxC7C,EAAAA,sBAAsB,EAAG6C,SAAD,IACtBD,QAAQ,CAAC5C,sBAAsB,CAAC6C,SAAD,CAAvB,CAJ8B;AAKxC5C,EAAAA,kBAAkB,EAAE,MAAM2C,QAAQ,CAAC3C,kBAAkB,EAAnB;AALM,CAAf,CAA3B;;AAQA,eAAeR,OAAO,CAACiD,eAAD,EAAkBC,kBAAlB,CAAP,CAA6ChC,gBAA7C,CAAf","sourcesContent":["import React, { useEffect, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { Link } from 'react-router-dom';\n\nimport {\n  selectNotifications,\n  selectNotificationState,\n} from '../../../redux/notification/notificationSelectors';\nimport { selectToken } from '../../../redux/user/userSelectors';\n\nimport {\n  fetchNotificationsStart,\n  readNotificationsStart,\n  clearNotifications,\n} from '../../../redux/notification/notificationActions';\n\nimport UserCard from '../../UserCard/UserCard';\nimport UsersListSkeleton from '../../UsersList/UsersListSkeleton/UsersListSkeleton';\nimport Icon from '../../Icon/Icon';\nimport FollowButton from '../../Button/FollowButton/FollowButton';\nimport Divider from '../../Divider/Divider';\nimport Linkify from 'linkifyjs/react';\nimport * as linkify from 'linkifyjs';\nimport mention from 'linkifyjs/plugins/mention';\n\nimport { linkifyOptions } from '../../../utils/linkifyUtils';\n\nmention(linkify);\n\nconst NotificationFeed = ({\n  notifications,\n  fetchNotificationsStart,\n  readNotificationsStart,\n  notificationState,\n  clearNotifications,\n  setShowNotifications,\n  token,\n}) => {\n  useEffect(() => {\n    (async function () {\n      await fetchNotificationsStart(token);\n      await readNotificationsStart(token);\n    })();\n\n    return () => {\n      clearNotifications();\n    };\n  }, [\n    fetchNotificationsStart,\n    readNotificationsStart,\n    clearNotifications,\n    token,\n  ]);\n\n  return (\n    <Fragment>\n      {notificationState.fetching ? (\n        <UsersListSkeleton style={{ height: '7rem' }} />\n      ) : notifications.length > 0 ? (\n        notifications.map((notification, idx) => {\n          const userCardProps = {\n            username: notification.sender.username,\n            avatar: notification.sender.avatar,\n            subTextDark: true,\n            token: token,\n            date: notification.date,\n            style: { minHeight: '7rem', padding: '1rem 1.5rem' },\n          };\n          let userCardChild = null;\n\n          switch (notification.notificationType) {\n            case 'follow': {\n              userCardProps.subText = 'started following you.';\n              userCardChild = (\n                <FollowButton\n                  username={notification.sender.username}\n                  avatar={notification.sender.avatar}\n                  following={notification.isFollowing}\n                  userId={notification.sender._id}\n                />\n              );\n              break;\n            }\n            case 'like': {\n              userCardProps.subText = 'liked your photo.';\n              userCardChild = (\n                <Link to={`/post/${notification.notificationData.postId}`}>\n                  <img\n                    src={notification.notificationData.image}\n                    style={{\n                      display: 'flex',\n                      filter: notification.notificationData.filter,\n                    }}\n                    onClick={() =>\n                      setShowNotifications && setShowNotifications(false)\n                    }\n                    alt=\"liked post\"\n                  />\n                </Link>\n              );\n              break;\n            }\n            default: {\n              userCardProps.subText = (\n                <Linkify options={linkifyOptions}>{`${\n                  notification.notificationType === 'comment'\n                    ? 'commented:'\n                    : 'mentioned you in a comment:'\n                } ${notification.notificationData.message}`}</Linkify>\n              );\n              userCardChild = (\n                <Link to={`/post/${notification.notificationData.postId}`}>\n                  <img\n                    src={notification.notificationData.image}\n                    style={{\n                      display: 'flex',\n                      filter: notification.notificationData.filter,\n                    }}\n                    onClick={() =>\n                      setShowNotifications && setShowNotifications(false)\n                    }\n                    alt=\"post commented on\"\n                  />\n                </Link>\n              );\n            }\n          }\n\n          return (\n            <li key={idx}>\n              <UserCard {...userCardProps}>\n                {userCardChild && userCardChild}\n              </UserCard>\n              {notifications.length - 1 > idx && <Divider />}\n            </li>\n          );\n        })\n      ) : (\n        <div className=\"popup-card__empty\">\n          <Icon className=\"icon--larger\" icon=\"heart-circle-outline\" />\n          <h2 className=\"heading-2 font-medium\">Activity On Your Posts</h2>\n          <h4 className=\"heading-4 font-medium\">\n            When someone likes or comments on your posts, you'll see them here.\n          </h4>\n        </div>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  notifications: selectNotifications,\n  notificationState: selectNotificationState,\n  token: selectToken,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchNotificationsStart: (authToken) =>\n    dispatch(fetchNotificationsStart(authToken)),\n  readNotificationsStart: (authToken) =>\n    dispatch(readNotificationsStart(authToken)),\n  clearNotifications: () => dispatch(clearNotifications()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NotificationFeed);\n"]},"metadata":{},"sourceType":"module"}