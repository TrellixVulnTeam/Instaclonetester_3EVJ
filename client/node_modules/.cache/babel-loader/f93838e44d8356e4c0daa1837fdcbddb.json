{"ast":null,"code":"export const INITIAL_STATE = {\n  fetching: true,\n  error: false,\n  replying: false,\n  localStateComments: new Set(),\n  data: {\n    _id: null,\n    image: '',\n    caption: '',\n    author: null,\n    date: null,\n    postVotes: [],\n    comments: [],\n    commentReplies: []\n  }\n};\nexport const postDialogReducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_POST_FAILURE':\n      {\n        return { ...state,\n          fetching: false,\n          error: action.payload\n        };\n      }\n\n    case 'FETCH_POST_SUCCESS':\n      {\n        const {\n          comments = [],\n          commentCount = 0\n        } = action.payload.commentData || {};\n        return { ...state,\n          fetching: false,\n          error: false,\n          data: { ...action.payload,\n            commentReplies: [],\n            comments,\n            commentCount\n          }\n        };\n      }\n\n    case 'VOTE_POST':\n      {\n        const {\n          currentUser,\n          postId,\n          dispatch\n        } = action.payload;\n        let postVotes = JSON.parse(JSON.stringify(state.data.postVotes));\n        const liked = !!postVotes.find(vote => vote.author === currentUser._id);\n\n        if (!liked) {\n          postVotes.push({\n            author: currentUser._id\n          });\n        } else {\n          postVotes = postVotes.filter(vote => vote.author !== currentUser._id);\n        }\n\n        dispatch && dispatch({\n          type: 'SET_POST_VOTES_COUNT',\n          payload: {\n            postId,\n            votes: postVotes.length\n          }\n        });\n        return { ...state,\n          data: { ...state.data,\n            postVotes\n          }\n        };\n      }\n\n    case 'VOTE_COMMENT':\n      {\n        const {\n          commentId,\n          currentUser\n        } = action.payload;\n        const comments = JSON.parse(JSON.stringify(state.data.comments));\n        const commentIndex = comments.findIndex(comment => comment._id === commentId);\n        const liked = !!comments[commentIndex].commentVotes.find(vote => vote.author === currentUser._id);\n\n        if (!liked) {\n          comments[commentIndex].commentVotes.push({\n            author: currentUser._id\n          });\n        } else {\n          comments[commentIndex].commentVotes = comments[commentIndex].commentVotes.filter(vote => vote.author !== currentUser._id);\n        }\n\n        return { ...state,\n          data: { ...state.data,\n            comments\n          }\n        };\n      }\n\n    case 'ADD_COMMENT':\n      {\n        let comment = action.payload;\n        let localStateComments = new Set(state.localStateComments);\n\n        if (!Array.isArray(comment)) {\n          localStateComments.add(comment._id);\n          comment = [comment];\n        }\n\n        return { ...state,\n          localStateComments,\n          data: { ...state.data,\n            comments: [...state.data.comments, ...comment]\n          }\n        };\n      }\n\n    case 'REMOVE_COMMENT':\n      {\n        const commentId = action.payload;\n        const localStateComments = new Set(state.localStateComments);\n        localStateComments.has(commentId) && localStateComments.delete(commentId);\n        return { ...state,\n          data: { ...state.data,\n            localStateComments,\n            comments: state.data.comments.filter(comment => comment._id !== commentId),\n            commentCount: state.data.commentCount - 1\n          }\n        };\n      }\n\n    case 'ADD_COMMENT_REPLY':\n      {\n        let {\n          comment: newComment,\n          parentCommentId\n        } = action.payload;\n        const comments = JSON.parse(JSON.stringify(state.data.comments));\n        const parentCommentIndex = comments.findIndex(comment => comment._id === parentCommentId);\n\n        if (!Array.isArray(newComment)) {\n          const parentComment = comments[parentCommentIndex]; // Add a single comment object into an array\n          // so we can spread it into the commentReplies array\n\n          newComment = [newComment];\n          parentComment.commentReplies = parentComment.commentReplies ? parentComment.commentReplies + 1 : 1;\n        }\n\n        return { ...state,\n          data: { ...state.data,\n            comments,\n            commentReplies: [...state.data.commentReplies, ...newComment]\n          }\n        };\n      }\n\n    case 'REMOVE_COMMENT_REPLY':\n      {\n        const {\n          commentReplyId,\n          parentCommentId\n        } = action.payload;\n        const comments = JSON.parse(JSON.stringify(state.data.comments));\n        const commentIndex = comments.findIndex(comment => comment._id === parentCommentId);\n        comments[commentIndex].commentReplies -= 1;\n        return { ...state,\n          data: { ...state.data,\n            comments,\n            commentReplies: state.data.commentReplies.filter(commentReply => commentReply._id !== commentReplyId)\n          }\n        };\n      }\n\n    case 'VOTE_COMMENT_REPLY':\n      {\n        const {\n          commentReplyId,\n          currentUser\n        } = action.payload;\n        const commentReplies = JSON.parse(JSON.stringify(state.data.commentReplies));\n        const commentReplyIndex = state.data.commentReplies.findIndex(commentReply => commentReply._id === commentReplyId);\n        const liked = !!commentReplies[commentReplyIndex].commentReplyVotes.find(vote => vote.author === currentUser._id);\n\n        if (!liked) {\n          commentReplies[commentReplyIndex].commentReplyVotes.push({\n            author: currentUser._id\n          });\n        } else {\n          commentReplies[commentReplyIndex].commentReplyVotes = commentReplies[commentReplyIndex].commentReplyVotes.filter(vote => vote.author !== currentUser._id);\n        }\n\n        return { ...state,\n          data: { ...state.data,\n            commentReplies\n          }\n        };\n      }\n\n    case 'SET_REPLYING':\n      {\n        const {\n          username,\n          commentId\n        } = action.payload || {};\n\n        if (username && commentId) {\n          // Avoid re-rendering if commentId and commentUser are the same as previous state\n          if (state.replying.commentId === commentId && state.replying.commentUser === username) {\n            return state;\n          }\n\n          return { ...state,\n            replying: {\n              commentUser: username,\n              commentId\n            }\n          };\n        } else {\n          return { ...state,\n            replying: false\n          };\n        }\n      }\n\n    default:\n      {\n        throw new Error(`Invalid action type '${action.type}' passed to postDialogReducer.`);\n      }\n  }\n};","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/components/PostDialog/postDialogReducer.js"],"names":["INITIAL_STATE","fetching","error","replying","localStateComments","Set","data","_id","image","caption","author","date","postVotes","comments","commentReplies","postDialogReducer","state","action","type","payload","commentCount","commentData","currentUser","postId","dispatch","JSON","parse","stringify","liked","find","vote","push","filter","votes","length","commentId","commentIndex","findIndex","comment","commentVotes","Array","isArray","add","has","delete","newComment","parentCommentId","parentCommentIndex","parentComment","commentReplyId","commentReply","commentReplyIndex","commentReplyVotes","username","commentUser","Error"],"mappings":"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","sourcesContent":["export const INITIAL_STATE = {\n  fetching: true,\n  error: false,\n  replying: false,\n  localStateComments: new Set(),\n  data: {\n    _id: null,\n    image: '',\n    caption: '',\n    author: null,\n    date: null,\n    postVotes: [],\n    comments: [],\n    commentReplies: [],\n  },\n};\n\nexport const postDialogReducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_POST_FAILURE': {\n      return { ...state, fetching: false, error: action.payload };\n    }\n    case 'FETCH_POST_SUCCESS': {\n      const { comments = [], commentCount = 0 } =\n        action.payload.commentData || {};\n      return {\n        ...state,\n        fetching: false,\n        error: false,\n        data: {\n          ...action.payload,\n          commentReplies: [],\n          comments,\n          commentCount,\n        },\n      };\n    }\n    case 'VOTE_POST': {\n      const { currentUser, postId, dispatch } = action.payload;\n      let postVotes = JSON.parse(JSON.stringify(state.data.postVotes));\n      const liked = !!postVotes.find((vote) => vote.author === currentUser._id);\n      if (!liked) {\n        postVotes.push({ author: currentUser._id });\n      } else {\n        postVotes = postVotes.filter((vote) => vote.author !== currentUser._id);\n      }\n      dispatch &&\n        dispatch({\n          type: 'SET_POST_VOTES_COUNT',\n          payload: { postId, votes: postVotes.length },\n        });\n\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          postVotes,\n        },\n      };\n    }\n    case 'VOTE_COMMENT': {\n      const { commentId, currentUser } = action.payload;\n      const comments = JSON.parse(JSON.stringify(state.data.comments));\n      const commentIndex = comments.findIndex(\n        (comment) => comment._id === commentId\n      );\n      const liked = !!comments[commentIndex].commentVotes.find(\n        (vote) => vote.author === currentUser._id\n      );\n\n      if (!liked) {\n        comments[commentIndex].commentVotes.push({ author: currentUser._id });\n      } else {\n        comments[commentIndex].commentVotes = comments[\n          commentIndex\n        ].commentVotes.filter((vote) => vote.author !== currentUser._id);\n      }\n\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          comments,\n        },\n      };\n    }\n    case 'ADD_COMMENT': {\n      let comment = action.payload;\n      let localStateComments = new Set(state.localStateComments);\n      if (!Array.isArray(comment)) {\n        localStateComments.add(comment._id);\n        comment = [comment];\n      }\n      return {\n        ...state,\n        localStateComments,\n        data: {\n          ...state.data,\n          comments: [...state.data.comments, ...comment],\n        },\n      };\n    }\n    case 'REMOVE_COMMENT': {\n      const commentId = action.payload;\n      const localStateComments = new Set(state.localStateComments);\n      localStateComments.has(commentId) && localStateComments.delete(commentId);\n\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          localStateComments,\n          comments: state.data.comments.filter(\n            (comment) => comment._id !== commentId\n          ),\n          commentCount: state.data.commentCount - 1,\n        },\n      };\n    }\n    case 'ADD_COMMENT_REPLY': {\n      let { comment: newComment, parentCommentId } = action.payload;\n      const comments = JSON.parse(JSON.stringify(state.data.comments));\n      const parentCommentIndex = comments.findIndex(\n        (comment) => comment._id === parentCommentId\n      );\n      if (!Array.isArray(newComment)) {\n        const parentComment = comments[parentCommentIndex];\n        // Add a single comment object into an array\n        // so we can spread it into the commentReplies array\n        newComment = [newComment];\n        parentComment.commentReplies = parentComment.commentReplies\n          ? parentComment.commentReplies + 1\n          : 1;\n      }\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          comments,\n          commentReplies: [...state.data.commentReplies, ...newComment],\n        },\n      };\n    }\n    case 'REMOVE_COMMENT_REPLY': {\n      const { commentReplyId, parentCommentId } = action.payload;\n      const comments = JSON.parse(JSON.stringify(state.data.comments));\n      const commentIndex = comments.findIndex(\n        (comment) => comment._id === parentCommentId\n      );\n      comments[commentIndex].commentReplies -= 1;\n\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          comments,\n          commentReplies: state.data.commentReplies.filter(\n            (commentReply) => commentReply._id !== commentReplyId\n          ),\n        },\n      };\n    }\n    case 'VOTE_COMMENT_REPLY': {\n      const { commentReplyId, currentUser } = action.payload;\n      const commentReplies = JSON.parse(\n        JSON.stringify(state.data.commentReplies)\n      );\n      const commentReplyIndex = state.data.commentReplies.findIndex(\n        (commentReply) => commentReply._id === commentReplyId\n      );\n      const liked = !!commentReplies[commentReplyIndex].commentReplyVotes.find(\n        (vote) => vote.author === currentUser._id\n      );\n      if (!liked) {\n        commentReplies[commentReplyIndex].commentReplyVotes.push({\n          author: currentUser._id,\n        });\n      } else {\n        commentReplies[commentReplyIndex].commentReplyVotes = commentReplies[\n          commentReplyIndex\n        ].commentReplyVotes.filter((vote) => vote.author !== currentUser._id);\n      }\n\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          commentReplies,\n        },\n      };\n    }\n    case 'SET_REPLYING': {\n      const { username, commentId } = action.payload || {};\n      if (username && commentId) {\n        // Avoid re-rendering if commentId and commentUser are the same as previous state\n        if (\n          state.replying.commentId === commentId &&\n          state.replying.commentUser === username\n        ) {\n          return state;\n        }\n        return { ...state, replying: { commentUser: username, commentId } };\n      } else {\n        return { ...state, replying: false };\n      }\n    }\n    default: {\n      throw new Error(\n        `Invalid action type '${action.type}' passed to postDialogReducer.`\n      );\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}