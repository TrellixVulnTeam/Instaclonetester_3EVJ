{"ast":null,"code":"var _jsxFileName = \"/Users/jidesh/Documents/instaclone/client/src/components/PostDialog/PostDialogStats/PostDialogStats.js\";\nimport React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport { bookmarkPost } from '../../../redux/user/userActions';\nimport { showAlert } from '../../../redux/alert/alertActions';\nimport { showModal, hideModal } from '../../../redux/modal/modalActions';\nimport { formatDate } from '../../../utils/timeUtils';\nimport { votePost } from '../../../services/postService';\nimport Icon from '../../Icon/Icon';\nimport PulsatingIcon from '../../Icon/PulsatingIcon/PulsatingIcon';\nimport LoginCard from '../../LoginCard/LoginCard';\n\nconst PostDialogStats = ({\n  currentUser,\n  post,\n  token,\n  dispatch,\n  profileDispatch,\n  bookmarkPost,\n  showAlert,\n  showModal,\n  hideModal,\n  simple\n}) => {\n  const ref = useRef();\n\n  const handleClick = async () => {\n    if (!currentUser) {\n      return showModal({\n        children: /*#__PURE__*/React.createElement(LoginCard, {\n          onClick: () => hideModal('Card/Card'),\n          modal: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 21\n          }\n        }),\n        style: {\n          gridColumn: 'center-start / center-end',\n          justifySelf: 'center',\n          width: '40rem'\n        }\n      }, 'Card/Card');\n    } // Dispatch the action immediately to avoid a delay between the user's click and something happening\n\n\n    dispatch({\n      type: 'VOTE_POST',\n      payload: {\n        currentUser,\n        postId: post._id,\n        dispatch: profileDispatch\n      }\n    });\n\n    try {\n      await votePost(post._id, token);\n    } catch (err) {\n      showAlert('Could not vote on the post.', () => handleClick());\n    }\n  };\n\n  const postDialogStatsClassNames = classNames({\n    'post-dialog__stats': true,\n    'post-dialog__stats--simple': simple\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref,\n    className: postDialogStatsClassNames,\n    \"data-test\": \"component-post-dialog-stats\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-dialog__actions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, currentUser ? /*#__PURE__*/React.createElement(PulsatingIcon, {\n    toggle: !!post.postVotes.find(vote => vote.author === currentUser._id),\n    elementRef: ref,\n    constantProps: {\n      onClick: () => handleClick()\n    },\n    toggledProps: [{\n      className: 'icon--button post-dialog__like color-red',\n      icon: 'heart'\n    }, {\n      className: 'icon--button post-dialog__like',\n      icon: 'heart-outline'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(Icon, {\n    onClick: () => handleClick(),\n    icon: \"heart-outline\",\n    className: \"icon--button post-dialog__like\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Icon, {\n    onClick: () => currentUser && document.querySelector('.add-comment__input').focus(),\n    className: \"icon--button\",\n    icon: \"chatbubble-outline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Icon, {\n    className: \"icon--button\",\n    icon: \"paper-plane-outline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Icon, {\n    className: \"icon--button\",\n    onClick: () => bookmarkPost(post._id, token),\n    icon: currentUser && currentUser.bookmarks ? !!currentUser.bookmarks.find(bookmark => bookmark.post === post._id) ? 'bookmark' : 'bookmark-outline' : 'bookmark-outline',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"heading-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, post.postVotes.length === 0 ? /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, \"Be the first to\", ' ', /*#__PURE__*/React.createElement(\"b\", {\n    style: {\n      cursor: 'pointer'\n    },\n    onClick: event => {\n      event.nativeEvent.stopImmediatePropagation();\n      handleClick();\n    },\n    \"data-test\": \"component-like-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, \"like this\")) : /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, post.postVotes.length, ' ', post.postVotes.length === 1 ? 'like' : 'likes'))), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"heading-5 color-light uppercase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, formatDate(post.date)));\n};\n\nPostDialogStats.propTypes = {\n  currentUser: PropTypes.object,\n  post: PropTypes.object.isRequired,\n  token: PropTypes.string,\n  dispatch: PropTypes.func.isRequired,\n  profileDispatch: PropTypes.func,\n  bookmarkPost: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  bookmarkPost: (postId, authToken) => dispatch(bookmarkPost(postId, authToken)),\n  showAlert: (text, onClick) => dispatch(showAlert(text, onClick)),\n  showModal: (props, component) => dispatch(showModal(props, component)),\n  hideModal: component => dispatch(hideModal(component))\n});\n\nexport default connect(null, mapDispatchToProps)(PostDialogStats);","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/components/PostDialog/PostDialogStats/PostDialogStats.js"],"names":["React","useRef","PropTypes","connect","classNames","bookmarkPost","showAlert","showModal","hideModal","formatDate","votePost","Icon","PulsatingIcon","LoginCard","PostDialogStats","currentUser","post","token","dispatch","profileDispatch","simple","ref","handleClick","children","style","gridColumn","justifySelf","width","type","payload","postId","_id","err","postDialogStatsClassNames","postVotes","find","vote","author","onClick","className","icon","document","querySelector","focus","bookmarks","bookmark","length","cursor","event","nativeEvent","stopImmediatePropagation","date","propTypes","object","isRequired","string","func","mapDispatchToProps","authToken","text","props","component"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,YAAT,QAA6B,iCAA7B;AACA,SAASC,SAAT,QAA0B,mCAA1B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,mCAArC;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,QAAT,QAAyB,+BAAzB;AAEA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,aAAP,MAA0B,wCAA1B;AACA,OAAOC,SAAP,MAAsB,2BAAtB;;AAEA,MAAMC,eAAe,GAAG,CAAC;AACvBC,EAAAA,WADuB;AAEvBC,EAAAA,IAFuB;AAGvBC,EAAAA,KAHuB;AAIvBC,EAAAA,QAJuB;AAKvBC,EAAAA,eALuB;AAMvBd,EAAAA,YANuB;AAOvBC,EAAAA,SAPuB;AAQvBC,EAAAA,SARuB;AASvBC,EAAAA,SATuB;AAUvBY,EAAAA;AAVuB,CAAD,KAWlB;AACJ,QAAMC,GAAG,GAAGpB,MAAM,EAAlB;;AAEA,QAAMqB,WAAW,GAAG,YAAY;AAC9B,QAAI,CAACP,WAAL,EAAkB;AAChB,aAAOR,SAAS,CACd;AACEgB,QAAAA,QAAQ,eAAE,oBAAC,SAAD;AAAW,UAAA,OAAO,EAAE,MAAMf,SAAS,CAAC,WAAD,CAAnC;AAAkD,UAAA,KAAK,MAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADZ;AAEEgB,QAAAA,KAAK,EAAE;AACLC,UAAAA,UAAU,EAAE,2BADP;AAELC,UAAAA,WAAW,EAAE,QAFR;AAGLC,UAAAA,KAAK,EAAE;AAHF;AAFT,OADc,EASd,WATc,CAAhB;AAWD,KAb6B,CAc9B;;;AACAT,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAE,WADC;AAEPC,MAAAA,OAAO,EAAE;AAAEd,QAAAA,WAAF;AAAee,QAAAA,MAAM,EAAEd,IAAI,CAACe,GAA5B;AAAiCb,QAAAA,QAAQ,EAAEC;AAA3C;AAFF,KAAD,CAAR;;AAIA,QAAI;AACF,YAAMT,QAAQ,CAACM,IAAI,CAACe,GAAN,EAAWd,KAAX,CAAd;AACD,KAFD,CAEE,OAAOe,GAAP,EAAY;AACZ1B,MAAAA,SAAS,CAAC,6BAAD,EAAgC,MAAMgB,WAAW,EAAjD,CAAT;AACD;AACF,GAxBD;;AA0BA,QAAMW,yBAAyB,GAAG7B,UAAU,CAAC;AAC3C,0BAAsB,IADqB;AAE3C,kCAA8BgB;AAFa,GAAD,CAA5C;AAKA,sBACE;AACE,IAAA,GAAG,EAAEC,GADP;AAEE,IAAA,SAAS,EAAEY,yBAFb;AAGE,iBAAU,6BAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGlB,WAAW,gBACV,oBAAC,aAAD;AACE,IAAA,MAAM,EACJ,CAAC,CAACC,IAAI,CAACkB,SAAL,CAAeC,IAAf,CAAqBC,IAAD,IAAUA,IAAI,CAACC,MAAL,KAAgBtB,WAAW,CAACgB,GAA1D,CAFN;AAIE,IAAA,UAAU,EAAEV,GAJd;AAKE,IAAA,aAAa,EAAE;AACbiB,MAAAA,OAAO,EAAE,MAAMhB,WAAW;AADb,KALjB;AAQE,IAAA,YAAY,EAAE,CACZ;AACEiB,MAAAA,SAAS,EAAE,0CADb;AAEEC,MAAAA,IAAI,EAAE;AAFR,KADY,EAKZ;AACED,MAAAA,SAAS,EAAE,gCADb;AAEEC,MAAAA,IAAI,EAAE;AAFR,KALY,CARhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADU,gBAqBV,oBAAC,IAAD;AACE,IAAA,OAAO,EAAE,MAAMlB,WAAW,EAD5B;AAEE,IAAA,IAAI,EAAC,eAFP;AAGE,IAAA,SAAS,EAAC,gCAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBJ,eA4BE,oBAAC,IAAD;AACE,IAAA,OAAO,EAAE,MACPP,WAAW,IAAI0B,QAAQ,CAACC,aAAT,CAAuB,qBAAvB,EAA8CC,KAA9C,EAFnB;AAIE,IAAA,SAAS,EAAC,cAJZ;AAKE,IAAA,IAAI,EAAC,oBALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5BF,eAmCE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,cAAhB;AAA+B,IAAA,IAAI,EAAC,qBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnCF,eAoCE,oBAAC,IAAD;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,OAAO,EAAE,MAAMtC,YAAY,CAACW,IAAI,CAACe,GAAN,EAAWd,KAAX,CAF7B;AAGE,IAAA,IAAI,EACFF,WAAW,IAAIA,WAAW,CAAC6B,SAA3B,GACI,CAAC,CAAC7B,WAAW,CAAC6B,SAAZ,CAAsBT,IAAtB,CACCU,QAAD,IAAcA,QAAQ,CAAC7B,IAAT,KAAkBA,IAAI,CAACe,GADrC,CAAF,GAGE,UAHF,GAIE,kBALN,GAMI,kBAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApCF,CALF,eAuDE;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGf,IAAI,CAACkB,SAAL,CAAeY,MAAf,KAA0B,CAA1B,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACkB,GADlB,eAEE;AACE,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KADT;AAEE,IAAA,OAAO,EAAGC,KAAD,IAAW;AAClBA,MAAAA,KAAK,CAACC,WAAN,CAAkBC,wBAAlB;AACA5B,MAAAA,WAAW;AACZ,KALH;AAME,iBAAU,uBANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,CADD,gBAeC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,IAAI,CAACkB,SAAL,CAAeY,MADlB,EAC0B,GAD1B,EAEG9B,IAAI,CAACkB,SAAL,CAAeY,MAAf,KAA0B,CAA1B,GAA8B,MAA9B,GAAuC,OAF1C,CADF,CAhBJ,CAvDF,eA+EE;AAAG,IAAA,SAAS,EAAC,iCAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgDrC,UAAU,CAACO,IAAI,CAACmC,IAAN,CAA1D,CA/EF,CADF;AAmFD,CAhID;;AAkIArC,eAAe,CAACsC,SAAhB,GAA4B;AAC1BrC,EAAAA,WAAW,EAAEb,SAAS,CAACmD,MADG;AAE1BrC,EAAAA,IAAI,EAAEd,SAAS,CAACmD,MAAV,CAAiBC,UAFG;AAG1BrC,EAAAA,KAAK,EAAEf,SAAS,CAACqD,MAHS;AAI1BrC,EAAAA,QAAQ,EAAEhB,SAAS,CAACsD,IAAV,CAAeF,UAJC;AAK1BnC,EAAAA,eAAe,EAAEjB,SAAS,CAACsD,IALD;AAM1BnD,EAAAA,YAAY,EAAEH,SAAS,CAACsD,IAAV,CAAeF;AANH,CAA5B;;AASA,MAAMG,kBAAkB,GAAIvC,QAAD,KAAe;AACxCb,EAAAA,YAAY,EAAE,CAACyB,MAAD,EAAS4B,SAAT,KACZxC,QAAQ,CAACb,YAAY,CAACyB,MAAD,EAAS4B,SAAT,CAAb,CAF8B;AAGxCpD,EAAAA,SAAS,EAAE,CAACqD,IAAD,EAAOrB,OAAP,KAAmBpB,QAAQ,CAACZ,SAAS,CAACqD,IAAD,EAAOrB,OAAP,CAAV,CAHE;AAIxC/B,EAAAA,SAAS,EAAE,CAACqD,KAAD,EAAQC,SAAR,KAAsB3C,QAAQ,CAACX,SAAS,CAACqD,KAAD,EAAQC,SAAR,CAAV,CAJD;AAKxCrD,EAAAA,SAAS,EAAGqD,SAAD,IAAe3C,QAAQ,CAACV,SAAS,CAACqD,SAAD,CAAV;AALM,CAAf,CAA3B;;AAQA,eAAe1D,OAAO,CAAC,IAAD,EAAOsD,kBAAP,CAAP,CAAkC3C,eAAlC,CAAf","sourcesContent":["import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\n\nimport { bookmarkPost } from '../../../redux/user/userActions';\nimport { showAlert } from '../../../redux/alert/alertActions';\nimport { showModal, hideModal } from '../../../redux/modal/modalActions';\n\nimport { formatDate } from '../../../utils/timeUtils';\nimport { votePost } from '../../../services/postService';\n\nimport Icon from '../../Icon/Icon';\nimport PulsatingIcon from '../../Icon/PulsatingIcon/PulsatingIcon';\nimport LoginCard from '../../LoginCard/LoginCard';\n\nconst PostDialogStats = ({\n  currentUser,\n  post,\n  token,\n  dispatch,\n  profileDispatch,\n  bookmarkPost,\n  showAlert,\n  showModal,\n  hideModal,\n  simple,\n}) => {\n  const ref = useRef();\n\n  const handleClick = async () => {\n    if (!currentUser) {\n      return showModal(\n        {\n          children: <LoginCard onClick={() => hideModal('Card/Card')} modal />,\n          style: {\n            gridColumn: 'center-start / center-end',\n            justifySelf: 'center',\n            width: '40rem',\n          },\n        },\n        'Card/Card'\n      );\n    }\n    // Dispatch the action immediately to avoid a delay between the user's click and something happening\n    dispatch({\n      type: 'VOTE_POST',\n      payload: { currentUser, postId: post._id, dispatch: profileDispatch },\n    });\n    try {\n      await votePost(post._id, token);\n    } catch (err) {\n      showAlert('Could not vote on the post.', () => handleClick());\n    }\n  };\n\n  const postDialogStatsClassNames = classNames({\n    'post-dialog__stats': true,\n    'post-dialog__stats--simple': simple,\n  });\n\n  return (\n    <div\n      ref={ref}\n      className={postDialogStatsClassNames}\n      data-test=\"component-post-dialog-stats\"\n    >\n      <div className=\"post-dialog__actions\">\n        {currentUser ? (\n          <PulsatingIcon\n            toggle={\n              !!post.postVotes.find((vote) => vote.author === currentUser._id)\n            }\n            elementRef={ref}\n            constantProps={{\n              onClick: () => handleClick(),\n            }}\n            toggledProps={[\n              {\n                className: 'icon--button post-dialog__like color-red',\n                icon: 'heart',\n              },\n              {\n                className: 'icon--button post-dialog__like',\n                icon: 'heart-outline',\n              },\n            ]}\n          />\n        ) : (\n          <Icon\n            onClick={() => handleClick()}\n            icon=\"heart-outline\"\n            className=\"icon--button post-dialog__like\"\n          />\n        )}\n        <Icon\n          onClick={() =>\n            currentUser && document.querySelector('.add-comment__input').focus()\n          }\n          className=\"icon--button\"\n          icon=\"chatbubble-outline\"\n        />\n        <Icon className=\"icon--button\" icon=\"paper-plane-outline\" />\n        <Icon\n          className=\"icon--button\"\n          onClick={() => bookmarkPost(post._id, token)}\n          icon={\n            currentUser && currentUser.bookmarks\n              ? !!currentUser.bookmarks.find(\n                  (bookmark) => bookmark.post === post._id\n                )\n                ? 'bookmark'\n                : 'bookmark-outline'\n              : 'bookmark-outline'\n          }\n        />\n      </div>\n      <p className=\"heading-4\">\n        {post.postVotes.length === 0 ? (\n          <span>\n            Be the first to{' '}\n            <b\n              style={{ cursor: 'pointer' }}\n              onClick={(event) => {\n                event.nativeEvent.stopImmediatePropagation();\n                handleClick();\n              }}\n              data-test=\"component-like-button\"\n            >\n              like this\n            </b>\n          </span>\n        ) : (\n          <span>\n            <b>\n              {post.postVotes.length}{' '}\n              {post.postVotes.length === 1 ? 'like' : 'likes'}\n            </b>\n          </span>\n        )}\n      </p>\n      <p className=\"heading-5 color-light uppercase\">{formatDate(post.date)}</p>\n    </div>\n  );\n};\n\nPostDialogStats.propTypes = {\n  currentUser: PropTypes.object,\n  post: PropTypes.object.isRequired,\n  token: PropTypes.string,\n  dispatch: PropTypes.func.isRequired,\n  profileDispatch: PropTypes.func,\n  bookmarkPost: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  bookmarkPost: (postId, authToken) =>\n    dispatch(bookmarkPost(postId, authToken)),\n  showAlert: (text, onClick) => dispatch(showAlert(text, onClick)),\n  showModal: (props, component) => dispatch(showModal(props, component)),\n  hideModal: (component) => dispatch(hideModal(component)),\n});\n\nexport default connect(null, mapDispatchToProps)(PostDialogStats);\n"]},"metadata":{},"sourceType":"module"}