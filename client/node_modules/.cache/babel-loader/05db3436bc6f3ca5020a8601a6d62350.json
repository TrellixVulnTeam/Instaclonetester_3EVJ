{"ast":null,"code":"var _jsxFileName = \"/Users/jidesh/Documents/instaclone/client/src/components/PostDialog/PostDialogStats/PostDialogStats.test.js\";\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport PostDialogStats from './PostDialogStats';\nimport { storeFactory, checkProps, findByTestAttribute } from '../../../utils/test/testUtils';\nconst mockCurrentUser = {\n  _id: '123',\n  username: 'test',\n  bookmarks: []\n};\nconst INITIAL_PROPS = {\n  post: {\n    _id: '123',\n    image: 'www.image.com',\n    caption: 'test',\n    author: { ...mockCurrentUser\n    },\n    postVotes: [{\n      votes: []\n    }],\n    date: Date.now()\n  },\n  token: '12345',\n  currentUser: mockCurrentUser,\n  dispatch: jest.fn(),\n  profileDispatch: jest.fn(),\n  bookmarkPost: jest.fn()\n};\n/**\n * Function to set up a wrapped component\n * @function setup\n * @param {object} initialState The initial state to be used for this setup\n * @returns {ShallowWrapper} The wrapped component\n */\n\nconst setup = (initialState = {}, additionalProps = {}) => {\n  const store = storeFactory(initialState);\n  const wrapper = shallow( /*#__PURE__*/React.createElement(PostDialogStats, Object.assign({\n    store: store\n  }, INITIAL_PROPS, additionalProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }))).dive();\n  return wrapper;\n};\n\ntest('renders without error', () => {\n  const wrapper = setup();\n  const component = findByTestAttribute(wrapper, 'component-post-dialog-stats');\n  expect(component.exists()).toBeTruthy();\n});\ntest('does not throw error with expected props', () => {\n  const result = checkProps(PostDialogStats, INITIAL_PROPS);\n  expect(result).toBeUndefined();\n});\ntest('calls dispatch when like button is clicked', () => {\n  const mockDispatch = jest.fn();\n  const wrapper = setup({}, {\n    dispatch: mockDispatch\n  });\n  const likeButton = findByTestAttribute(wrapper, 'component-like-button');\n  likeButton.simulate('click', {\n    nativeEvent: {\n      stopImmediatePropagation: jest.fn()\n    }\n  });\n  expect(mockDispatch).toHaveBeenCalledTimes(1);\n});","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/components/PostDialog/PostDialogStats/PostDialogStats.test.js"],"names":["React","shallow","PostDialogStats","storeFactory","checkProps","findByTestAttribute","mockCurrentUser","_id","username","bookmarks","INITIAL_PROPS","post","image","caption","author","postVotes","votes","date","Date","now","token","currentUser","dispatch","jest","fn","profileDispatch","bookmarkPost","setup","initialState","additionalProps","store","wrapper","dive","test","component","expect","exists","toBeTruthy","result","toBeUndefined","mockDispatch","likeButton","simulate","nativeEvent","stopImmediatePropagation","toHaveBeenCalledTimes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,SACEC,YADF,EAEEC,UAFF,EAGEC,mBAHF,QAIO,+BAJP;AAMA,MAAMC,eAAe,GAAG;AAAEC,EAAAA,GAAG,EAAE,KAAP;AAAcC,EAAAA,QAAQ,EAAE,MAAxB;AAAgCC,EAAAA,SAAS,EAAE;AAA3C,CAAxB;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,IAAI,EAAE;AACJJ,IAAAA,GAAG,EAAE,KADD;AAEJK,IAAAA,KAAK,EAAE,eAFH;AAGJC,IAAAA,OAAO,EAAE,MAHL;AAIJC,IAAAA,MAAM,EAAE,EAAE,GAAGR;AAAL,KAJJ;AAKJS,IAAAA,SAAS,EAAE,CAAC;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAD,CALP;AAMJC,IAAAA,IAAI,EAAEC,IAAI,CAACC,GAAL;AANF,GADc;AASpBC,EAAAA,KAAK,EAAE,OATa;AAUpBC,EAAAA,WAAW,EAAEf,eAVO;AAWpBgB,EAAAA,QAAQ,EAAEC,IAAI,CAACC,EAAL,EAXU;AAYpBC,EAAAA,eAAe,EAAEF,IAAI,CAACC,EAAL,EAZG;AAapBE,EAAAA,YAAY,EAAEH,IAAI,CAACC,EAAL;AAbM,CAAtB;AAgBA;;;;;;;AAMA,MAAMG,KAAK,GAAG,CAACC,YAAY,GAAG,EAAhB,EAAoBC,eAAe,GAAG,EAAtC,KAA6C;AACzD,QAAMC,KAAK,GAAG3B,YAAY,CAACyB,YAAD,CAA1B;AACA,QAAMG,OAAO,GAAG9B,OAAO,eACrB,oBAAC,eAAD;AAAiB,IAAA,KAAK,EAAE6B;AAAxB,KAAmCpB,aAAnC,EAAsDmB,eAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADqB,CAAP,CAEdG,IAFc,EAAhB;AAGA,SAAOD,OAAP;AACD,CAND;;AAQAE,IAAI,CAAC,uBAAD,EAA0B,MAAM;AAClC,QAAMF,OAAO,GAAGJ,KAAK,EAArB;AACA,QAAMO,SAAS,GAAG7B,mBAAmB,CAAC0B,OAAD,EAAU,6BAAV,CAArC;AAEAI,EAAAA,MAAM,CAACD,SAAS,CAACE,MAAV,EAAD,CAAN,CAA2BC,UAA3B;AACD,CALG,CAAJ;AAOAJ,IAAI,CAAC,0CAAD,EAA6C,MAAM;AACrD,QAAMK,MAAM,GAAGlC,UAAU,CAACF,eAAD,EAAkBQ,aAAlB,CAAzB;AACAyB,EAAAA,MAAM,CAACG,MAAD,CAAN,CAAeC,aAAf;AACD,CAHG,CAAJ;AAKAN,IAAI,CAAC,4CAAD,EAA+C,MAAM;AACvD,QAAMO,YAAY,GAAGjB,IAAI,CAACC,EAAL,EAArB;AACA,QAAMO,OAAO,GAAGJ,KAAK,CAAC,EAAD,EAAK;AAAEL,IAAAA,QAAQ,EAAEkB;AAAZ,GAAL,CAArB;AACA,QAAMC,UAAU,GAAGpC,mBAAmB,CAAC0B,OAAD,EAAU,uBAAV,CAAtC;AAEAU,EAAAA,UAAU,CAACC,QAAX,CAAoB,OAApB,EAA6B;AAC3BC,IAAAA,WAAW,EAAE;AAAEC,MAAAA,wBAAwB,EAAErB,IAAI,CAACC,EAAL;AAA5B;AADc,GAA7B;AAGAW,EAAAA,MAAM,CAACK,YAAD,CAAN,CAAqBK,qBAArB,CAA2C,CAA3C;AACD,CATG,CAAJ","sourcesContent":["import React from 'react';\nimport { shallow } from 'enzyme';\n\nimport PostDialogStats from './PostDialogStats';\n\nimport {\n  storeFactory,\n  checkProps,\n  findByTestAttribute\n} from '../../../utils/test/testUtils';\n\nconst mockCurrentUser = { _id: '123', username: 'test', bookmarks: [] };\n\nconst INITIAL_PROPS = {\n  post: {\n    _id: '123',\n    image: 'www.image.com',\n    caption: 'test',\n    author: { ...mockCurrentUser },\n    postVotes: [{ votes: [] }],\n    date: Date.now()\n  },\n  token: '12345',\n  currentUser: mockCurrentUser,\n  dispatch: jest.fn(),\n  profileDispatch: jest.fn(),\n  bookmarkPost: jest.fn()\n};\n\n/**\n * Function to set up a wrapped component\n * @function setup\n * @param {object} initialState The initial state to be used for this setup\n * @returns {ShallowWrapper} The wrapped component\n */\nconst setup = (initialState = {}, additionalProps = {}) => {\n  const store = storeFactory(initialState);\n  const wrapper = shallow(\n    <PostDialogStats store={store} {...INITIAL_PROPS} {...additionalProps} />\n  ).dive();\n  return wrapper;\n};\n\ntest('renders without error', () => {\n  const wrapper = setup();\n  const component = findByTestAttribute(wrapper, 'component-post-dialog-stats');\n\n  expect(component.exists()).toBeTruthy();\n});\n\ntest('does not throw error with expected props', () => {\n  const result = checkProps(PostDialogStats, INITIAL_PROPS);\n  expect(result).toBeUndefined();\n});\n\ntest('calls dispatch when like button is clicked', () => {\n  const mockDispatch = jest.fn();\n  const wrapper = setup({}, { dispatch: mockDispatch });\n  const likeButton = findByTestAttribute(wrapper, 'component-like-button');\n\n  likeButton.simulate('click', {\n    nativeEvent: { stopImmediatePropagation: jest.fn() }\n  });\n  expect(mockDispatch).toHaveBeenCalledTimes(1);\n});\n"]},"metadata":{},"sourceType":"module"}