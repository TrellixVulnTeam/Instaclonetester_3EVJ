{"ast":null,"code":"import axios from 'axios';\n/**\n * Creates a comment on a specific post\n * @function createComment\n * @param {string} message The message to be posted as a comment\n * @param {string} postId The id of the post to comment on\n * @param {string} authToken A user's auth token\n * @returns {object} The created comment\n */\n\nexport const createComment = async (message, postId, authToken) => {\n  try {\n    const response = await axios.post(`/api/comment/${postId}`, {\n      message\n    }, {\n      headers: {\n        authorization: authToken\n      }\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n/**\n * Deletes a comment with a specified comment id provided it was created by the user\n * @function deleteComment\n * @param {string} commentId Id of the comment to delete\n * @param {string} authToken A user's auth token\n */\n\nexport const deleteComment = async (commentId, authToken) => {\n  try {\n    await axios.delete(`/api/comment/${commentId}`, {\n      headers: {\n        authorization: authToken\n      }\n    });\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n/**\n * Votes on a comment\n * @function voteComment\n * @param {string} commentId Id of the comment to vote on\n * @param {string} authToken A user's auth token\n */\n\nexport const voteComment = async (commentId, authToken) => {\n  try {\n    await axios.post(`/api/comment/${commentId}/vote`, null, {\n      headers: {\n        authorization: authToken\n      }\n    });\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n/**\n * Creates a reply to a specific comment\n * @function createCommentReply\n * @param {string} message The message to be replied with to a comment\n * @param {string} parentCommentId The id of the comment to be replied to\n * @param {string} authToken A user's auth token\n * @returns {object} The created comment reply\n */\n\nexport const createCommentReply = async (message, parentCommentId, authToken) => {\n  try {\n    const response = await axios.post(`/api/comment/${parentCommentId}/reply`, {\n      message\n    }, {\n      headers: {\n        authorization: authToken\n      }\n    });\n    return response.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n/**\n * Deletes a comment reply with a specified comment reply id provided it was created by the user\n * @function deleteCommentReply\n * @param {string} commentReplyId Id of the comment reply to vote on\n * @param {string} authToken A user's auth token\n */\n\nexport const deleteCommentReply = async (commentReplyId, authToken) => {\n  try {\n    await axios.delete(`/api/comment/${commentReplyId}/reply`, {\n      headers: {\n        authorization: authToken\n      }\n    });\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n/**\n * Votes on a comment reply\n * @function voteCommentReply\n * @param {string} commentReplyId Id of the comment reply to vote on\n * @param {string} authToken A user's auth token\n */\n\nexport const voteCommentReply = async (commentReplyId, authToken) => {\n  try {\n    await axios.post(`/api/comment/${commentReplyId}/replyVote`, null, {\n      headers: {\n        authorization: authToken\n      }\n    });\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n/**\n * Gets 3 new replies from a parent comment\n * @function getCommentReplies\n * @param {string} parentCommentId The id of a parent comment to get replies from\n * @param {number} offset A number to offset the results\n * @returns {array} Array of replies\n */\n\nexport const getCommentReplies = async (parentCommentId, offset = 0) => {\n  try {\n    const response = await axios.get(`/api/comment/${parentCommentId}/${offset}/replies`);\n    return response.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n/**\n * Retrieves comments from a post with the given offset\n * @function getComments\n * @param {string} postId The id of a post to retrieve comments from\n * @param {number} offset The amount of comments to skip\n * @param {number} exclude The amount of comments to exlude (newest to oldest)\n * @returns {object} Object of comment details\n */\n\nexport const getComments = async (postId, offset, exclude = 0) => {\n  try {\n    const response = await axios.get(`/api/comment/${postId}/${offset}/${exclude}`);\n    return response.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};","map":{"version":3,"sources":["/Users/jidesh/Documents/instaclone/client/src/services/commentService.js"],"names":["axios","createComment","message","postId","authToken","response","post","headers","authorization","data","err","Error","deleteComment","commentId","delete","voteComment","createCommentReply","parentCommentId","deleteCommentReply","commentReplyId","voteCommentReply","getCommentReplies","offset","get","getComments","exclude"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\n/**\n * Creates a comment on a specific post\n * @function createComment\n * @param {string} message The message to be posted as a comment\n * @param {string} postId The id of the post to comment on\n * @param {string} authToken A user's auth token\n * @returns {object} The created comment\n */\nexport const createComment = async (message, postId, authToken) => {\n  try {\n    const response = await axios.post(\n      `/api/comment/${postId}`,\n      { message },\n      {\n        headers: {\n          authorization: authToken,\n        },\n      }\n    );\n    return response.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n\n/**\n * Deletes a comment with a specified comment id provided it was created by the user\n * @function deleteComment\n * @param {string} commentId Id of the comment to delete\n * @param {string} authToken A user's auth token\n */\nexport const deleteComment = async (commentId, authToken) => {\n  try {\n    await axios.delete(`/api/comment/${commentId}`, {\n      headers: {\n        authorization: authToken,\n      },\n    });\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n\n/**\n * Votes on a comment\n * @function voteComment\n * @param {string} commentId Id of the comment to vote on\n * @param {string} authToken A user's auth token\n */\nexport const voteComment = async (commentId, authToken) => {\n  try {\n    await axios.post(`/api/comment/${commentId}/vote`, null, {\n      headers: { authorization: authToken },\n    });\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n\n/**\n * Creates a reply to a specific comment\n * @function createCommentReply\n * @param {string} message The message to be replied with to a comment\n * @param {string} parentCommentId The id of the comment to be replied to\n * @param {string} authToken A user's auth token\n * @returns {object} The created comment reply\n */\nexport const createCommentReply = async (\n  message,\n  parentCommentId,\n  authToken\n) => {\n  try {\n    const response = await axios.post(\n      `/api/comment/${parentCommentId}/reply`,\n      { message },\n      {\n        headers: {\n          authorization: authToken,\n        },\n      }\n    );\n    return response.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n\n/**\n * Deletes a comment reply with a specified comment reply id provided it was created by the user\n * @function deleteCommentReply\n * @param {string} commentReplyId Id of the comment reply to vote on\n * @param {string} authToken A user's auth token\n */\nexport const deleteCommentReply = async (commentReplyId, authToken) => {\n  try {\n    await axios.delete(`/api/comment/${commentReplyId}/reply`, {\n      headers: {\n        authorization: authToken,\n      },\n    });\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n\n/**\n * Votes on a comment reply\n * @function voteCommentReply\n * @param {string} commentReplyId Id of the comment reply to vote on\n * @param {string} authToken A user's auth token\n */\nexport const voteCommentReply = async (commentReplyId, authToken) => {\n  try {\n    await axios.post(`/api/comment/${commentReplyId}/replyVote`, null, {\n      headers: { authorization: authToken },\n    });\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n\n/**\n * Gets 3 new replies from a parent comment\n * @function getCommentReplies\n * @param {string} parentCommentId The id of a parent comment to get replies from\n * @param {number} offset A number to offset the results\n * @returns {array} Array of replies\n */\nexport const getCommentReplies = async (parentCommentId, offset = 0) => {\n  try {\n    const response = await axios.get(\n      `/api/comment/${parentCommentId}/${offset}/replies`\n    );\n    return response.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n\n/**\n * Retrieves comments from a post with the given offset\n * @function getComments\n * @param {string} postId The id of a post to retrieve comments from\n * @param {number} offset The amount of comments to skip\n * @param {number} exclude The amount of comments to exlude (newest to oldest)\n * @returns {object} Object of comment details\n */\nexport const getComments = async (postId, offset, exclude = 0) => {\n  try {\n    const response = await axios.get(\n      `/api/comment/${postId}/${offset}/${exclude}`\n    );\n    return response.data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}